
stam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d5c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001068  20000070  0800406c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  200010d8  0800406c  000210d8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   000247d1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004a7d  00000000  00000000  00044869  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ff6e  00000000  00000000  000492e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001128  00000000  00000000  00059258  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001b08  00000000  00000000  0005a380  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a173  00000000  00000000  0005be88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006596  00000000  00000000  00065ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006c591  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003754  00000000  00000000  0006c610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e04 	.word	0x08003e04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003e04 	.word	0x08003e04

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	2310      	movs	r3, #16
 800024a:	4a06      	ldr	r2, [pc, #24]	; (8000264 <HAL_Init+0x1c>)
{
 800024c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000250:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000252:	430b      	orrs	r3, r1
 8000254:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	f002 faef 	bl	8002838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025a:	f002 fa7d 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	40022000 	.word	0x40022000

08000268 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <HAL_IncTick+0xc>)
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	20000e68 	.word	0x20000e68

08000278 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_GetTick+0x8>)
 800027a:	6818      	ldr	r0, [r3, #0]
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20000e68 	.word	0x20000e68

08000284 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000288:	2800      	cmp	r0, #0
 800028a:	da14      	bge.n	80002b6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800028c:	230f      	movs	r3, #15
 800028e:	b2c0      	uxtb	r0, r0
 8000290:	4003      	ands	r3, r0
 8000292:	3b08      	subs	r3, #8
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <HAL_NVIC_SetPriority+0x58>)
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	189b      	adds	r3, r3, r2
 800029c:	2203      	movs	r2, #3
 800029e:	4010      	ands	r0, r2
 80002a0:	4090      	lsls	r0, r2
 80002a2:	32fc      	adds	r2, #252	; 0xfc
 80002a4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002a6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002aa:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ac:	69dc      	ldr	r4, [r3, #28]
 80002ae:	43ac      	bics	r4, r5
 80002b0:	4321      	orrs	r1, r4
 80002b2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b6:	2503      	movs	r5, #3
 80002b8:	0883      	lsrs	r3, r0, #2
 80002ba:	4028      	ands	r0, r5
 80002bc:	40a8      	lsls	r0, r5
 80002be:	35fc      	adds	r5, #252	; 0xfc
 80002c0:	002e      	movs	r6, r5
 80002c2:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <HAL_NVIC_SetPriority+0x5c>)
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	189b      	adds	r3, r3, r2
 80002c8:	22c0      	movs	r2, #192	; 0xc0
 80002ca:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002cc:	4029      	ands	r1, r5
 80002ce:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	0092      	lsls	r2, r2, #2
 80002d2:	589c      	ldr	r4, [r3, r2]
 80002d4:	43b4      	bics	r4, r6
 80002d6:	4321      	orrs	r1, r4
 80002d8:	5099      	str	r1, [r3, r2]
 80002da:	e7eb      	b.n	80002b4 <HAL_NVIC_SetPriority+0x30>
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002e4:	231f      	movs	r3, #31
 80002e6:	4018      	ands	r0, r3
 80002e8:	3b1e      	subs	r3, #30
 80002ea:	4083      	lsls	r3, r0
 80002ec:	4a01      	ldr	r2, [pc, #4]	; (80002f4 <HAL_NVIC_EnableIRQ+0x10>)
 80002ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80002f0:	4770      	bx	lr
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f8:	4a09      	ldr	r2, [pc, #36]	; (8000320 <HAL_SYSTICK_Config+0x28>)
 80002fa:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80002fc:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d80d      	bhi.n	800031e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000302:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000306:	4808      	ldr	r0, [pc, #32]	; (8000328 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000308:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	6a03      	ldr	r3, [r0, #32]
 800030c:	0609      	lsls	r1, r1, #24
 800030e:	021b      	lsls	r3, r3, #8
 8000310:	0a1b      	lsrs	r3, r3, #8
 8000312:	430b      	orrs	r3, r1
 8000314:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000316:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000318:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800031a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800031e:	4770      	bx	lr
 8000320:	00ffffff 	.word	0x00ffffff
 8000324:	e000e010 	.word	0xe000e010
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800032e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000330:	2804      	cmp	r0, #4
 8000332:	d102      	bne.n	800033a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000334:	4310      	orrs	r0, r2
 8000336:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000338:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800033a:	2104      	movs	r1, #4
 800033c:	438a      	bics	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	e7fa      	b.n	8000338 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	e000e010 	.word	0xe000e010

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000348:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034a:	680b      	ldr	r3, [r1, #0]
{ 
 800034c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000350:	2300      	movs	r3, #0
{ 
 8000352:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000354:	9a02      	ldr	r2, [sp, #8]
 8000356:	40da      	lsrs	r2, r3
 8000358:	d101      	bne.n	800035e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800035a:	b007      	add	sp, #28
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035e:	2201      	movs	r2, #1
 8000360:	409a      	lsls	r2, r3
 8000362:	9203      	str	r2, [sp, #12]
 8000364:	9903      	ldr	r1, [sp, #12]
 8000366:	9a02      	ldr	r2, [sp, #8]
 8000368:	400a      	ands	r2, r1
 800036a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800036c:	d100      	bne.n	8000370 <HAL_GPIO_Init+0x28>
 800036e:	e088      	b.n	8000482 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000370:	9a01      	ldr	r2, [sp, #4]
 8000372:	2110      	movs	r1, #16
 8000374:	6852      	ldr	r2, [r2, #4]
 8000376:	0016      	movs	r6, r2
 8000378:	438e      	bics	r6, r1
 800037a:	2e02      	cmp	r6, #2
 800037c:	d10e      	bne.n	800039c <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800037e:	2507      	movs	r5, #7
 8000380:	401d      	ands	r5, r3
 8000382:	00ad      	lsls	r5, r5, #2
 8000384:	3901      	subs	r1, #1
 8000386:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000388:	08dc      	lsrs	r4, r3, #3
 800038a:	00a4      	lsls	r4, r4, #2
 800038c:	1904      	adds	r4, r0, r4
 800038e:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000390:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000392:	9901      	ldr	r1, [sp, #4]
 8000394:	6909      	ldr	r1, [r1, #16]
 8000396:	40a9      	lsls	r1, r5
 8000398:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800039a:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800039c:	2403      	movs	r4, #3
 800039e:	005f      	lsls	r7, r3, #1
 80003a0:	40bc      	lsls	r4, r7
 80003a2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003a4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003a8:	4025      	ands	r5, r4
 80003aa:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ac:	2503      	movs	r5, #3
 80003ae:	4015      	ands	r5, r2
 80003b0:	40bd      	lsls	r5, r7
 80003b2:	4661      	mov	r1, ip
 80003b4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003b6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	2e01      	cmp	r6, #1
 80003ba:	d80f      	bhi.n	80003dc <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003bc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003be:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003c8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003ca:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003cc:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ce:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003d0:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d2:	2101      	movs	r1, #1
 80003d4:	400d      	ands	r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003da:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003dc:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003de:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e2:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e4:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e6:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e8:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ea:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003ec:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ee:	420a      	tst	r2, r1
 80003f0:	d047      	beq.n	8000482 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	2101      	movs	r1, #1
 80003f4:	4c24      	ldr	r4, [pc, #144]	; (8000488 <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fa:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	430d      	orrs	r5, r1
 80003fe:	61a5      	str	r5, [r4, #24]
 8000400:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000402:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	400c      	ands	r4, r1
 8000406:	9405      	str	r4, [sp, #20]
 8000408:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	240f      	movs	r4, #15
 800040c:	491f      	ldr	r1, [pc, #124]	; (800048c <HAL_GPIO_Init+0x144>)
 800040e:	00ad      	lsls	r5, r5, #2
 8000410:	00b6      	lsls	r6, r6, #2
 8000412:	186d      	adds	r5, r5, r1
 8000414:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000416:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000418:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041e:	2400      	movs	r4, #0
 8000420:	4288      	cmp	r0, r1
 8000422:	d008      	beq.n	8000436 <HAL_GPIO_Init+0xee>
 8000424:	491a      	ldr	r1, [pc, #104]	; (8000490 <HAL_GPIO_Init+0x148>)
 8000426:	3401      	adds	r4, #1
 8000428:	4288      	cmp	r0, r1
 800042a:	d004      	beq.n	8000436 <HAL_GPIO_Init+0xee>
 800042c:	4919      	ldr	r1, [pc, #100]	; (8000494 <HAL_GPIO_Init+0x14c>)
 800042e:	3404      	adds	r4, #4
 8000430:	4288      	cmp	r0, r1
 8000432:	d100      	bne.n	8000436 <HAL_GPIO_Init+0xee>
 8000434:	3c03      	subs	r4, #3
 8000436:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000438:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800043c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800043e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000440:	4c15      	ldr	r4, [pc, #84]	; (8000498 <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000442:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000444:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000446:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000448:	03d1      	lsls	r1, r2, #15
 800044a:	d401      	bmi.n	8000450 <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800044c:	003e      	movs	r6, r7
 800044e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000450:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000452:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000454:	9e00      	ldr	r6, [sp, #0]
 8000456:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000458:	0391      	lsls	r1, r2, #14
 800045a:	d401      	bmi.n	8000460 <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800045c:	003e      	movs	r6, r7
 800045e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000460:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000462:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000464:	9e00      	ldr	r6, [sp, #0]
 8000466:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000468:	02d1      	lsls	r1, r2, #11
 800046a:	d401      	bmi.n	8000470 <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800046c:	003e      	movs	r6, r7
 800046e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000470:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000472:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000474:	9f00      	ldr	r7, [sp, #0]
 8000476:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000478:	0292      	lsls	r2, r2, #10
 800047a:	d401      	bmi.n	8000480 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800047c:	402e      	ands	r6, r5
 800047e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000480:	60e7      	str	r7, [r4, #12]
    position++;
 8000482:	3301      	adds	r3, #1
 8000484:	e766      	b.n	8000354 <HAL_GPIO_Init+0xc>
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000
 8000490:	48000400 	.word	0x48000400
 8000494:	48000800 	.word	0x48000800
 8000498:	40010400 	.word	0x40010400

0800049c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800049c:	2a00      	cmp	r2, #0
 800049e:	d001      	beq.n	80004a4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004a0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004a2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004a4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004a6:	e7fc      	b.n	80004a2 <HAL_GPIO_WritePin+0x6>

080004a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80004ac:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80004ae:	2c00      	cmp	r4, #0
 80004b0:	d03f      	beq.n	8000532 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80004b2:	0025      	movs	r5, r4
 80004b4:	3541      	adds	r5, #65	; 0x41
 80004b6:	782b      	ldrb	r3, [r5, #0]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d105      	bne.n	80004ca <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80004be:	0022      	movs	r2, r4
 80004c0:	3240      	adds	r2, #64	; 0x40
 80004c2:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80004c4:	0020      	movs	r0, r4
 80004c6:	f002 f96f 	bl	80027a8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004ca:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004cc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80004ce:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80004d0:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004d2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	68a6      	ldr	r6, [r4, #8]
 80004d8:	438a      	bics	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80004dc:	6861      	ldr	r1, [r4, #4]
 80004de:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <HAL_I2C_Init+0xa0>)
 80004e0:	400a      	ands	r2, r1
 80004e2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004e4:	6899      	ldr	r1, [r3, #8]
 80004e6:	4a19      	ldr	r2, [pc, #100]	; (800054c <HAL_I2C_Init+0xa4>)
 80004e8:	4011      	ands	r1, r2
 80004ea:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004ec:	2801      	cmp	r0, #1
 80004ee:	d121      	bne.n	8000534 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0209      	lsls	r1, r1, #8
 80004f4:	4331      	orrs	r1, r6
 80004f6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80004f8:	6858      	ldr	r0, [r3, #4]
 80004fa:	4915      	ldr	r1, [pc, #84]	; (8000550 <HAL_I2C_Init+0xa8>)
 80004fc:	4301      	orrs	r1, r0
 80004fe:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000500:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000502:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000504:	400a      	ands	r2, r1
 8000506:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000508:	6961      	ldr	r1, [r4, #20]
 800050a:	6922      	ldr	r2, [r4, #16]
 800050c:	430a      	orrs	r2, r1
 800050e:	69a1      	ldr	r1, [r4, #24]
 8000510:	0209      	lsls	r1, r1, #8
 8000512:	430a      	orrs	r2, r1
 8000514:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000516:	6a21      	ldr	r1, [r4, #32]
 8000518:	69e2      	ldr	r2, [r4, #28]
 800051a:	430a      	orrs	r2, r1
 800051c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800051e:	2201      	movs	r2, #1
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	430a      	orrs	r2, r1
 8000524:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000526:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000528:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800052a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800052c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800052e:	3442      	adds	r4, #66	; 0x42
 8000530:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000532:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000534:	2184      	movs	r1, #132	; 0x84
 8000536:	0209      	lsls	r1, r1, #8
 8000538:	4331      	orrs	r1, r6
 800053a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800053c:	2802      	cmp	r0, #2
 800053e:	d1db      	bne.n	80004f8 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0109      	lsls	r1, r1, #4
 8000544:	6059      	str	r1, [r3, #4]
 8000546:	e7d7      	b.n	80004f8 <HAL_I2C_Init+0x50>
 8000548:	f0ffffff 	.word	0xf0ffffff
 800054c:	ffff7fff 	.word	0xffff7fff
 8000550:	02008000 	.word	0x02008000

08000554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000556:	0004      	movs	r4, r0
 8000558:	3441      	adds	r4, #65	; 0x41
 800055a:	7822      	ldrb	r2, [r4, #0]
{
 800055c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800055e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000560:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000562:	2a20      	cmp	r2, #32
 8000564:	d118      	bne.n	8000598 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000566:	001d      	movs	r5, r3
 8000568:	3540      	adds	r5, #64	; 0x40
 800056a:	782e      	ldrb	r6, [r5, #0]
 800056c:	2e01      	cmp	r6, #1
 800056e:	d013      	beq.n	8000598 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000570:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000572:	3022      	adds	r0, #34	; 0x22
 8000574:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000576:	681e      	ldr	r6, [r3, #0]
 8000578:	3823      	subs	r0, #35	; 0x23
 800057a:	4386      	bics	r6, r0
 800057c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800057e:	681e      	ldr	r6, [r3, #0]
 8000580:	4f06      	ldr	r7, [pc, #24]	; (800059c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000582:	403e      	ands	r6, r7
 8000584:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000586:	681e      	ldr	r6, [r3, #0]
 8000588:	4331      	orrs	r1, r6
 800058a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800058c:	6819      	ldr	r1, [r3, #0]
 800058e:	4308      	orrs	r0, r1
 8000590:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000592:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000594:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000596:	7028      	strb	r0, [r5, #0]
  }
}
 8000598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	ffffefff 	.word	0xffffefff

080005a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80005a2:	0005      	movs	r5, r0
 80005a4:	3541      	adds	r5, #65	; 0x41
 80005a6:	782a      	ldrb	r2, [r5, #0]
{
 80005a8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80005aa:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80005ac:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80005ae:	2a20      	cmp	r2, #32
 80005b0:	d117      	bne.n	80005e2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80005b2:	001c      	movs	r4, r3
 80005b4:	3440      	adds	r4, #64	; 0x40
 80005b6:	7826      	ldrb	r6, [r4, #0]
 80005b8:	2e01      	cmp	r6, #1
 80005ba:	d012      	beq.n	80005e2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80005bc:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80005be:	3022      	adds	r0, #34	; 0x22
 80005c0:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80005c2:	681e      	ldr	r6, [r3, #0]
 80005c4:	3823      	subs	r0, #35	; 0x23
 80005c6:	4386      	bics	r6, r0
 80005c8:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80005ca:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80005cc:	4f05      	ldr	r7, [pc, #20]	; (80005e4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80005ce:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80005d0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80005d2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80005d4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80005d6:	6819      	ldr	r1, [r3, #0]
 80005d8:	4308      	orrs	r0, r1
 80005da:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80005dc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80005de:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80005e0:	7020      	strb	r0, [r4, #0]
  }
}
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	fffff0ff 	.word	0xfffff0ff

080005e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005ea:	6803      	ldr	r3, [r0, #0]
{
 80005ec:	b085      	sub	sp, #20
 80005ee:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005f0:	07db      	lsls	r3, r3, #31
 80005f2:	d433      	bmi.n	800065c <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005f4:	682b      	ldr	r3, [r5, #0]
 80005f6:	079b      	lsls	r3, r3, #30
 80005f8:	d500      	bpl.n	80005fc <HAL_RCC_OscConfig+0x14>
 80005fa:	e08a      	b.n	8000712 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005fc:	682b      	ldr	r3, [r5, #0]
 80005fe:	071b      	lsls	r3, r3, #28
 8000600:	d500      	bpl.n	8000604 <HAL_RCC_OscConfig+0x1c>
 8000602:	e0ca      	b.n	800079a <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000604:	682b      	ldr	r3, [r5, #0]
 8000606:	075b      	lsls	r3, r3, #29
 8000608:	d500      	bpl.n	800060c <HAL_RCC_OscConfig+0x24>
 800060a:	e0ed      	b.n	80007e8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800060c:	682b      	ldr	r3, [r5, #0]
 800060e:	06db      	lsls	r3, r3, #27
 8000610:	d51a      	bpl.n	8000648 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000612:	696a      	ldr	r2, [r5, #20]
 8000614:	4cbc      	ldr	r4, [pc, #752]	; (8000908 <HAL_RCC_OscConfig+0x320>)
 8000616:	2304      	movs	r3, #4
 8000618:	2a01      	cmp	r2, #1
 800061a:	d000      	beq.n	800061e <HAL_RCC_OscConfig+0x36>
 800061c:	e159      	b.n	80008d2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800061e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000620:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000622:	430b      	orrs	r3, r1
 8000624:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000628:	431a      	orrs	r2, r3
 800062a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800062c:	f7ff fe24 	bl	8000278 <HAL_GetTick>
 8000630:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000634:	4233      	tst	r3, r6
 8000636:	d100      	bne.n	800063a <HAL_RCC_OscConfig+0x52>
 8000638:	e144      	b.n	80008c4 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800063a:	21f8      	movs	r1, #248	; 0xf8
 800063c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800063e:	69ab      	ldr	r3, [r5, #24]
 8000640:	438a      	bics	r2, r1
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4313      	orrs	r3, r2
 8000646:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000648:	682b      	ldr	r3, [r5, #0]
 800064a:	069b      	lsls	r3, r3, #26
 800064c:	d500      	bpl.n	8000650 <HAL_RCC_OscConfig+0x68>
 800064e:	e167      	b.n	8000920 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000650:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000652:	2900      	cmp	r1, #0
 8000654:	d000      	beq.n	8000658 <HAL_RCC_OscConfig+0x70>
 8000656:	e1a4      	b.n	80009a2 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000658:	2000      	movs	r0, #0
 800065a:	e018      	b.n	800068e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800065c:	210c      	movs	r1, #12
 800065e:	4caa      	ldr	r4, [pc, #680]	; (8000908 <HAL_RCC_OscConfig+0x320>)
 8000660:	6862      	ldr	r2, [r4, #4]
 8000662:	400a      	ands	r2, r1
 8000664:	2a04      	cmp	r2, #4
 8000666:	d00b      	beq.n	8000680 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000668:	6863      	ldr	r3, [r4, #4]
 800066a:	400b      	ands	r3, r1
 800066c:	2b08      	cmp	r3, #8
 800066e:	d110      	bne.n	8000692 <HAL_RCC_OscConfig+0xaa>
 8000670:	22c0      	movs	r2, #192	; 0xc0
 8000672:	6863      	ldr	r3, [r4, #4]
 8000674:	0252      	lsls	r2, r2, #9
 8000676:	4013      	ands	r3, r2
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	0252      	lsls	r2, r2, #9
 800067c:	4293      	cmp	r3, r2
 800067e:	d108      	bne.n	8000692 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000680:	6823      	ldr	r3, [r4, #0]
 8000682:	039b      	lsls	r3, r3, #14
 8000684:	d5b6      	bpl.n	80005f4 <HAL_RCC_OscConfig+0xc>
 8000686:	686b      	ldr	r3, [r5, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1b3      	bne.n	80005f4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800068c:	2001      	movs	r0, #1
}
 800068e:	b005      	add	sp, #20
 8000690:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000692:	686b      	ldr	r3, [r5, #4]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d113      	bne.n	80006c0 <HAL_RCC_OscConfig+0xd8>
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	6822      	ldr	r2, [r4, #0]
 800069c:	025b      	lsls	r3, r3, #9
 800069e:	4313      	orrs	r3, r2
 80006a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006a2:	f7ff fde9 	bl	8000278 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006a6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80006a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006aa:	02b6      	lsls	r6, r6, #10
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	4233      	tst	r3, r6
 80006b0:	d1a0      	bne.n	80005f4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b2:	f7ff fde1 	bl	8000278 <HAL_GetTick>
 80006b6:	1bc0      	subs	r0, r0, r7
 80006b8:	2864      	cmp	r0, #100	; 0x64
 80006ba:	d9f7      	bls.n	80006ac <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80006bc:	2003      	movs	r0, #3
 80006be:	e7e6      	b.n	800068e <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d116      	bne.n	80006f2 <HAL_RCC_OscConfig+0x10a>
 80006c4:	6823      	ldr	r3, [r4, #0]
 80006c6:	4a91      	ldr	r2, [pc, #580]	; (800090c <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006c8:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ca:	4013      	ands	r3, r2
 80006cc:	6023      	str	r3, [r4, #0]
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	4a8f      	ldr	r2, [pc, #572]	; (8000910 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006d2:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006d4:	4013      	ands	r3, r2
 80006d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006d8:	f7ff fdce 	bl	8000278 <HAL_GetTick>
 80006dc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	4233      	tst	r3, r6
 80006e2:	d100      	bne.n	80006e6 <HAL_RCC_OscConfig+0xfe>
 80006e4:	e786      	b.n	80005f4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006e6:	f7ff fdc7 	bl	8000278 <HAL_GetTick>
 80006ea:	1bc0      	subs	r0, r0, r7
 80006ec:	2864      	cmp	r0, #100	; 0x64
 80006ee:	d9f6      	bls.n	80006de <HAL_RCC_OscConfig+0xf6>
 80006f0:	e7e4      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	d105      	bne.n	8000702 <HAL_RCC_OscConfig+0x11a>
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	6822      	ldr	r2, [r4, #0]
 80006fa:	02db      	lsls	r3, r3, #11
 80006fc:	4313      	orrs	r3, r2
 80006fe:	6023      	str	r3, [r4, #0]
 8000700:	e7ca      	b.n	8000698 <HAL_RCC_OscConfig+0xb0>
 8000702:	6823      	ldr	r3, [r4, #0]
 8000704:	4a81      	ldr	r2, [pc, #516]	; (800090c <HAL_RCC_OscConfig+0x324>)
 8000706:	4013      	ands	r3, r2
 8000708:	6023      	str	r3, [r4, #0]
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	4a80      	ldr	r2, [pc, #512]	; (8000910 <HAL_RCC_OscConfig+0x328>)
 800070e:	4013      	ands	r3, r2
 8000710:	e7c6      	b.n	80006a0 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000712:	220c      	movs	r2, #12
 8000714:	4c7c      	ldr	r4, [pc, #496]	; (8000908 <HAL_RCC_OscConfig+0x320>)
 8000716:	6863      	ldr	r3, [r4, #4]
 8000718:	4213      	tst	r3, r2
 800071a:	d00b      	beq.n	8000734 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800071c:	6863      	ldr	r3, [r4, #4]
 800071e:	4013      	ands	r3, r2
 8000720:	2b08      	cmp	r3, #8
 8000722:	d115      	bne.n	8000750 <HAL_RCC_OscConfig+0x168>
 8000724:	22c0      	movs	r2, #192	; 0xc0
 8000726:	6863      	ldr	r3, [r4, #4]
 8000728:	0252      	lsls	r2, r2, #9
 800072a:	4013      	ands	r3, r2
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0212      	lsls	r2, r2, #8
 8000730:	4293      	cmp	r3, r2
 8000732:	d10d      	bne.n	8000750 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	079b      	lsls	r3, r3, #30
 8000738:	d502      	bpl.n	8000740 <HAL_RCC_OscConfig+0x158>
 800073a:	68eb      	ldr	r3, [r5, #12]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d1a5      	bne.n	800068c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000740:	21f8      	movs	r1, #248	; 0xf8
 8000742:	6822      	ldr	r2, [r4, #0]
 8000744:	692b      	ldr	r3, [r5, #16]
 8000746:	438a      	bics	r2, r1
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	4313      	orrs	r3, r2
 800074c:	6023      	str	r3, [r4, #0]
 800074e:	e755      	b.n	80005fc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000750:	68ea      	ldr	r2, [r5, #12]
 8000752:	2301      	movs	r3, #1
 8000754:	2a00      	cmp	r2, #0
 8000756:	d00f      	beq.n	8000778 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000758:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800075a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800075c:	4313      	orrs	r3, r2
 800075e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000760:	f7ff fd8a 	bl	8000278 <HAL_GetTick>
 8000764:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	4233      	tst	r3, r6
 800076a:	d1e9      	bne.n	8000740 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800076c:	f7ff fd84 	bl	8000278 <HAL_GetTick>
 8000770:	1bc0      	subs	r0, r0, r7
 8000772:	2802      	cmp	r0, #2
 8000774:	d9f7      	bls.n	8000766 <HAL_RCC_OscConfig+0x17e>
 8000776:	e7a1      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 8000778:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800077a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800077c:	439a      	bics	r2, r3
 800077e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000780:	f7ff fd7a 	bl	8000278 <HAL_GetTick>
 8000784:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	4233      	tst	r3, r6
 800078a:	d100      	bne.n	800078e <HAL_RCC_OscConfig+0x1a6>
 800078c:	e736      	b.n	80005fc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800078e:	f7ff fd73 	bl	8000278 <HAL_GetTick>
 8000792:	1bc0      	subs	r0, r0, r7
 8000794:	2802      	cmp	r0, #2
 8000796:	d9f6      	bls.n	8000786 <HAL_RCC_OscConfig+0x19e>
 8000798:	e790      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800079a:	69ea      	ldr	r2, [r5, #28]
 800079c:	2301      	movs	r3, #1
 800079e:	4c5a      	ldr	r4, [pc, #360]	; (8000908 <HAL_RCC_OscConfig+0x320>)
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d010      	beq.n	80007c6 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 80007a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007a6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80007a8:	4313      	orrs	r3, r2
 80007aa:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80007ac:	f7ff fd64 	bl	8000278 <HAL_GetTick>
 80007b0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007b4:	4233      	tst	r3, r6
 80007b6:	d000      	beq.n	80007ba <HAL_RCC_OscConfig+0x1d2>
 80007b8:	e724      	b.n	8000604 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ba:	f7ff fd5d 	bl	8000278 <HAL_GetTick>
 80007be:	1bc0      	subs	r0, r0, r7
 80007c0:	2802      	cmp	r0, #2
 80007c2:	d9f6      	bls.n	80007b2 <HAL_RCC_OscConfig+0x1ca>
 80007c4:	e77a      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 80007c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007c8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80007ca:	439a      	bics	r2, r3
 80007cc:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80007ce:	f7ff fd53 	bl	8000278 <HAL_GetTick>
 80007d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007d6:	4233      	tst	r3, r6
 80007d8:	d100      	bne.n	80007dc <HAL_RCC_OscConfig+0x1f4>
 80007da:	e713      	b.n	8000604 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007dc:	f7ff fd4c 	bl	8000278 <HAL_GetTick>
 80007e0:	1bc0      	subs	r0, r0, r7
 80007e2:	2802      	cmp	r0, #2
 80007e4:	d9f6      	bls.n	80007d4 <HAL_RCC_OscConfig+0x1ec>
 80007e6:	e769      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007e8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80007ea:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007ec:	4c46      	ldr	r4, [pc, #280]	; (8000908 <HAL_RCC_OscConfig+0x320>)
 80007ee:	0552      	lsls	r2, r2, #21
 80007f0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80007f2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f4:	4213      	tst	r3, r2
 80007f6:	d108      	bne.n	800080a <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	69e3      	ldr	r3, [r4, #28]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	61e3      	str	r3, [r4, #28]
 80007fe:	69e3      	ldr	r3, [r4, #28]
 8000800:	4013      	ands	r3, r2
 8000802:	9303      	str	r3, [sp, #12]
 8000804:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000806:	2301      	movs	r3, #1
 8000808:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800080a:	2780      	movs	r7, #128	; 0x80
 800080c:	4e41      	ldr	r6, [pc, #260]	; (8000914 <HAL_RCC_OscConfig+0x32c>)
 800080e:	007f      	lsls	r7, r7, #1
 8000810:	6833      	ldr	r3, [r6, #0]
 8000812:	423b      	tst	r3, r7
 8000814:	d006      	beq.n	8000824 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000816:	68ab      	ldr	r3, [r5, #8]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d113      	bne.n	8000844 <HAL_RCC_OscConfig+0x25c>
 800081c:	6a22      	ldr	r2, [r4, #32]
 800081e:	4313      	orrs	r3, r2
 8000820:	6223      	str	r3, [r4, #32]
 8000822:	e030      	b.n	8000886 <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000824:	6833      	ldr	r3, [r6, #0]
 8000826:	433b      	orrs	r3, r7
 8000828:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800082a:	f7ff fd25 	bl	8000278 <HAL_GetTick>
 800082e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000830:	6833      	ldr	r3, [r6, #0]
 8000832:	423b      	tst	r3, r7
 8000834:	d1ef      	bne.n	8000816 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000836:	f7ff fd1f 	bl	8000278 <HAL_GetTick>
 800083a:	9b01      	ldr	r3, [sp, #4]
 800083c:	1ac0      	subs	r0, r0, r3
 800083e:	2864      	cmp	r0, #100	; 0x64
 8000840:	d9f6      	bls.n	8000830 <HAL_RCC_OscConfig+0x248>
 8000842:	e73b      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
 8000844:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000846:	2b00      	cmp	r3, #0
 8000848:	d114      	bne.n	8000874 <HAL_RCC_OscConfig+0x28c>
 800084a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800084c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800084e:	4393      	bics	r3, r2
 8000850:	6223      	str	r3, [r4, #32]
 8000852:	6a23      	ldr	r3, [r4, #32]
 8000854:	3203      	adds	r2, #3
 8000856:	4393      	bics	r3, r2
 8000858:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800085a:	f7ff fd0d 	bl	8000278 <HAL_GetTick>
 800085e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000860:	6a23      	ldr	r3, [r4, #32]
 8000862:	423b      	tst	r3, r7
 8000864:	d025      	beq.n	80008b2 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000866:	f7ff fd07 	bl	8000278 <HAL_GetTick>
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <HAL_RCC_OscConfig+0x330>)
 800086c:	1b80      	subs	r0, r0, r6
 800086e:	4298      	cmp	r0, r3
 8000870:	d9f6      	bls.n	8000860 <HAL_RCC_OscConfig+0x278>
 8000872:	e723      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000874:	2b05      	cmp	r3, #5
 8000876:	d10b      	bne.n	8000890 <HAL_RCC_OscConfig+0x2a8>
 8000878:	6a21      	ldr	r1, [r4, #32]
 800087a:	3b01      	subs	r3, #1
 800087c:	430b      	orrs	r3, r1
 800087e:	6223      	str	r3, [r4, #32]
 8000880:	6a23      	ldr	r3, [r4, #32]
 8000882:	431a      	orrs	r2, r3
 8000884:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000886:	f7ff fcf7 	bl	8000278 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800088a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800088c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800088e:	e00d      	b.n	80008ac <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000890:	6a23      	ldr	r3, [r4, #32]
 8000892:	4393      	bics	r3, r2
 8000894:	2204      	movs	r2, #4
 8000896:	6223      	str	r3, [r4, #32]
 8000898:	6a23      	ldr	r3, [r4, #32]
 800089a:	4393      	bics	r3, r2
 800089c:	e7c0      	b.n	8000820 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800089e:	f7ff fceb 	bl	8000278 <HAL_GetTick>
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_RCC_OscConfig+0x330>)
 80008a4:	1b80      	subs	r0, r0, r6
 80008a6:	4298      	cmp	r0, r3
 80008a8:	d900      	bls.n	80008ac <HAL_RCC_OscConfig+0x2c4>
 80008aa:	e707      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008ac:	6a23      	ldr	r3, [r4, #32]
 80008ae:	423b      	tst	r3, r7
 80008b0:	d0f5      	beq.n	800089e <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 80008b2:	9b00      	ldr	r3, [sp, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d000      	beq.n	80008ba <HAL_RCC_OscConfig+0x2d2>
 80008b8:	e6a8      	b.n	800060c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008ba:	69e3      	ldr	r3, [r4, #28]
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_RCC_OscConfig+0x334>)
 80008be:	4013      	ands	r3, r2
 80008c0:	61e3      	str	r3, [r4, #28]
 80008c2:	e6a3      	b.n	800060c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008c4:	f7ff fcd8 	bl	8000278 <HAL_GetTick>
 80008c8:	1bc0      	subs	r0, r0, r7
 80008ca:	2802      	cmp	r0, #2
 80008cc:	d800      	bhi.n	80008d0 <HAL_RCC_OscConfig+0x2e8>
 80008ce:	e6b0      	b.n	8000632 <HAL_RCC_OscConfig+0x4a>
 80008d0:	e6f4      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80008d2:	3205      	adds	r2, #5
 80008d4:	d103      	bne.n	80008de <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 80008d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008d8:	439a      	bics	r2, r3
 80008da:	6362      	str	r2, [r4, #52]	; 0x34
 80008dc:	e6ad      	b.n	800063a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008de:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008e0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80008e2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80008e4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80008e6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80008e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008ea:	4393      	bics	r3, r2
 80008ec:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008ee:	f7ff fcc3 	bl	8000278 <HAL_GetTick>
 80008f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008f6:	4233      	tst	r3, r6
 80008f8:	d100      	bne.n	80008fc <HAL_RCC_OscConfig+0x314>
 80008fa:	e6a5      	b.n	8000648 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008fc:	f7ff fcbc 	bl	8000278 <HAL_GetTick>
 8000900:	1bc0      	subs	r0, r0, r7
 8000902:	2802      	cmp	r0, #2
 8000904:	d9f6      	bls.n	80008f4 <HAL_RCC_OscConfig+0x30c>
 8000906:	e6d9      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
 8000908:	40021000 	.word	0x40021000
 800090c:	fffeffff 	.word	0xfffeffff
 8000910:	fffbffff 	.word	0xfffbffff
 8000914:	40007000 	.word	0x40007000
 8000918:	00001388 	.word	0x00001388
 800091c:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000920:	210c      	movs	r1, #12
 8000922:	4c46      	ldr	r4, [pc, #280]	; (8000a3c <HAL_RCC_OscConfig+0x454>)
 8000924:	6862      	ldr	r2, [r4, #4]
 8000926:	400a      	ands	r2, r1
 8000928:	428a      	cmp	r2, r1
 800092a:	d009      	beq.n	8000940 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000930:	2b08      	cmp	r3, #8
 8000932:	d10e      	bne.n	8000952 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000934:	22c0      	movs	r2, #192	; 0xc0
 8000936:	6863      	ldr	r3, [r4, #4]
 8000938:	0252      	lsls	r2, r2, #9
 800093a:	4013      	ands	r3, r2
 800093c:	4293      	cmp	r3, r2
 800093e:	d108      	bne.n	8000952 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000942:	03db      	lsls	r3, r3, #15
 8000944:	d400      	bmi.n	8000948 <HAL_RCC_OscConfig+0x360>
 8000946:	e683      	b.n	8000650 <HAL_RCC_OscConfig+0x68>
 8000948:	6a2b      	ldr	r3, [r5, #32]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d000      	beq.n	8000950 <HAL_RCC_OscConfig+0x368>
 800094e:	e69d      	b.n	800068c <HAL_RCC_OscConfig+0xa4>
 8000950:	e67e      	b.n	8000650 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000952:	6a2b      	ldr	r3, [r5, #32]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d011      	beq.n	800097c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 8000958:	2680      	movs	r6, #128	; 0x80
 800095a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800095c:	0276      	lsls	r6, r6, #9
 800095e:	4333      	orrs	r3, r6
 8000960:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000962:	f7ff fc89 	bl	8000278 <HAL_GetTick>
 8000966:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800096a:	4233      	tst	r3, r6
 800096c:	d000      	beq.n	8000970 <HAL_RCC_OscConfig+0x388>
 800096e:	e66f      	b.n	8000650 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000970:	f7ff fc82 	bl	8000278 <HAL_GetTick>
 8000974:	1bc0      	subs	r0, r0, r7
 8000976:	2802      	cmp	r0, #2
 8000978:	d9f6      	bls.n	8000968 <HAL_RCC_OscConfig+0x380>
 800097a:	e69f      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 800097c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800097e:	4a30      	ldr	r2, [pc, #192]	; (8000a40 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000980:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000982:	4013      	ands	r3, r2
 8000984:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000986:	f7ff fc77 	bl	8000278 <HAL_GetTick>
 800098a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800098c:	0276      	lsls	r6, r6, #9
 800098e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000990:	4233      	tst	r3, r6
 8000992:	d100      	bne.n	8000996 <HAL_RCC_OscConfig+0x3ae>
 8000994:	e65c      	b.n	8000650 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000996:	f7ff fc6f 	bl	8000278 <HAL_GetTick>
 800099a:	1bc0      	subs	r0, r0, r7
 800099c:	2802      	cmp	r0, #2
 800099e:	d9f6      	bls.n	800098e <HAL_RCC_OscConfig+0x3a6>
 80009a0:	e68c      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009a2:	220c      	movs	r2, #12
 80009a4:	4c25      	ldr	r4, [pc, #148]	; (8000a3c <HAL_RCC_OscConfig+0x454>)
 80009a6:	6863      	ldr	r3, [r4, #4]
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b08      	cmp	r3, #8
 80009ac:	d100      	bne.n	80009b0 <HAL_RCC_OscConfig+0x3c8>
 80009ae:	e66d      	b.n	800068c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	4a24      	ldr	r2, [pc, #144]	; (8000a44 <HAL_RCC_OscConfig+0x45c>)
 80009b4:	4013      	ands	r3, r2
 80009b6:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009b8:	2902      	cmp	r1, #2
 80009ba:	d12f      	bne.n	8000a1c <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 80009bc:	f7ff fc5c 	bl	8000278 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009c0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009c2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009c4:	04b6      	lsls	r6, r6, #18
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	4233      	tst	r3, r6
 80009ca:	d121      	bne.n	8000a10 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009cc:	220f      	movs	r2, #15
 80009ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009d0:	4393      	bics	r3, r2
 80009d2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80009d4:	4313      	orrs	r3, r2
 80009d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009d8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80009da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80009dc:	6862      	ldr	r2, [r4, #4]
 80009de:	430b      	orrs	r3, r1
 80009e0:	4919      	ldr	r1, [pc, #100]	; (8000a48 <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009e2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009e4:	400a      	ands	r2, r1
 80009e6:	4313      	orrs	r3, r2
 80009e8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	6822      	ldr	r2, [r4, #0]
 80009ee:	045b      	lsls	r3, r3, #17
 80009f0:	4313      	orrs	r3, r2
 80009f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fc40 	bl	8000278 <HAL_GetTick>
 80009f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009fa:	04ad      	lsls	r5, r5, #18
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	422b      	tst	r3, r5
 8000a00:	d000      	beq.n	8000a04 <HAL_RCC_OscConfig+0x41c>
 8000a02:	e629      	b.n	8000658 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a04:	f7ff fc38 	bl	8000278 <HAL_GetTick>
 8000a08:	1b80      	subs	r0, r0, r6
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9f6      	bls.n	80009fc <HAL_RCC_OscConfig+0x414>
 8000a0e:	e655      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a10:	f7ff fc32 	bl	8000278 <HAL_GetTick>
 8000a14:	1bc0      	subs	r0, r0, r7
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d9d5      	bls.n	80009c6 <HAL_RCC_OscConfig+0x3de>
 8000a1a:	e64f      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fc2c 	bl	8000278 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a20:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a22:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a24:	04ad      	lsls	r5, r5, #18
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	422b      	tst	r3, r5
 8000a2a:	d100      	bne.n	8000a2e <HAL_RCC_OscConfig+0x446>
 8000a2c:	e614      	b.n	8000658 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a2e:	f7ff fc23 	bl	8000278 <HAL_GetTick>
 8000a32:	1b80      	subs	r0, r0, r6
 8000a34:	2802      	cmp	r0, #2
 8000a36:	d9f6      	bls.n	8000a26 <HAL_RCC_OscConfig+0x43e>
 8000a38:	e640      	b.n	80006bc <HAL_RCC_OscConfig+0xd4>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	fffeffff 	.word	0xfffeffff
 8000a44:	feffffff 	.word	0xfeffffff
 8000a48:	ffc27fff 	.word	0xffc27fff

08000a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a4c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000a4e:	4c19      	ldr	r4, [pc, #100]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000a50:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000a52:	2210      	movs	r2, #16
 8000a54:	0021      	movs	r1, r4
 8000a56:	4668      	mov	r0, sp
 8000a58:	f002 fda2 	bl	80035a0 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000a5c:	0021      	movs	r1, r4
 8000a5e:	ad04      	add	r5, sp, #16
 8000a60:	2210      	movs	r2, #16
 8000a62:	3110      	adds	r1, #16
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fd9b 	bl	80035a0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a6a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000a6c:	4e12      	ldr	r6, [pc, #72]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000a6e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a70:	401a      	ands	r2, r3
 8000a72:	2a08      	cmp	r2, #8
 8000a74:	d004      	beq.n	8000a80 <HAL_RCC_GetSysClockFreq+0x34>
 8000a76:	2a0c      	cmp	r2, #12
 8000a78:	d11a      	bne.n	8000ab0 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000a7a:	4810      	ldr	r0, [pc, #64]	; (8000abc <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a7c:	b008      	add	sp, #32
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000a80:	200f      	movs	r0, #15
 8000a82:	466a      	mov	r2, sp
 8000a84:	0c99      	lsrs	r1, r3, #18
 8000a86:	4001      	ands	r1, r0
 8000a88:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000a8a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000a8c:	4002      	ands	r2, r0
 8000a8e:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000a90:	22c0      	movs	r2, #192	; 0xc0
 8000a92:	2080      	movs	r0, #128	; 0x80
 8000a94:	0252      	lsls	r2, r2, #9
 8000a96:	4013      	ands	r3, r2
 8000a98:	0240      	lsls	r0, r0, #9
 8000a9a:	4283      	cmp	r3, r0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000aa0:	e002      	b.n	8000aa8 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d1fb      	bne.n	8000a9e <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000aa8:	f7ff fb42 	bl	8000130 <__udivsi3>
 8000aac:	4360      	muls	r0, r4
 8000aae:	e7e5      	b.n	8000a7c <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000ab2:	e7e3      	b.n	8000a7c <HAL_RCC_GetSysClockFreq+0x30>
 8000ab4:	08003e1c 	.word	0x08003e1c
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	02dc6c00 	.word	0x02dc6c00
 8000ac0:	007a1200 	.word	0x007a1200

08000ac4 <HAL_RCC_ClockConfig>:
{
 8000ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4c4f      	ldr	r4, [pc, #316]	; (8000c08 <HAL_RCC_ClockConfig+0x144>)
{
 8000aca:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000acc:	6823      	ldr	r3, [r4, #0]
{
 8000ace:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d31f      	bcc.n	8000b16 <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ad6:	6832      	ldr	r2, [r6, #0]
 8000ad8:	0793      	lsls	r3, r2, #30
 8000ada:	d428      	bmi.n	8000b2e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000adc:	07d3      	lsls	r3, r2, #31
 8000ade:	d42e      	bmi.n	8000b3e <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	6822      	ldr	r2, [r4, #0]
 8000ae4:	9901      	ldr	r1, [sp, #4]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	4291      	cmp	r1, r2
 8000aea:	d200      	bcs.n	8000aee <HAL_RCC_ClockConfig+0x2a>
 8000aec:	e07e      	b.n	8000bec <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aee:	6833      	ldr	r3, [r6, #0]
 8000af0:	4c46      	ldr	r4, [pc, #280]	; (8000c0c <HAL_RCC_ClockConfig+0x148>)
 8000af2:	075b      	lsls	r3, r3, #29
 8000af4:	d500      	bpl.n	8000af8 <HAL_RCC_ClockConfig+0x34>
 8000af6:	e080      	b.n	8000bfa <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000af8:	f7ff ffa8 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
 8000afc:	6863      	ldr	r3, [r4, #4]
 8000afe:	4a44      	ldr	r2, [pc, #272]	; (8000c10 <HAL_RCC_ClockConfig+0x14c>)
 8000b00:	061b      	lsls	r3, r3, #24
 8000b02:	0f1b      	lsrs	r3, r3, #28
 8000b04:	5cd3      	ldrb	r3, [r2, r3]
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <HAL_RCC_ClockConfig+0x150>)
 8000b0a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f001 fe93 	bl	8002838 <HAL_InitTick>
  return HAL_OK;
 8000b12:	2000      	movs	r0, #0
 8000b14:	e00a      	b.n	8000b2c <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	9901      	ldr	r1, [sp, #4]
 8000b1a:	4393      	bics	r3, r2
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	4013      	ands	r3, r2
 8000b24:	9a01      	ldr	r2, [sp, #4]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d0d5      	beq.n	8000ad6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000b2a:	2001      	movs	r0, #1
}
 8000b2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b2e:	20f0      	movs	r0, #240	; 0xf0
 8000b30:	4936      	ldr	r1, [pc, #216]	; (8000c0c <HAL_RCC_ClockConfig+0x148>)
 8000b32:	684b      	ldr	r3, [r1, #4]
 8000b34:	4383      	bics	r3, r0
 8000b36:	68b0      	ldr	r0, [r6, #8]
 8000b38:	4303      	orrs	r3, r0
 8000b3a:	604b      	str	r3, [r1, #4]
 8000b3c:	e7ce      	b.n	8000adc <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b3e:	6872      	ldr	r2, [r6, #4]
 8000b40:	4d32      	ldr	r5, [pc, #200]	; (8000c0c <HAL_RCC_ClockConfig+0x148>)
 8000b42:	2a01      	cmp	r2, #1
 8000b44:	d11a      	bne.n	8000b7c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	039b      	lsls	r3, r3, #14
 8000b4a:	d5ee      	bpl.n	8000b2a <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	686b      	ldr	r3, [r5, #4]
 8000b50:	438b      	bics	r3, r1
 8000b52:	4313      	orrs	r3, r2
 8000b54:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b56:	f7ff fb8f 	bl	8000278 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b5a:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b5c:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d11c      	bne.n	8000b9c <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b62:	220c      	movs	r2, #12
 8000b64:	686b      	ldr	r3, [r5, #4]
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d0b9      	beq.n	8000ae0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6c:	f7ff fb84 	bl	8000278 <HAL_GetTick>
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_RCC_ClockConfig+0x154>)
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	4298      	cmp	r0, r3
 8000b76:	d9f4      	bls.n	8000b62 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000b78:	2003      	movs	r0, #3
 8000b7a:	e7d7      	b.n	8000b2c <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b7c:	2a02      	cmp	r2, #2
 8000b7e:	d103      	bne.n	8000b88 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	019b      	lsls	r3, r3, #6
 8000b84:	d4e2      	bmi.n	8000b4c <HAL_RCC_ClockConfig+0x88>
 8000b86:	e7d0      	b.n	8000b2a <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000b88:	2a03      	cmp	r2, #3
 8000b8a:	d103      	bne.n	8000b94 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b8e:	03db      	lsls	r3, r3, #15
 8000b90:	d4dc      	bmi.n	8000b4c <HAL_RCC_ClockConfig+0x88>
 8000b92:	e7ca      	b.n	8000b2a <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	079b      	lsls	r3, r3, #30
 8000b98:	d4d8      	bmi.n	8000b4c <HAL_RCC_ClockConfig+0x88>
 8000b9a:	e7c6      	b.n	8000b2a <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d10b      	bne.n	8000bb8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ba0:	220c      	movs	r2, #12
 8000ba2:	686b      	ldr	r3, [r5, #4]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d09a      	beq.n	8000ae0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000baa:	f7ff fb65 	bl	8000278 <HAL_GetTick>
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_RCC_ClockConfig+0x154>)
 8000bb0:	1bc0      	subs	r0, r0, r7
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d9f4      	bls.n	8000ba0 <HAL_RCC_ClockConfig+0xdc>
 8000bb6:	e7df      	b.n	8000b78 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d011      	beq.n	8000be0 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	686b      	ldr	r3, [r5, #4]
 8000bc0:	4213      	tst	r3, r2
 8000bc2:	d100      	bne.n	8000bc6 <HAL_RCC_ClockConfig+0x102>
 8000bc4:	e78c      	b.n	8000ae0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc6:	f7ff fb57 	bl	8000278 <HAL_GetTick>
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_RCC_ClockConfig+0x154>)
 8000bcc:	1bc0      	subs	r0, r0, r7
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d9f4      	bls.n	8000bbc <HAL_RCC_ClockConfig+0xf8>
 8000bd2:	e7d1      	b.n	8000b78 <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd4:	f7ff fb50 	bl	8000278 <HAL_GetTick>
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_RCC_ClockConfig+0x154>)
 8000bda:	1bc0      	subs	r0, r0, r7
 8000bdc:	4298      	cmp	r0, r3
 8000bde:	d8cb      	bhi.n	8000b78 <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000be0:	220c      	movs	r2, #12
 8000be2:	686b      	ldr	r3, [r5, #4]
 8000be4:	4013      	ands	r3, r2
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d1f4      	bne.n	8000bd4 <HAL_RCC_ClockConfig+0x110>
 8000bea:	e779      	b.n	8000ae0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bec:	6822      	ldr	r2, [r4, #0]
 8000bee:	439a      	bics	r2, r3
 8000bf0:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bf2:	6822      	ldr	r2, [r4, #0]
 8000bf4:	421a      	tst	r2, r3
 8000bf6:	d198      	bne.n	8000b2a <HAL_RCC_ClockConfig+0x66>
 8000bf8:	e779      	b.n	8000aee <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000bfa:	6863      	ldr	r3, [r4, #4]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_RCC_ClockConfig+0x158>)
 8000bfe:	4013      	ands	r3, r2
 8000c00:	68f2      	ldr	r2, [r6, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	6063      	str	r3, [r4, #4]
 8000c06:	e777      	b.n	8000af8 <HAL_RCC_ClockConfig+0x34>
 8000c08:	40022000 	.word	0x40022000
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	08003eb6 	.word	0x08003eb6
 8000c14:	20000004 	.word	0x20000004
 8000c18:	00001388 	.word	0x00001388
 8000c1c:	fffff8ff 	.word	0xfffff8ff

08000c20 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000c20:	4b01      	ldr	r3, [pc, #4]	; (8000c28 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c22:	6818      	ldr	r0, [r3, #0]
}
 8000c24:	4770      	bx	lr
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	055b      	lsls	r3, r3, #21
 8000c34:	0f5b      	lsrs	r3, r3, #29
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c3a:	6810      	ldr	r0, [r2, #0]
 8000c3c:	40d8      	lsrs	r0, r3
}    
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	08003ec6 	.word	0x08003ec6
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8000c4c:	2307      	movs	r3, #7
{
 8000c4e:	b510      	push	{r4, lr}
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c50:	2403      	movs	r4, #3
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8000c52:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_RCC_GetClockConfig+0x30>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4022      	ands	r2, r4
 8000c5a:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	34ed      	adds	r4, #237	; 0xed
 8000c60:	4022      	ands	r2, r4
 8000c62:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8000c64:	22e0      	movs	r2, #224	; 0xe0
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	00d2      	lsls	r2, r2, #3
 8000c6a:	4013      	ands	r3, r2
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000c6c:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8000c6e:	60c3      	str	r3, [r0, #12]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_RCC_GetClockConfig+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4013      	ands	r3, r2
 8000c76:	600b      	str	r3, [r1, #0]
}
 8000c78:	bd10      	pop	{r4, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000c84:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c86:	6803      	ldr	r3, [r0, #0]
{
 8000c88:	b085      	sub	sp, #20
 8000c8a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c8c:	03db      	lsls	r3, r3, #15
 8000c8e:	d528      	bpl.n	8000ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c90:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c92:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c94:	4c40      	ldr	r4, [pc, #256]	; (8000d98 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000c96:	0552      	lsls	r2, r2, #21
 8000c98:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c9a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c9c:	4213      	tst	r3, r2
 8000c9e:	d108      	bne.n	8000cb2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	69e3      	ldr	r3, [r4, #28]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61e3      	str	r3, [r4, #28]
 8000ca6:	69e3      	ldr	r3, [r4, #28]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	9303      	str	r3, [sp, #12]
 8000cac:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb2:	2780      	movs	r7, #128	; 0x80
 8000cb4:	4e39      	ldr	r6, [pc, #228]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000cb6:	007f      	lsls	r7, r7, #1
 8000cb8:	6833      	ldr	r3, [r6, #0]
 8000cba:	423b      	tst	r3, r7
 8000cbc:	d038      	beq.n	8000d30 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000cbe:	22c0      	movs	r2, #192	; 0xc0
 8000cc0:	6a23      	ldr	r3, [r4, #32]
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	4e36      	ldr	r6, [pc, #216]	; (8000da0 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cc8:	d144      	bne.n	8000d54 <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000cca:	6a23      	ldr	r3, [r4, #32]
 8000ccc:	401e      	ands	r6, r3
 8000cce:	686b      	ldr	r3, [r5, #4]
 8000cd0:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000cd2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000cd4:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d103      	bne.n	8000ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cda:	69e3      	ldr	r3, [r4, #28]
 8000cdc:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000ce2:	682a      	ldr	r2, [r5, #0]
 8000ce4:	07d3      	lsls	r3, r2, #31
 8000ce6:	d506      	bpl.n	8000cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	492b      	ldr	r1, [pc, #172]	; (8000d98 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000cec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000cee:	4383      	bics	r3, r0
 8000cf0:	68a8      	ldr	r0, [r5, #8]
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000cf6:	0693      	lsls	r3, r2, #26
 8000cf8:	d506      	bpl.n	8000d08 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000cfa:	2010      	movs	r0, #16
 8000cfc:	4926      	ldr	r1, [pc, #152]	; (8000d98 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000cfe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d00:	4383      	bics	r3, r0
 8000d02:	68e8      	ldr	r0, [r5, #12]
 8000d04:	4303      	orrs	r3, r0
 8000d06:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000d08:	0393      	lsls	r3, r2, #14
 8000d0a:	d506      	bpl.n	8000d1a <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000d0c:	2080      	movs	r0, #128	; 0x80
 8000d0e:	4922      	ldr	r1, [pc, #136]	; (8000d98 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000d10:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d12:	4383      	bics	r3, r0
 8000d14:	6968      	ldr	r0, [r5, #20]
 8000d16:	4303      	orrs	r3, r0
 8000d18:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000d1a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000d1c:	0553      	lsls	r3, r2, #21
 8000d1e:	d517      	bpl.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000d20:	2140      	movs	r1, #64	; 0x40
 8000d22:	4a1d      	ldr	r2, [pc, #116]	; (8000d98 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000d24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d26:	438b      	bics	r3, r1
 8000d28:	6929      	ldr	r1, [r5, #16]
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	e00f      	b.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d30:	6833      	ldr	r3, [r6, #0]
 8000d32:	433b      	orrs	r3, r7
 8000d34:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d36:	f7ff fa9f 	bl	8000278 <HAL_GetTick>
 8000d3a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d3c:	6833      	ldr	r3, [r6, #0]
 8000d3e:	423b      	tst	r3, r7
 8000d40:	d1bd      	bne.n	8000cbe <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d42:	f7ff fa99 	bl	8000278 <HAL_GetTick>
 8000d46:	9b01      	ldr	r3, [sp, #4]
 8000d48:	1ac0      	subs	r0, r0, r3
 8000d4a:	2864      	cmp	r0, #100	; 0x64
 8000d4c:	d9f6      	bls.n	8000d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
}
 8000d50:	b005      	add	sp, #20
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d54:	6869      	ldr	r1, [r5, #4]
 8000d56:	400a      	ands	r2, r1
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d0b6      	beq.n	8000cca <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d5c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d5e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d60:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d62:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d64:	025b      	lsls	r3, r3, #9
 8000d66:	4303      	orrs	r3, r0
 8000d68:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d6a:	6a23      	ldr	r3, [r4, #32]
 8000d6c:	480e      	ldr	r0, [pc, #56]	; (8000da8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d6e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d70:	4003      	ands	r3, r0
 8000d72:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000d74:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d76:	07d3      	lsls	r3, r2, #31
 8000d78:	d5a7      	bpl.n	8000cca <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fa7d 	bl	8000278 <HAL_GetTick>
 8000d7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d80:	2202      	movs	r2, #2
 8000d82:	6a23      	ldr	r3, [r4, #32]
 8000d84:	4213      	tst	r3, r2
 8000d86:	d1a0      	bne.n	8000cca <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d88:	f7ff fa76 	bl	8000278 <HAL_GetTick>
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000d8e:	1bc0      	subs	r0, r0, r7
 8000d90:	4298      	cmp	r0, r3
 8000d92:	d9f5      	bls.n	8000d80 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8000d94:	e7db      	b.n	8000d4e <HAL_RCCEx_PeriphCLKConfig+0xca>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40007000 	.word	0x40007000
 8000da0:	fffffcff 	.word	0xfffffcff
 8000da4:	efffffff 	.word	0xefffffff
 8000da8:	fffeffff 	.word	0xfffeffff
 8000dac:	00001388 	.word	0x00001388

08000db0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000db0:	21e0      	movs	r1, #224	; 0xe0
 8000db2:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000db4:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	438a      	bics	r2, r1
 8000dba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dbc:	2282      	movs	r2, #130	; 0x82
 8000dbe:	6841      	ldr	r1, [r0, #4]
 8000dc0:	0052      	lsls	r2, r2, #1
 8000dc2:	4291      	cmp	r1, r2
 8000dc4:	d10c      	bne.n	8000de0 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	6882      	ldr	r2, [r0, #8]
 8000dca:	0209      	lsls	r1, r1, #8
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d003      	beq.n	8000dd8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	00c9      	lsls	r1, r1, #3
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	d103      	bne.n	8000de0 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	438a      	bics	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000de4:	0189      	lsls	r1, r1, #6
 8000de6:	428a      	cmp	r2, r1
 8000de8:	d106      	bne.n	8000df8 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8000dea:	6819      	ldr	r1, [r3, #0]
 8000dec:	4c07      	ldr	r4, [pc, #28]	; (8000e0c <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8000dee:	4021      	ands	r1, r4
 8000df0:	6019      	str	r1, [r3, #0]
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000df8:	0003      	movs	r3, r0
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	335d      	adds	r3, #93	; 0x5d
 8000dfe:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000e00:	2300      	movs	r3, #0
 8000e02:	305c      	adds	r0, #92	; 0x5c
 8000e04:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8000e06:	2003      	movs	r0, #3
 8000e08:	bd10      	pop	{r4, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	ffffdfff 	.word	0xffffdfff

08000e10 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	0005      	movs	r5, r0
 8000e14:	000c      	movs	r4, r1
 8000e16:	0016      	movs	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000e18:	2780      	movs	r7, #128	; 0x80
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	6898      	ldr	r0, [r3, #8]
 8000e1e:	4038      	ands	r0, r7
 8000e20:	d006      	beq.n	8000e30 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8000e22:	1c62      	adds	r2, r4, #1
 8000e24:	d0fa      	beq.n	8000e1c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d103      	bne.n	8000e32 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x22>
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	f7ff ffc0 	bl	8000db0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000e32:	f7ff fa21 	bl	8000278 <HAL_GetTick>
 8000e36:	1b80      	subs	r0, r0, r6
 8000e38:	4284      	cmp	r4, r0
 8000e3a:	d8ee      	bhi.n	8000e1a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8000e3c:	e7f5      	b.n	8000e2a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>

08000e3e <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000e40:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000e42:	0006      	movs	r6, r0
 8000e44:	000d      	movs	r5, r1
 8000e46:	0014      	movs	r4, r2
 8000e48:	b085      	sub	sp, #20
 8000e4a:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000e4c:	00ff      	lsls	r7, r7, #3
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000e4e:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8000e50:	6831      	ldr	r1, [r6, #0]
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000e52:	1dda      	adds	r2, r3, #7
  while ((hspi->Instance->SR & Fifo) != State)
 8000e54:	6888      	ldr	r0, [r1, #8]
 8000e56:	4028      	ands	r0, r5
 8000e58:	d00c      	beq.n	8000e74 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x36>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000e5a:	42bd      	cmp	r5, r7
 8000e5c:	d103      	bne.n	8000e66 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x28>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000e5e:	7b0b      	ldrb	r3, [r1, #12]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg);
 8000e64:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8000e66:	1c63      	adds	r3, r4, #1
 8000e68:	d0f4      	beq.n	8000e54 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000e6a:	2c00      	cmp	r4, #0
 8000e6c:	d104      	bne.n	8000e78 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x3a>
 8000e6e:	0030      	movs	r0, r6
 8000e70:	f7ff ff9e 	bl	8000db0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000e74:	b005      	add	sp, #20
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000e78:	f7ff f9fe 	bl	8000278 <HAL_GetTick>
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	1ac0      	subs	r0, r0, r3
 8000e80:	4284      	cmp	r4, r0
 8000e82:	d8e4      	bhi.n	8000e4e <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
 8000e84:	e7f3      	b.n	8000e6e <SPI_WaitFifoStateUntilTimeout.constprop.10+0x30>

08000e86 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e86:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000e88:	0013      	movs	r3, r2
{
 8000e8a:	000d      	movs	r5, r1
 8000e8c:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000e8e:	000a      	movs	r2, r1
 8000e90:	21c0      	movs	r1, #192	; 0xc0
 8000e92:	0149      	lsls	r1, r1, #5
{
 8000e94:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000e96:	f7ff ffd2 	bl	8000e3e <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d005      	beq.n	8000eaa <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000ea2:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	6623      	str	r3, [r4, #96]	; 0x60
 8000ea8:	e00f      	b.n	8000eca <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000eaa:	0032      	movs	r2, r6
 8000eac:	0029      	movs	r1, r5
 8000eae:	0020      	movs	r0, r4
 8000eb0:	f7ff ffae 	bl	8000e10 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d1f2      	bne.n	8000e9e <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000eb8:	21c0      	movs	r1, #192	; 0xc0
 8000eba:	0033      	movs	r3, r6
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	00c9      	lsls	r1, r1, #3
 8000ec0:	0020      	movs	r0, r4
 8000ec2:	f7ff ffbc 	bl	8000e3e <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d1e9      	bne.n	8000e9e <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000eca:	bd70      	pop	{r4, r5, r6, pc}

08000ecc <HAL_SPI_Init>:
{
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000ed0:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d04b      	beq.n	8000f6e <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed6:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ed8:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eda:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000edc:	355d      	adds	r5, #93	; 0x5d
 8000ede:	782b      	ldrb	r3, [r5, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d105      	bne.n	8000ef2 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8000ee6:	0022      	movs	r2, r4
 8000ee8:	325c      	adds	r2, #92	; 0x5c
 8000eea:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8000eec:	0020      	movs	r0, r4
 8000eee:	f001 fc7f 	bl	80027f0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ef2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ef8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000efa:	680b      	ldr	r3, [r1, #0]
 8000efc:	2000      	movs	r0, #0
 8000efe:	4393      	bics	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
 8000f02:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000f04:	68e2      	ldr	r2, [r4, #12]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d931      	bls.n	8000f70 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000f0c:	26f0      	movs	r6, #240	; 0xf0
 8000f0e:	0136      	lsls	r6, r6, #4
 8000f10:	42b2      	cmp	r2, r6
 8000f12:	d133      	bne.n	8000f7c <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000f14:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000f16:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d103      	bne.n	8000f24 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d92f      	bls.n	8000f80 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000f20:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000f22:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000f24:	68a7      	ldr	r7, [r4, #8]
 8000f26:	6863      	ldr	r3, [r4, #4]
 8000f28:	69a0      	ldr	r0, [r4, #24]
 8000f2a:	433b      	orrs	r3, r7
 8000f2c:	6927      	ldr	r7, [r4, #16]
 8000f2e:	433b      	orrs	r3, r7
 8000f30:	6967      	ldr	r7, [r4, #20]
 8000f32:	433b      	orrs	r3, r7
 8000f34:	69e7      	ldr	r7, [r4, #28]
 8000f36:	433b      	orrs	r3, r7
 8000f38:	6a27      	ldr	r7, [r4, #32]
 8000f3a:	433b      	orrs	r3, r7
 8000f3c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000f3e:	433b      	orrs	r3, r7
 8000f40:	2780      	movs	r7, #128	; 0x80
 8000f42:	00bf      	lsls	r7, r7, #2
 8000f44:	4007      	ands	r7, r0
 8000f46:	433b      	orrs	r3, r7
 8000f48:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f4c:	0c00      	lsrs	r0, r0, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f52:	431a      	orrs	r2, r3
 8000f54:	2304      	movs	r3, #4
 8000f56:	4018      	ands	r0, r3
 8000f58:	4310      	orrs	r0, r2
 8000f5a:	4306      	orrs	r6, r0
 8000f5c:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f5e:	69cb      	ldr	r3, [r1, #28]
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f62:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f64:	4013      	ands	r3, r2
 8000f66:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000f68:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f6a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000f6c:	702b      	strb	r3, [r5, #0]
}
 8000f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000f70:	2680      	movs	r6, #128	; 0x80
 8000f72:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d0ce      	beq.n	8000f16 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	62a0      	str	r0, [r4, #40]	; 0x28
 8000f7a:	e7cc      	b.n	8000f16 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000f7c:	0006      	movs	r6, r0
 8000f7e:	e7fb      	b.n	8000f78 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e7ce      	b.n	8000f22 <HAL_SPI_Init+0x56>
 8000f84:	fffff7ff 	.word	0xfffff7ff

08000f88 <HAL_SPI_Transmit>:
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8000f8c:	0003      	movs	r3, r0
{
 8000f8e:	b087      	sub	sp, #28
  __HAL_LOCK(hspi);
 8000f90:	335c      	adds	r3, #92	; 0x5c
{
 8000f92:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	781b      	ldrb	r3, [r3, #0]
{
 8000f98:	0004      	movs	r4, r0
 8000f9a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8000f9c:	2602      	movs	r6, #2
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d100      	bne.n	8000fa4 <HAL_SPI_Transmit+0x1c>
 8000fa2:	e07a      	b.n	800109a <HAL_SPI_Transmit+0x112>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9a02      	ldr	r2, [sp, #8]
 8000fa8:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000faa:	f7ff f965 	bl	8000278 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000fae:	0023      	movs	r3, r4
 8000fb0:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 8000fb2:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8000fb4:	9303      	str	r3, [sp, #12]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d167      	bne.n	800108e <HAL_SPI_Transmit+0x106>
    errorcode = HAL_ERROR;
 8000fbe:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8000fc0:	2d00      	cmp	r5, #0
 8000fc2:	d064      	beq.n	800108e <HAL_SPI_Transmit+0x106>
 8000fc4:	9b01      	ldr	r3, [sp, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d061      	beq.n	800108e <HAL_SPI_Transmit+0x106>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	9a03      	ldr	r2, [sp, #12]
 8000fce:	7013      	strb	r3, [r2, #0]
  hspi->TxXferSize  = Size;
 8000fd0:	466a      	mov	r2, sp
 8000fd2:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fd4:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8000fd6:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8000fd8:	466a      	mov	r2, sp
 8000fda:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fdc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8000fde:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000fe0:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000fe2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000fe4:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8000fe6:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8000fe8:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000fea:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000fec:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000fee:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	68a2      	ldr	r2, [r4, #8]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d105      	bne.n	8001006 <HAL_SPI_Transmit+0x7e>
    SPI_1LINE_TX(hspi);
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	6822      	ldr	r2, [r4, #0]
 8000ffe:	01db      	lsls	r3, r3, #7
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	430b      	orrs	r3, r1
 8001004:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	4211      	tst	r1, r2
 800100e:	d102      	bne.n	8001016 <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001016:	21e0      	movs	r1, #224	; 0xe0
 8001018:	68e0      	ldr	r0, [r4, #12]
 800101a:	00c9      	lsls	r1, r1, #3
 800101c:	6862      	ldr	r2, [r4, #4]
 800101e:	4288      	cmp	r0, r1
 8001020:	d947      	bls.n	80010b2 <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001022:	2a00      	cmp	r2, #0
 8001024:	d002      	beq.n	800102c <HAL_SPI_Transmit+0xa4>
 8001026:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001028:	2a01      	cmp	r2, #1
 800102a:	d106      	bne.n	800103a <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)pData);
 800102c:	882a      	ldrh	r2, [r5, #0]
      pData += sizeof(uint16_t);
 800102e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)pData);
 8001030:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001032:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001034:	3b01      	subs	r3, #1
 8001036:	b29b      	uxth	r3, r3
 8001038:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800103a:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 800103c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <HAL_SPI_Transmit+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001042:	9a00      	ldr	r2, [sp, #0]
 8001044:	0039      	movs	r1, r7
 8001046:	0020      	movs	r0, r4
 8001048:	f7ff ff1d 	bl	8000e86 <SPI_EndRxTxTransaction>
 800104c:	2800      	cmp	r0, #0
 800104e:	d000      	beq.n	8001052 <HAL_SPI_Transmit+0xca>
 8001050:	e06c      	b.n	800112c <HAL_SPI_Transmit+0x1a4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001052:	68a3      	ldr	r3, [r4, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d106      	bne.n	8001066 <HAL_SPI_Transmit+0xde>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	9205      	str	r2, [sp, #20]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	9305      	str	r3, [sp, #20]
 8001064:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001066:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8001068:	1e73      	subs	r3, r6, #1
 800106a:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 800106c:	b2f6      	uxtb	r6, r6
 800106e:	e00e      	b.n	800108e <HAL_SPI_Transmit+0x106>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	4232      	tst	r2, r6
 8001076:	d007      	beq.n	8001088 <HAL_SPI_Transmit+0x100>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001078:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 800107a:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 800107c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800107e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001080:	3b01      	subs	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001086:	e7d9      	b.n	800103c <HAL_SPI_Transmit+0xb4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001088:	2f00      	cmp	r7, #0
 800108a:	d109      	bne.n	80010a0 <HAL_SPI_Transmit+0x118>
          errorcode = HAL_TIMEOUT;
 800108c:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 800108e:	2301      	movs	r3, #1
 8001090:	9a03      	ldr	r2, [sp, #12]
 8001092:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8001094:	2300      	movs	r3, #0
 8001096:	9a02      	ldr	r2, [sp, #8]
 8001098:	7013      	strb	r3, [r2, #0]
}
 800109a:	0030      	movs	r0, r6
 800109c:	b007      	add	sp, #28
 800109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80010a0:	1c7b      	adds	r3, r7, #1
 80010a2:	d0cb      	beq.n	800103c <HAL_SPI_Transmit+0xb4>
 80010a4:	f7ff f8e8 	bl	8000278 <HAL_GetTick>
 80010a8:	9b00      	ldr	r3, [sp, #0]
 80010aa:	1ac0      	subs	r0, r0, r3
 80010ac:	4287      	cmp	r7, r0
 80010ae:	d8c5      	bhi.n	800103c <HAL_SPI_Transmit+0xb4>
 80010b0:	e7ec      	b.n	800108c <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	d002      	beq.n	80010bc <HAL_SPI_Transmit+0x134>
 80010b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80010b8:	2a01      	cmp	r2, #1
 80010ba:	d109      	bne.n	80010d0 <HAL_SPI_Transmit+0x148>
      if (hspi->TxXferCount > 1U)
 80010bc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80010be:	2a01      	cmp	r2, #1
 80010c0:	d919      	bls.n	80010f6 <HAL_SPI_Transmit+0x16e>
        hspi->Instance->DR = *((uint16_t *)pData);
 80010c2:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 80010c4:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 80010c6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80010c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ca:	3b02      	subs	r3, #2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80010d0:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 80010d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0b4      	beq.n	8001042 <HAL_SPI_Transmit+0xba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	4232      	tst	r2, r6
 80010de:	d01a      	beq.n	8001116 <HAL_SPI_Transmit+0x18e>
        if (hspi->TxXferCount > 1U)
 80010e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80010e2:	2a01      	cmp	r2, #1
 80010e4:	d90f      	bls.n	8001106 <HAL_SPI_Transmit+0x17e>
          hspi->Instance->DR = *((uint16_t *)pData);
 80010e6:	882a      	ldrh	r2, [r5, #0]
          pData += sizeof(uint16_t);
 80010e8:	3502      	adds	r5, #2
          hspi->Instance->DR = *((uint16_t *)pData);
 80010ea:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80010ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ee:	3b02      	subs	r3, #2
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80010f4:	e7ed      	b.n	80010d2 <HAL_SPI_Transmit+0x14a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80010f6:	782a      	ldrb	r2, [r5, #0]
 80010f8:	3501      	adds	r5, #1
 80010fa:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80010fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010fe:	3b01      	subs	r3, #1
 8001100:	b29b      	uxth	r3, r3
 8001102:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001104:	e7e4      	b.n	80010d0 <HAL_SPI_Transmit+0x148>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001106:	782a      	ldrb	r2, [r5, #0]
 8001108:	3501      	adds	r5, #1
 800110a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800110c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800110e:	3b01      	subs	r3, #1
 8001110:	b29b      	uxth	r3, r3
 8001112:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001114:	e7dd      	b.n	80010d2 <HAL_SPI_Transmit+0x14a>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001116:	2f00      	cmp	r7, #0
 8001118:	d0b8      	beq.n	800108c <HAL_SPI_Transmit+0x104>
 800111a:	1c7b      	adds	r3, r7, #1
 800111c:	d0d9      	beq.n	80010d2 <HAL_SPI_Transmit+0x14a>
 800111e:	f7ff f8ab 	bl	8000278 <HAL_GetTick>
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	1ac0      	subs	r0, r0, r3
 8001126:	4287      	cmp	r7, r0
 8001128:	d8d3      	bhi.n	80010d2 <HAL_SPI_Transmit+0x14a>
 800112a:	e7af      	b.n	800108c <HAL_SPI_Transmit+0x104>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800112c:	2320      	movs	r3, #32
 800112e:	6623      	str	r3, [r4, #96]	; 0x60
 8001130:	e78f      	b.n	8001052 <HAL_SPI_Transmit+0xca>

08001132 <HAL_TIM_Base_MspInit>:
 8001132:	4770      	bx	lr

08001134 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001134:	2201      	movs	r2, #1
 8001136:	6803      	ldr	r3, [r0, #0]
 8001138:	68d9      	ldr	r1, [r3, #12]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 800113a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800113c:	4311      	orrs	r1, r2
 800113e:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
}
 8001146:	4770      	bx	lr

08001148 <HAL_TIM_OC_DelayElapsedCallback>:
 8001148:	4770      	bx	lr

0800114a <HAL_TIM_IC_CaptureCallback>:
 800114a:	4770      	bx	lr

0800114c <HAL_TIM_PWM_PulseFinishedCallback>:
 800114c:	4770      	bx	lr

0800114e <HAL_TIM_TriggerCallback>:
 800114e:	4770      	bx	lr

08001150 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001150:	2202      	movs	r2, #2
 8001152:	6803      	ldr	r3, [r0, #0]
{
 8001154:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001156:	6919      	ldr	r1, [r3, #16]
{
 8001158:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800115a:	4211      	tst	r1, r2
 800115c:	d00e      	beq.n	800117c <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800115e:	68d9      	ldr	r1, [r3, #12]
 8001160:	4211      	tst	r1, r2
 8001162:	d00b      	beq.n	800117c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001164:	3a05      	subs	r2, #5
 8001166:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001168:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800116a:	3204      	adds	r2, #4
 800116c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800116e:	079b      	lsls	r3, r3, #30
 8001170:	d100      	bne.n	8001174 <HAL_TIM_IRQHandler+0x24>
 8001172:	e079      	b.n	8001268 <HAL_TIM_IRQHandler+0x118>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001174:	f7ff ffe9 	bl	800114a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001178:	2300      	movs	r3, #0
 800117a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800117c:	2204      	movs	r2, #4
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	6919      	ldr	r1, [r3, #16]
 8001182:	4211      	tst	r1, r2
 8001184:	d010      	beq.n	80011a8 <HAL_TIM_IRQHandler+0x58>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001186:	68d9      	ldr	r1, [r3, #12]
 8001188:	4211      	tst	r1, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800118c:	3a09      	subs	r2, #9
 800118e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001190:	3207      	adds	r2, #7
 8001192:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	23c0      	movs	r3, #192	; 0xc0
 8001198:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800119a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800119c:	421a      	tst	r2, r3
 800119e:	d069      	beq.n	8001274 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80011a0:	f7ff ffd3 	bl	800114a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011a4:	2300      	movs	r3, #0
 80011a6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011a8:	2208      	movs	r2, #8
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	6919      	ldr	r1, [r3, #16]
 80011ae:	4211      	tst	r1, r2
 80011b0:	d00e      	beq.n	80011d0 <HAL_TIM_IRQHandler+0x80>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80011b2:	68d9      	ldr	r1, [r3, #12]
 80011b4:	4211      	tst	r1, r2
 80011b6:	d00b      	beq.n	80011d0 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011b8:	3a11      	subs	r2, #17
 80011ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011bc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011be:	320d      	adds	r2, #13
 80011c0:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80011c2:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011c4:	079b      	lsls	r3, r3, #30
 80011c6:	d05b      	beq.n	8001280 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80011c8:	f7ff ffbf 	bl	800114a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011cc:	2300      	movs	r3, #0
 80011ce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011d0:	2210      	movs	r2, #16
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	6919      	ldr	r1, [r3, #16]
 80011d6:	4211      	tst	r1, r2
 80011d8:	d010      	beq.n	80011fc <HAL_TIM_IRQHandler+0xac>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80011da:	68d9      	ldr	r1, [r3, #12]
 80011dc:	4211      	tst	r1, r2
 80011de:	d00d      	beq.n	80011fc <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011e0:	3a21      	subs	r2, #33	; 0x21
 80011e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011e4:	3219      	adds	r2, #25
 80011e6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011e8:	69da      	ldr	r2, [r3, #28]
 80011ea:	23c0      	movs	r3, #192	; 0xc0
 80011ec:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80011ee:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011f0:	421a      	tst	r2, r3
 80011f2:	d04b      	beq.n	800128c <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80011f4:	f7ff ffa9 	bl	800114a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011f8:	2300      	movs	r3, #0
 80011fa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011fc:	2201      	movs	r2, #1
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	6919      	ldr	r1, [r3, #16]
 8001202:	4211      	tst	r1, r2
 8001204:	d007      	beq.n	8001216 <HAL_TIM_IRQHandler+0xc6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001206:	68d9      	ldr	r1, [r3, #12]
 8001208:	4211      	tst	r1, r2
 800120a:	d004      	beq.n	8001216 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800120c:	3a03      	subs	r2, #3
 800120e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001210:	0020      	movs	r0, r4
 8001212:	f001 fa97 	bl	8002744 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	6919      	ldr	r1, [r3, #16]
 800121c:	4211      	tst	r1, r2
 800121e:	d008      	beq.n	8001232 <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001220:	68d9      	ldr	r1, [r3, #12]
 8001222:	4211      	tst	r1, r2
 8001224:	d005      	beq.n	8001232 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001226:	3a02      	subs	r2, #2
 8001228:	3aff      	subs	r2, #255	; 0xff
 800122a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800122c:	0020      	movs	r0, r4
 800122e:	f000 f897 	bl	8001360 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001232:	2240      	movs	r2, #64	; 0x40
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	6919      	ldr	r1, [r3, #16]
 8001238:	4211      	tst	r1, r2
 800123a:	d007      	beq.n	800124c <HAL_TIM_IRQHandler+0xfc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	4211      	tst	r1, r2
 8001240:	d004      	beq.n	800124c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001242:	3a81      	subs	r2, #129	; 0x81
 8001244:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001246:	0020      	movs	r0, r4
 8001248:	f7ff ff81 	bl	800114e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800124c:	2220      	movs	r2, #32
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	6919      	ldr	r1, [r3, #16]
 8001252:	4211      	tst	r1, r2
 8001254:	d007      	beq.n	8001266 <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001256:	68d9      	ldr	r1, [r3, #12]
 8001258:	4211      	tst	r1, r2
 800125a:	d004      	beq.n	8001266 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800125c:	3a41      	subs	r2, #65	; 0x41
 800125e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001260:	0020      	movs	r0, r4
 8001262:	f000 f87c 	bl	800135e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001266:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001268:	f7ff ff6e 	bl	8001148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800126c:	0020      	movs	r0, r4
 800126e:	f7ff ff6d 	bl	800114c <HAL_TIM_PWM_PulseFinishedCallback>
 8001272:	e781      	b.n	8001178 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001274:	f7ff ff68 	bl	8001148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001278:	0020      	movs	r0, r4
 800127a:	f7ff ff67 	bl	800114c <HAL_TIM_PWM_PulseFinishedCallback>
 800127e:	e791      	b.n	80011a4 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001280:	f7ff ff62 	bl	8001148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001284:	0020      	movs	r0, r4
 8001286:	f7ff ff61 	bl	800114c <HAL_TIM_PWM_PulseFinishedCallback>
 800128a:	e79f      	b.n	80011cc <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800128c:	f7ff ff5c 	bl	8001148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001290:	0020      	movs	r0, r4
 8001292:	f7ff ff5b 	bl	800114c <HAL_TIM_PWM_PulseFinishedCallback>
 8001296:	e7af      	b.n	80011f8 <HAL_TIM_IRQHandler+0xa8>

08001298 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001298:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <TIM_Base_SetConfig+0x78>)
{
 800129a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800129c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800129e:	4290      	cmp	r0, r2
 80012a0:	d006      	beq.n	80012b0 <TIM_Base_SetConfig+0x18>
 80012a2:	2480      	movs	r4, #128	; 0x80
 80012a4:	05e4      	lsls	r4, r4, #23
 80012a6:	42a0      	cmp	r0, r4
 80012a8:	d002      	beq.n	80012b0 <TIM_Base_SetConfig+0x18>
 80012aa:	4c1a      	ldr	r4, [pc, #104]	; (8001314 <TIM_Base_SetConfig+0x7c>)
 80012ac:	42a0      	cmp	r0, r4
 80012ae:	d10c      	bne.n	80012ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012b0:	2470      	movs	r4, #112	; 0x70
 80012b2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80012b4:	684c      	ldr	r4, [r1, #4]
 80012b6:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012b8:	4290      	cmp	r0, r2
 80012ba:	d00f      	beq.n	80012dc <TIM_Base_SetConfig+0x44>
 80012bc:	2480      	movs	r4, #128	; 0x80
 80012be:	05e4      	lsls	r4, r4, #23
 80012c0:	42a0      	cmp	r0, r4
 80012c2:	d00b      	beq.n	80012dc <TIM_Base_SetConfig+0x44>
 80012c4:	4c13      	ldr	r4, [pc, #76]	; (8001314 <TIM_Base_SetConfig+0x7c>)
 80012c6:	42a0      	cmp	r0, r4
 80012c8:	d008      	beq.n	80012dc <TIM_Base_SetConfig+0x44>
 80012ca:	4c13      	ldr	r4, [pc, #76]	; (8001318 <TIM_Base_SetConfig+0x80>)
 80012cc:	42a0      	cmp	r0, r4
 80012ce:	d005      	beq.n	80012dc <TIM_Base_SetConfig+0x44>
 80012d0:	4c12      	ldr	r4, [pc, #72]	; (800131c <TIM_Base_SetConfig+0x84>)
 80012d2:	42a0      	cmp	r0, r4
 80012d4:	d002      	beq.n	80012dc <TIM_Base_SetConfig+0x44>
 80012d6:	4c12      	ldr	r4, [pc, #72]	; (8001320 <TIM_Base_SetConfig+0x88>)
 80012d8:	42a0      	cmp	r0, r4
 80012da:	d103      	bne.n	80012e4 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80012dc:	4c11      	ldr	r4, [pc, #68]	; (8001324 <TIM_Base_SetConfig+0x8c>)
 80012de:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012e0:	68cc      	ldr	r4, [r1, #12]
 80012e2:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012e4:	2480      	movs	r4, #128	; 0x80
 80012e6:	43a3      	bics	r3, r4
 80012e8:	694c      	ldr	r4, [r1, #20]
 80012ea:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80012ec:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012ee:	688b      	ldr	r3, [r1, #8]
 80012f0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80012f2:	680b      	ldr	r3, [r1, #0]
 80012f4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012f6:	4290      	cmp	r0, r2
 80012f8:	d005      	beq.n	8001306 <TIM_Base_SetConfig+0x6e>
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <TIM_Base_SetConfig+0x84>)
 80012fc:	4298      	cmp	r0, r3
 80012fe:	d002      	beq.n	8001306 <TIM_Base_SetConfig+0x6e>
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <TIM_Base_SetConfig+0x88>)
 8001302:	4298      	cmp	r0, r3
 8001304:	d101      	bne.n	800130a <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001306:	690b      	ldr	r3, [r1, #16]
 8001308:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800130a:	2301      	movs	r3, #1
 800130c:	6143      	str	r3, [r0, #20]
}
 800130e:	bd10      	pop	{r4, pc}
 8001310:	40012c00 	.word	0x40012c00
 8001314:	40000400 	.word	0x40000400
 8001318:	40002000 	.word	0x40002000
 800131c:	40014400 	.word	0x40014400
 8001320:	40014800 	.word	0x40014800
 8001324:	fffffcff 	.word	0xfffffcff

08001328 <HAL_TIM_Base_Init>:
{
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800132c:	2001      	movs	r0, #1
  if(htim == NULL)
 800132e:	2c00      	cmp	r4, #0
 8001330:	d014      	beq.n	800135c <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001332:	0025      	movs	r5, r4
 8001334:	353d      	adds	r5, #61	; 0x3d
 8001336:	782b      	ldrb	r3, [r5, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800133e:	0022      	movs	r2, r4
 8001340:	323c      	adds	r2, #60	; 0x3c
 8001342:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001344:	0020      	movs	r0, r4
 8001346:	f7ff fef4 	bl	8001132 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800134a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800134c:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800134e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001350:	1d21      	adds	r1, r4, #4
 8001352:	f7ff ffa1 	bl	8001298 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001356:	2301      	movs	r3, #1
  return HAL_OK;
 8001358:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800135a:	702b      	strb	r3, [r5, #0]
}
 800135c:	bd70      	pop	{r4, r5, r6, pc}

0800135e <HAL_TIMEx_CommutationCallback>:
 800135e:	4770      	bx	lr

08001360 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001360:	4770      	bx	lr

08001362 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001362:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8001364:	f000 fdf2 	bl	8001f4c <vTaskStartScheduler>
  
  return osOK;
}
 8001368:	2000      	movs	r0, #0
 800136a:	bd10      	pop	{r4, pc}

0800136c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800136c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800136e:	000b      	movs	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001370:	6846      	ldr	r6, [r0, #4]
 8001372:	6801      	ldr	r1, [r0, #0]
 8001374:	8a02      	ldrh	r2, [r0, #16]
 8001376:	2508      	movs	r5, #8
 8001378:	5f45      	ldrsh	r5, [r0, r5]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800137a:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 800137c:	2d84      	cmp	r5, #132	; 0x84
 800137e:	d000      	beq.n	8001382 <osThreadCreate+0x16>
    fpriority += (priority - osPriorityIdle);
 8001380:	1cec      	adds	r4, r5, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001382:	a803      	add	r0, sp, #12
 8001384:	9001      	str	r0, [sp, #4]
 8001386:	9400      	str	r4, [sp, #0]
 8001388:	0030      	movs	r0, r6
 800138a:	f000 fd1b 	bl	8001dc4 <xTaskCreate>
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800138e:	2300      	movs	r3, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001390:	2801      	cmp	r0, #1
 8001392:	d100      	bne.n	8001396 <osThreadCreate+0x2a>
  }     
#endif
  
  return handle;
 8001394:	9b03      	ldr	r3, [sp, #12]
}
 8001396:	0018      	movs	r0, r3
 8001398:	b004      	add	sp, #16
 800139a:	bd70      	pop	{r4, r5, r6, pc}

0800139c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800139c:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800139e:	2800      	cmp	r0, #0
 80013a0:	d100      	bne.n	80013a4 <osDelay+0x8>
 80013a2:	3001      	adds	r0, #1
 80013a4:	f000 feea 	bl	800217c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013a8:	2000      	movs	r0, #0
 80013aa:	bd10      	pop	{r4, pc}

080013ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80013ac:	b510      	push	{r4, lr}
 80013ae:	0008      	movs	r0, r1
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80013b0:	2400      	movs	r4, #0
  if (count == 1) {
 80013b2:	2901      	cmp	r1, #1
 80013b4:	d10a      	bne.n	80013cc <osSemaphoreCreate+0x20>
    vSemaphoreCreateBinary(sema);
 80013b6:	0021      	movs	r1, r4
 80013b8:	2203      	movs	r2, #3
 80013ba:	f000 fae8 	bl	800198e <xQueueGenericCreate>
 80013be:	1e04      	subs	r4, r0, #0
 80013c0:	d004      	beq.n	80013cc <osSemaphoreCreate+0x20>
 80013c2:	2300      	movs	r3, #0
 80013c4:	001a      	movs	r2, r3
 80013c6:	0019      	movs	r1, r3
 80013c8:	f000 fafe 	bl	80019c8 <xQueueGenericSend>
#endif
  }
#endif
}
 80013cc:	0020      	movs	r0, r4
 80013ce:	bd10      	pop	{r4, pc}

080013d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80013d0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80013d2:	2400      	movs	r4, #0
{
 80013d4:	000a      	movs	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80013d6:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
    return osErrorParameter;
 80013d8:	2380      	movs	r3, #128	; 0x80
  if (semaphore_id == NULL) {
 80013da:	42a0      	cmp	r0, r4
 80013dc:	d00a      	beq.n	80013f4 <osSemaphoreWait+0x24>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013de:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80013e2:	42a1      	cmp	r1, r4
 80013e4:	d011      	beq.n	800140a <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80013e6:	aa01      	add	r2, sp, #4
 80013e8:	0021      	movs	r1, r4
 80013ea:	f000 fc5f 	bl	8001cac <xQueueReceiveFromISR>
 80013ee:	2801      	cmp	r0, #1
 80013f0:	d002      	beq.n	80013f8 <osSemaphoreWait+0x28>
      return osErrorOS;
 80013f2:	23ff      	movs	r3, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	bd16      	pop	{r1, r2, r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80013f8:	9b01      	ldr	r3, [sp, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <osSemaphoreWait+0x36>
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <osSemaphoreWait+0x48>)
 8001402:	0552      	lsls	r2, r2, #21
 8001404:	601a      	str	r2, [r3, #0]
  return osOK;
 8001406:	2300      	movs	r3, #0
 8001408:	e7f4      	b.n	80013f4 <osSemaphoreWait+0x24>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800140a:	000b      	movs	r3, r1
 800140c:	f000 fba8 	bl	8001b60 <xQueueGenericReceive>
 8001410:	2801      	cmp	r0, #1
 8001412:	d1ee      	bne.n	80013f2 <osSemaphoreWait+0x22>
 8001414:	e7f7      	b.n	8001406 <osSemaphoreWait+0x36>
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	e000ed04 	.word	0xe000ed04

0800141c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800141c:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800141e:	2400      	movs	r4, #0
 8001420:	9401      	str	r4, [sp, #4]
 8001422:	f3ef 8105 	mrs	r1, IPSR
  
  
  if (inHandlerMode()) {
 8001426:	42a1      	cmp	r1, r4
 8001428:	d00e      	beq.n	8001448 <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800142a:	a901      	add	r1, sp, #4
 800142c:	f000 fb5b 	bl	8001ae6 <xQueueGiveFromISR>
 8001430:	2801      	cmp	r0, #1
 8001432:	d10f      	bne.n	8001454 <osSemaphoreRelease+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001434:	9b01      	ldr	r3, [sp, #4]
 8001436:	42a3      	cmp	r3, r4
 8001438:	d101      	bne.n	800143e <osSemaphoreRelease+0x22>
  osStatus result = osOK;
 800143a:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800143c:	bd16      	pop	{r1, r2, r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <osSemaphoreRelease+0x3c>)
 8001442:	0552      	lsls	r2, r2, #21
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	e7f8      	b.n	800143a <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001448:	000b      	movs	r3, r1
 800144a:	000a      	movs	r2, r1
 800144c:	f000 fabc 	bl	80019c8 <xQueueGenericSend>
 8001450:	2801      	cmp	r0, #1
 8001452:	d0f2      	beq.n	800143a <osSemaphoreRelease+0x1e>
      result = osErrorOS;
 8001454:	20ff      	movs	r0, #255	; 0xff
 8001456:	e7f1      	b.n	800143c <osSemaphoreRelease+0x20>
 8001458:	e000ed04 	.word	0xe000ed04

0800145c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800145c:	b510      	push	{r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800145e:	6841      	ldr	r1, [r0, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	6800      	ldr	r0, [r0, #0]
 8001464:	f000 fa93 	bl	800198e <xQueueGenericCreate>
#endif
}
 8001468:	bd10      	pop	{r4, pc}

0800146a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800146a:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800146c:	f000 ff9e 	bl	80023ac <xTaskGetSchedulerState>
 8001470:	2801      	cmp	r0, #1
 8001472:	d001      	beq.n	8001478 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001474:	f000 f8ce 	bl	8001614 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001478:	bd10      	pop	{r4, pc}

0800147a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800147a:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800147c:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800147e:	3308      	adds	r3, #8
 8001480:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001482:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001484:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001486:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001488:	4252      	negs	r2, r2
 800148a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800148c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800148e:	4770      	bx	lr

08001490 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001490:	2300      	movs	r3, #0
 8001492:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001494:	4770      	bx	lr

08001496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001496:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001498:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800149a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800149c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80014a2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80014a4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014a6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014a8:	3301      	adds	r3, #1
 80014aa:	6003      	str	r3, [r0, #0]
}
 80014ac:	4770      	bx	lr

080014ae <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014ae:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014b0:	680a      	ldr	r2, [r1, #0]
{
 80014b2:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b4:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 80014b6:	1c54      	adds	r4, r2, #1
 80014b8:	d10b      	bne.n	80014d2 <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
 80014ba:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014c0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80014c2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80014c4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80014c6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014c8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014ca:	3301      	adds	r3, #1
 80014cc:	6003      	str	r3, [r0, #0]
}
 80014ce:	bd30      	pop	{r4, r5, pc}
 80014d0:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014d2:	685c      	ldr	r4, [r3, #4]
 80014d4:	6825      	ldr	r5, [r4, #0]
 80014d6:	42aa      	cmp	r2, r5
 80014d8:	d2fa      	bcs.n	80014d0 <vListInsert+0x22>
 80014da:	e7ef      	b.n	80014bc <vListInsert+0xe>

080014dc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014dc:	6841      	ldr	r1, [r0, #4]
 80014de:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80014e0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014e2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80014e4:	6882      	ldr	r2, [r0, #8]
 80014e6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	4288      	cmp	r0, r1
 80014ec:	d100      	bne.n	80014f0 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80014f0:	2200      	movs	r2, #0
 80014f2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	1e50      	subs	r0, r2, #1
 80014f8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80014fa:	4770      	bx	lr

080014fc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <prvTaskExitError+0x10>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	d001      	beq.n	8001508 <prvTaskExitError+0xc>
 8001504:	b672      	cpsid	i
 8001506:	e7fe      	b.n	8001506 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8001508:	b672      	cpsid	i
 800150a:	e7fe      	b.n	800150a <prvTaskExitError+0xe>
 800150c:	20000000 	.word	0x20000000

08001510 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <pxCurrentTCBConst2>)
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	3020      	adds	r0, #32
 8001518:	f380 8809 	msr	PSP, r0
 800151c:	2002      	movs	r0, #2
 800151e:	f380 8814 	msr	CONTROL, r0
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8001528:	46ae      	mov	lr, r5
 800152a:	bc08      	pop	{r3}
 800152c:	bc04      	pop	{r2}
 800152e:	b662      	cpsie	i
 8001530:	4718      	bx	r3
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46c0      	nop			; (mov r8, r8)

08001540 <pxCurrentTCBConst2>:
 8001540:	20000ca4 	.word	0x20000ca4

08001544 <pxPortInitialiseStack>:
{
 8001544:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001546:	2480      	movs	r4, #128	; 0x80
 8001548:	1f03      	subs	r3, r0, #4
 800154a:	0464      	lsls	r4, r4, #17
 800154c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800154e:	3b04      	subs	r3, #4
 8001550:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001552:	4903      	ldr	r1, [pc, #12]	; (8001560 <pxPortInitialiseStack+0x1c>)
 8001554:	3b04      	subs	r3, #4
 8001556:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001558:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800155a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800155c:	601a      	str	r2, [r3, #0]
}
 800155e:	bd10      	pop	{r4, pc}
 8001560:	080014fd 	.word	0x080014fd

08001564 <SVC_Handler>:
}
 8001564:	4770      	bx	lr
	...

08001568 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <vPortYield+0x14>)
 800156c:	0552      	lsls	r2, r2, #21
 800156e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8001570:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001574:	f3bf 8f6f 	isb	sy
}
 8001578:	4770      	bx	lr
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	e000ed04 	.word	0xe000ed04

08001580 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 8001580:	b672      	cpsid	i
    uxCriticalNesting++;
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <vPortEnterCritical+0x14>)
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800158a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800158e:	f3bf 8f6f 	isb	sy
}
 8001592:	4770      	bx	lr
 8001594:	20000000 	.word	0x20000000

08001598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <vPortExitCritical+0x18>)
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <vPortExitCritical+0xc>
 80015a0:	b672      	cpsid	i
 80015a2:	e7fe      	b.n	80015a2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80015a4:	3b01      	subs	r3, #1
 80015a6:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d100      	bne.n	80015ae <vPortExitCritical+0x16>
    {
        portENABLE_INTERRUPTS();
 80015ac:	b662      	cpsie	i
    }
}
 80015ae:	4770      	bx	lr
 80015b0:	20000000 	.word	0x20000000

080015b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80015b4:	f3ef 8010 	mrs	r0, PRIMASK
 80015b8:	b672      	cpsid	i
 80015ba:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
 80015bc:	2000      	movs	r0, #0

080015be <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 80015be:	f380 8810 	msr	PRIMASK, r0
 80015c2:	4770      	bx	lr
	...

080015d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80015d0:	f3ef 8009 	mrs	r0, PSP
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <pxCurrentTCBConst>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	3820      	subs	r0, #32
 80015da:	6010      	str	r0, [r2, #0]
 80015dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80015de:	4644      	mov	r4, r8
 80015e0:	464d      	mov	r5, r9
 80015e2:	4656      	mov	r6, sl
 80015e4:	465f      	mov	r7, fp
 80015e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80015e8:	b508      	push	{r3, lr}
 80015ea:	b672      	cpsid	i
 80015ec:	f000 fe14 	bl	8002218 <vTaskSwitchContext>
 80015f0:	b662      	cpsie	i
 80015f2:	bc0c      	pop	{r2, r3}
 80015f4:	6811      	ldr	r1, [r2, #0]
 80015f6:	6808      	ldr	r0, [r1, #0]
 80015f8:	3010      	adds	r0, #16
 80015fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80015fc:	46a0      	mov	r8, r4
 80015fe:	46a9      	mov	r9, r5
 8001600:	46b2      	mov	sl, r6
 8001602:	46bb      	mov	fp, r7
 8001604:	f380 8809 	msr	PSP, r0
 8001608:	3820      	subs	r0, #32
 800160a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800160c:	4718      	bx	r3
 800160e:	46c0      	nop			; (mov r8, r8)

08001610 <pxCurrentTCBConst>:
 8001610:	20000ca4 	.word	0x20000ca4

08001614 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001614:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001616:	f7ff ffcd 	bl	80015b4 <ulSetInterruptMaskFromISR>
 800161a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800161c:	f000 fcc8 	bl	8001fb0 <xTaskIncrementTick>
 8001620:	2800      	cmp	r0, #0
 8001622:	d003      	beq.n	800162c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	4b03      	ldr	r3, [pc, #12]	; (8001634 <xPortSysTickHandler+0x20>)
 8001628:	0552      	lsls	r2, r2, #21
 800162a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800162c:	0020      	movs	r0, r4
 800162e:	f7ff ffc6 	bl	80015be <vClearInterruptMaskFromISR>
}
 8001632:	bd10      	pop	{r4, pc}
 8001634:	e000ed04 	.word	0xe000ed04

08001638 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001638:	21fa      	movs	r1, #250	; 0xfa
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <vPortSetupTimerInterrupt+0x1c>)
{
 800163c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	0089      	lsls	r1, r1, #2
 8001642:	f7fe fd75 	bl	8000130 <__udivsi3>
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8001646:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <vPortSetupTimerInterrupt+0x20>)
 800164a:	3801      	subs	r0, #1
 800164c:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800164e:	4b03      	ldr	r3, [pc, #12]	; (800165c <vPortSetupTimerInterrupt+0x24>)
 8001650:	601a      	str	r2, [r3, #0]
}
 8001652:	bd10      	pop	{r4, pc}
 8001654:	20000004 	.word	0x20000004
 8001658:	e000e014 	.word	0xe000e014
 800165c:	e000e010 	.word	0xe000e010

08001660 <xPortStartScheduler>:
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001660:	22ff      	movs	r2, #255	; 0xff
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <xPortStartScheduler+0x2c>)
 8001664:	0412      	lsls	r2, r2, #16
 8001666:	6819      	ldr	r1, [r3, #0]
{
 8001668:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800166e:	22ff      	movs	r2, #255	; 0xff
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	0612      	lsls	r2, r2, #24
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001678:	f7ff ffde 	bl	8001638 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800167c:	2200      	movs	r2, #0
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <xPortStartScheduler+0x30>)
 8001680:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8001682:	f7ff ff45 	bl	8001510 <vPortStartFirstTask>
	prvTaskExitError();
 8001686:	f7ff ff39 	bl	80014fc <prvTaskExitError>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	e000ed20 	.word	0xe000ed20
 8001690:	20000000 	.word	0x20000000

08001694 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001694:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <prvInsertBlockIntoFreeList+0x40>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4282      	cmp	r2, r0
 800169c:	d318      	bcc.n	80016d0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800169e:	685c      	ldr	r4, [r3, #4]
 80016a0:	1919      	adds	r1, r3, r4
 80016a2:	4288      	cmp	r0, r1
 80016a4:	d103      	bne.n	80016ae <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80016a6:	6841      	ldr	r1, [r0, #4]
 80016a8:	0018      	movs	r0, r3
 80016aa:	1909      	adds	r1, r1, r4
 80016ac:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80016ae:	6841      	ldr	r1, [r0, #4]
 80016b0:	1844      	adds	r4, r0, r1
 80016b2:	42a2      	cmp	r2, r4
 80016b4:	d107      	bne.n	80016c6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80016b6:	4c08      	ldr	r4, [pc, #32]	; (80016d8 <prvInsertBlockIntoFreeList+0x44>)
 80016b8:	6824      	ldr	r4, [r4, #0]
 80016ba:	42a2      	cmp	r2, r4
 80016bc:	d003      	beq.n	80016c6 <prvInsertBlockIntoFreeList+0x32>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016be:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80016c0:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016c2:	1861      	adds	r1, r4, r1
 80016c4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80016c6:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80016c8:	4298      	cmp	r0, r3
 80016ca:	d000      	beq.n	80016ce <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80016cc:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016ce:	bd10      	pop	{r4, pc}
 80016d0:	0013      	movs	r3, r2
 80016d2:	e7e1      	b.n	8001698 <prvInsertBlockIntoFreeList+0x4>
 80016d4:	20000c9c 	.word	0x20000c9c
 80016d8:	2000008c 	.word	0x2000008c

080016dc <pvPortMalloc>:
{
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	0004      	movs	r4, r0
	vTaskSuspendAll();
 80016e0:	f000 fc5e 	bl	8001fa0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80016e4:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <pvPortMalloc+0xec>)
 80016e6:	4839      	ldr	r0, [pc, #228]	; (80017cc <pvPortMalloc+0xf0>)
 80016e8:	6813      	ldr	r3, [r2, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d11e      	bne.n	800172c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 80016ee:	4938      	ldr	r1, [pc, #224]	; (80017d0 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016f0:	3307      	adds	r3, #7
 80016f2:	4219      	tst	r1, r3
 80016f4:	d036      	beq.n	8001764 <pvPortMalloc+0x88>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80016f6:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016f8:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	18c9      	adds	r1, r1, r3
 8001700:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001702:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 8001704:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001706:	4e33      	ldr	r6, [pc, #204]	; (80017d4 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001708:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 800170a:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800170c:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800170e:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 8001710:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001712:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 8001714:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 8001716:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001718:	1a5d      	subs	r5, r3, r1
	pxEnd = ( void * ) uxAddress;
 800171a:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800171c:	c128      	stmia	r1!, {r3, r5}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <pvPortMalloc+0xfc>)
 8001720:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <pvPortMalloc+0x100>)
 8001724:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800172c:	6806      	ldr	r6, [r0, #0]
 800172e:	4234      	tst	r4, r6
 8001730:	d116      	bne.n	8001760 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 8001732:	2c00      	cmp	r4, #0
 8001734:	d014      	beq.n	8001760 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 8001736:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001738:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 800173a:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800173c:	420b      	tst	r3, r1
 800173e:	d001      	beq.n	8001744 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001740:	438b      	bics	r3, r1
 8001742:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <pvPortMalloc+0x84>
 8001748:	4924      	ldr	r1, [pc, #144]	; (80017dc <pvPortMalloc+0x100>)
 800174a:	680d      	ldr	r5, [r1, #0]
 800174c:	42ab      	cmp	r3, r5
 800174e:	d807      	bhi.n	8001760 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 8001750:	4920      	ldr	r1, [pc, #128]	; (80017d4 <pvPortMalloc+0xf8>)
 8001752:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001754:	6860      	ldr	r0, [r4, #4]
 8001756:	4283      	cmp	r3, r0
 8001758:	d807      	bhi.n	800176a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	4294      	cmp	r4, r2
 800175e:	d10b      	bne.n	8001778 <pvPortMalloc+0x9c>
void *pvReturn = NULL;
 8001760:	2500      	movs	r5, #0
 8001762:	e028      	b.n	80017b6 <pvPortMalloc+0xda>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001764:	23c0      	movs	r3, #192	; 0xc0
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	e7cc      	b.n	8001704 <pvPortMalloc+0x28>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800176a:	6827      	ldr	r7, [r4, #0]
 800176c:	46bc      	mov	ip, r7
 800176e:	2f00      	cmp	r7, #0
 8001770:	d0f3      	beq.n	800175a <pvPortMalloc+0x7e>
 8001772:	0021      	movs	r1, r4
 8001774:	4664      	mov	r4, ip
 8001776:	e7ed      	b.n	8001754 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001778:	680a      	ldr	r2, [r1, #0]
 800177a:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800177c:	6822      	ldr	r2, [r4, #0]
 800177e:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001780:	1ac2      	subs	r2, r0, r3
 8001782:	2a10      	cmp	r2, #16
 8001784:	d908      	bls.n	8001798 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001786:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001788:	0741      	lsls	r1, r0, #29
 800178a:	d001      	beq.n	8001790 <pvPortMalloc+0xb4>
 800178c:	b672      	cpsid	i
 800178e:	e7fe      	b.n	800178e <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001790:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001792:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001794:	f7ff ff7e 	bl	8001694 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001798:	6863      	ldr	r3, [r4, #4]
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <pvPortMalloc+0x100>)
 800179c:	1aed      	subs	r5, r5, r3
 800179e:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <pvPortMalloc+0xfc>)
 80017a2:	6811      	ldr	r1, [r2, #0]
 80017a4:	428d      	cmp	r5, r1
 80017a6:	d200      	bcs.n	80017aa <pvPortMalloc+0xce>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80017a8:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017aa:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017ac:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 80017ae:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017b0:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017b2:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80017b4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80017b6:	f000 fc79 	bl	80020ac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ba:	076b      	lsls	r3, r5, #29
 80017bc:	d001      	beq.n	80017c2 <pvPortMalloc+0xe6>
 80017be:	b672      	cpsid	i
 80017c0:	e7fe      	b.n	80017c0 <pvPortMalloc+0xe4>
}
 80017c2:	0028      	movs	r0, r5
 80017c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	2000008c 	.word	0x2000008c
 80017cc:	20000c90 	.word	0x20000c90
 80017d0:	20000090 	.word	0x20000090
 80017d4:	20000c9c 	.word	0x20000c9c
 80017d8:	20000c98 	.word	0x20000c98
 80017dc:	20000c94 	.word	0x20000c94

080017e0 <vPortFree>:
{
 80017e0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d01b      	beq.n	800181e <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <vPortFree+0x40>)
 80017e8:	3808      	subs	r0, #8
 80017ea:	6843      	ldr	r3, [r0, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	0004      	movs	r4, r0
 80017f0:	421a      	tst	r2, r3
 80017f2:	d101      	bne.n	80017f8 <vPortFree+0x18>
 80017f4:	b672      	cpsid	i
 80017f6:	e7fe      	b.n	80017f6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017f8:	6801      	ldr	r1, [r0, #0]
 80017fa:	2900      	cmp	r1, #0
 80017fc:	d001      	beq.n	8001802 <vPortFree+0x22>
 80017fe:	b672      	cpsid	i
 8001800:	e7fe      	b.n	8001800 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001802:	4393      	bics	r3, r2
 8001804:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8001806:	f000 fbcb 	bl	8001fa0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800180a:	4a06      	ldr	r2, [pc, #24]	; (8001824 <vPortFree+0x44>)
 800180c:	6863      	ldr	r3, [r4, #4]
 800180e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001810:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001812:	185b      	adds	r3, r3, r1
 8001814:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001816:	f7ff ff3d 	bl	8001694 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800181a:	f000 fc47 	bl	80020ac <xTaskResumeAll>
}
 800181e:	bd10      	pop	{r4, pc}
 8001820:	20000c90 	.word	0x20000c90
 8001824:	20000c94 	.word	0x20000c94

08001828 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	0016      	movs	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800182c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800182e:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001830:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001832:	2a00      	cmp	r2, #0
 8001834:	d10a      	bne.n	800184c <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001836:	6806      	ldr	r6, [r0, #0]
BaseType_t xReturn = pdFALSE;
 8001838:	0010      	movs	r0, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800183a:	2e00      	cmp	r6, #0
 800183c:	d103      	bne.n	8001846 <prvCopyDataToQueue+0x1e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800183e:	6860      	ldr	r0, [r4, #4]
 8001840:	f000 fdfa 	bl	8002438 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001844:	6066      	str	r6, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001846:	3501      	adds	r5, #1
 8001848:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800184a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800184c:	2e00      	cmp	r6, #0
 800184e:	d10d      	bne.n	800186c <prvCopyDataToQueue+0x44>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001850:	6880      	ldr	r0, [r0, #8]
 8001852:	f001 fea5 	bl	80035a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001856:	68a3      	ldr	r3, [r4, #8]
 8001858:	6c22      	ldr	r2, [r4, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
 800185a:	0030      	movs	r0, r6
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800185c:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800185e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001860:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001862:	4293      	cmp	r3, r2
 8001864:	d3ef      	bcc.n	8001846 <prvCopyDataToQueue+0x1e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	60a3      	str	r3, [r4, #8]
 800186a:	e7ec      	b.n	8001846 <prvCopyDataToQueue+0x1e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800186c:	68c0      	ldr	r0, [r0, #12]
 800186e:	f001 fe97 	bl	80035a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001874:	68e2      	ldr	r2, [r4, #12]
 8001876:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001878:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800187a:	18d2      	adds	r2, r2, r3
 800187c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800187e:	428a      	cmp	r2, r1
 8001880:	d202      	bcs.n	8001888 <prvCopyDataToQueue+0x60>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001882:	6862      	ldr	r2, [r4, #4]
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
 8001888:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800188a:	2e02      	cmp	r6, #2
 800188c:	d1db      	bne.n	8001846 <prvCopyDataToQueue+0x1e>
				--uxMessagesWaiting;
 800188e:	002b      	movs	r3, r5
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	4193      	sbcs	r3, r2
 8001894:	1aed      	subs	r5, r5, r3
 8001896:	e7d6      	b.n	8001846 <prvCopyDataToQueue+0x1e>

08001898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001898:	0003      	movs	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800189a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800189c:	b510      	push	{r4, lr}
 800189e:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	d00a      	beq.n	80018ba <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018a4:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018a6:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018a8:	1889      	adds	r1, r1, r2
 80018aa:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018ac:	42a1      	cmp	r1, r4
 80018ae:	d301      	bcc.n	80018b4 <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80018b4:	68d9      	ldr	r1, [r3, #12]
 80018b6:	f001 fe73 	bl	80035a0 <memcpy>
	}
}
 80018ba:	bd10      	pop	{r4, pc}

080018bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	0005      	movs	r5, r0
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80018c0:	002e      	movs	r6, r5
 80018c2:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
 80018c4:	f7ff fe5c 	bl	8001580 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80018c8:	7834      	ldrb	r4, [r6, #0]
 80018ca:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	dc10      	bgt.n	80018f2 <prvUnlockQueue+0x36>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80018d0:	23ff      	movs	r3, #255	; 0xff
 80018d2:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80018d4:	002e      	movs	r6, r5
 80018d6:	3644      	adds	r6, #68	; 0x44
	taskEXIT_CRITICAL();
 80018d8:	f7ff fe5e 	bl	8001598 <vPortExitCritical>
	taskENTER_CRITICAL();
 80018dc:	f7ff fe50 	bl	8001580 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80018e0:	7834      	ldrb	r4, [r6, #0]
 80018e2:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80018e4:	2c00      	cmp	r4, #0
 80018e6:	dc11      	bgt.n	800190c <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80018e8:	23ff      	movs	r3, #255	; 0xff
 80018ea:	7033      	strb	r3, [r6, #0]
	}
	taskEXIT_CRITICAL();
 80018ec:	f7ff fe54 	bl	8001598 <vPortExitCritical>
}
 80018f0:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0eb      	beq.n	80018d0 <prvUnlockQueue+0x14>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018f8:	0028      	movs	r0, r5
 80018fa:	3024      	adds	r0, #36	; 0x24
 80018fc:	f000 fcd4 	bl	80022a8 <xTaskRemoveFromEventList>
 8001900:	2800      	cmp	r0, #0
 8001902:	d001      	beq.n	8001908 <prvUnlockQueue+0x4c>
						vTaskMissedYield();
 8001904:	f000 fd4c 	bl	80023a0 <vTaskMissedYield>
 8001908:	3c01      	subs	r4, #1
 800190a:	e7de      	b.n	80018ca <prvUnlockQueue+0xe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800190c:	692b      	ldr	r3, [r5, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0ea      	beq.n	80018e8 <prvUnlockQueue+0x2c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001912:	0028      	movs	r0, r5
 8001914:	3010      	adds	r0, #16
 8001916:	f000 fcc7 	bl	80022a8 <xTaskRemoveFromEventList>
 800191a:	2800      	cmp	r0, #0
 800191c:	d001      	beq.n	8001922 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800191e:	f000 fd3f 	bl	80023a0 <vTaskMissedYield>
 8001922:	3c01      	subs	r4, #1
 8001924:	e7dd      	b.n	80018e2 <prvUnlockQueue+0x26>

08001926 <xQueueGenericReset>:
{
 8001926:	b570      	push	{r4, r5, r6, lr}
 8001928:	0004      	movs	r4, r0
 800192a:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800192c:	2800      	cmp	r0, #0
 800192e:	d101      	bne.n	8001934 <xQueueGenericReset+0xe>
 8001930:	b672      	cpsid	i
 8001932:	e7fe      	b.n	8001932 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 8001934:	f7ff fe24 	bl	8001580 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001938:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800193a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800193c:	6822      	ldr	r2, [r4, #0]
 800193e:	434b      	muls	r3, r1
 8001940:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001942:	1a5b      	subs	r3, r3, r1
 8001944:	18d3      	adds	r3, r2, r3
 8001946:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001948:	0023      	movs	r3, r4
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800194a:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800194c:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800194e:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001950:	22ff      	movs	r2, #255	; 0xff
 8001952:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001954:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001956:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 8001958:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
 800195a:	4285      	cmp	r5, r0
 800195c:	d10e      	bne.n	800197c <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800195e:	6923      	ldr	r3, [r4, #16]
 8001960:	4283      	cmp	r3, r0
 8001962:	d007      	beq.n	8001974 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001964:	0020      	movs	r0, r4
 8001966:	3010      	adds	r0, #16
 8001968:	f000 fc9e 	bl	80022a8 <xTaskRemoveFromEventList>
 800196c:	2800      	cmp	r0, #0
 800196e:	d001      	beq.n	8001974 <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
 8001970:	f7ff fdfa 	bl	8001568 <vPortYield>
	taskEXIT_CRITICAL();
 8001974:	f7ff fe10 	bl	8001598 <vPortExitCritical>
}
 8001978:	2001      	movs	r0, #1
 800197a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800197c:	0020      	movs	r0, r4
 800197e:	3010      	adds	r0, #16
 8001980:	f7ff fd7b 	bl	800147a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001984:	0020      	movs	r0, r4
 8001986:	3024      	adds	r0, #36	; 0x24
 8001988:	f7ff fd77 	bl	800147a <vListInitialise>
 800198c:	e7f2      	b.n	8001974 <xQueueGenericReset+0x4e>

0800198e <xQueueGenericCreate>:
	{
 800198e:	b570      	push	{r4, r5, r6, lr}
 8001990:	0006      	movs	r6, r0
 8001992:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001994:	2800      	cmp	r0, #0
 8001996:	d101      	bne.n	800199c <xQueueGenericCreate+0xe>
 8001998:	b672      	cpsid	i
 800199a:	e7fe      	b.n	800199a <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800199c:	0008      	movs	r0, r1
 800199e:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80019a0:	3048      	adds	r0, #72	; 0x48
 80019a2:	f7ff fe9b 	bl	80016dc <pvPortMalloc>
 80019a6:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 80019a8:	d008      	beq.n	80019bc <xQueueGenericCreate+0x2e>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80019aa:	2d00      	cmp	r5, #0
 80019ac:	d108      	bne.n	80019c0 <xQueueGenericCreate+0x32>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019ae:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80019b0:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80019b2:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80019b4:	2101      	movs	r1, #1
 80019b6:	0020      	movs	r0, r4
 80019b8:	f7ff ffb5 	bl	8001926 <xQueueGenericReset>
	}
 80019bc:	0020      	movs	r0, r4
 80019be:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80019c0:	0003      	movs	r3, r0
 80019c2:	3348      	adds	r3, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019c4:	6003      	str	r3, [r0, #0]
 80019c6:	e7f3      	b.n	80019b0 <xQueueGenericCreate+0x22>

080019c8 <xQueueGenericSend>:
{
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	0004      	movs	r4, r0
 80019ce:	9100      	str	r1, [sp, #0]
 80019d0:	9201      	str	r2, [sp, #4]
 80019d2:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d101      	bne.n	80019dc <xQueueGenericSend+0x14>
 80019d8:	b672      	cpsid	i
 80019da:	e7fe      	b.n	80019da <xQueueGenericSend+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d000      	beq.n	80019e4 <xQueueGenericSend+0x1c>
 80019e2:	e06f      	b.n	8001ac4 <xQueueGenericSend+0xfc>
 80019e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d100      	bne.n	80019ec <xQueueGenericSend+0x24>
 80019ea:	e06b      	b.n	8001ac4 <xQueueGenericSend+0xfc>
 80019ec:	b672      	cpsid	i
 80019ee:	e7fe      	b.n	80019ee <xQueueGenericSend+0x26>
				if( xTicksToWait == ( TickType_t ) 0 )
 80019f0:	9e01      	ldr	r6, [sp, #4]
 80019f2:	2e00      	cmp	r6, #0
 80019f4:	d103      	bne.n	80019fe <xQueueGenericSend+0x36>
					taskEXIT_CRITICAL();
 80019f6:	f7ff fdcf 	bl	8001598 <vPortExitCritical>
			return errQUEUE_FULL;
 80019fa:	2000      	movs	r0, #0
 80019fc:	e054      	b.n	8001aa8 <xQueueGenericSend+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	d102      	bne.n	8001a08 <xQueueGenericSend+0x40>
					vTaskSetTimeOutState( &xTimeOut );
 8001a02:	a802      	add	r0, sp, #8
 8001a04:	f000 fc8c 	bl	8002320 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001a08:	f7ff fdc6 	bl	8001598 <vPortExitCritical>
		vTaskSuspendAll();
 8001a0c:	f000 fac8 	bl	8001fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a10:	f7ff fdb6 	bl	8001580 <vPortEnterCritical>
 8001a14:	0022      	movs	r2, r4
 8001a16:	3244      	adds	r2, #68	; 0x44
 8001a18:	7813      	ldrb	r3, [r2, #0]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <xQueueGenericSend+0x5c>
 8001a20:	2300      	movs	r3, #0
 8001a22:	7013      	strb	r3, [r2, #0]
 8001a24:	0022      	movs	r2, r4
 8001a26:	3245      	adds	r2, #69	; 0x45
 8001a28:	7813      	ldrb	r3, [r2, #0]
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <xQueueGenericSend+0x6c>
 8001a30:	2300      	movs	r3, #0
 8001a32:	7013      	strb	r3, [r2, #0]
 8001a34:	f7ff fdb0 	bl	8001598 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a38:	a901      	add	r1, sp, #4
 8001a3a:	a802      	add	r0, sp, #8
 8001a3c:	f000 fc80 	bl	8002340 <xTaskCheckForTimeOut>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d139      	bne.n	8001ab8 <xQueueGenericSend+0xf0>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001a44:	f7ff fd9c 	bl	8001580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001a48:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8001a4a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001a4c:	f7ff fda4 	bl	8001598 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001a50:	42b7      	cmp	r7, r6
 8001a52:	d12b      	bne.n	8001aac <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a54:	0020      	movs	r0, r4
 8001a56:	9901      	ldr	r1, [sp, #4]
 8001a58:	3010      	adds	r0, #16
 8001a5a:	f000 fc13 	bl	8002284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001a5e:	0020      	movs	r0, r4
 8001a60:	f7ff ff2c 	bl	80018bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001a64:	f000 fb22 	bl	80020ac <xTaskResumeAll>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d101      	bne.n	8001a70 <xQueueGenericSend+0xa8>
					portYIELD_WITHIN_API();
 8001a6c:	f7ff fd7c 	bl	8001568 <vPortYield>
 8001a70:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8001a72:	f7ff fd85 	bl	8001580 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d301      	bcc.n	8001a82 <xQueueGenericSend+0xba>
 8001a7e:	2d02      	cmp	r5, #2
 8001a80:	d1b6      	bne.n	80019f0 <xQueueGenericSend+0x28>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a82:	002a      	movs	r2, r5
 8001a84:	9900      	ldr	r1, [sp, #0]
 8001a86:	0020      	movs	r0, r4
 8001a88:	f7ff fece 	bl	8001828 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <xQueueGenericSend+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a92:	0020      	movs	r0, r4
 8001a94:	3024      	adds	r0, #36	; 0x24
 8001a96:	f000 fc07 	bl	80022a8 <xTaskRemoveFromEventList>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d001      	beq.n	8001aa2 <xQueueGenericSend+0xda>
							queueYIELD_IF_USING_PREEMPTION();
 8001a9e:	f7ff fd63 	bl	8001568 <vPortYield>
				taskEXIT_CRITICAL();
 8001aa2:	f7ff fd79 	bl	8001598 <vPortExitCritical>
				return pdPASS;
 8001aa6:	2001      	movs	r0, #1
}
 8001aa8:	b005      	add	sp, #20
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8001aac:	0020      	movs	r0, r4
 8001aae:	f7ff ff05 	bl	80018bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ab2:	f000 fafb 	bl	80020ac <xTaskResumeAll>
 8001ab6:	e7db      	b.n	8001a70 <xQueueGenericSend+0xa8>
			prvUnlockQueue( pxQueue );
 8001ab8:	0020      	movs	r0, r4
 8001aba:	f7ff feff 	bl	80018bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001abe:	f000 faf5 	bl	80020ac <xTaskResumeAll>
 8001ac2:	e79a      	b.n	80019fa <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ac4:	2d02      	cmp	r5, #2
 8001ac6:	d102      	bne.n	8001ace <xQueueGenericSend+0x106>
 8001ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d109      	bne.n	8001ae2 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ace:	f000 fc6d 	bl	80023ac <xTaskGetSchedulerState>
 8001ad2:	2700      	movs	r7, #0
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d1cc      	bne.n	8001a72 <xQueueGenericSend+0xaa>
 8001ad8:	9f01      	ldr	r7, [sp, #4]
 8001ada:	2f00      	cmp	r7, #0
 8001adc:	d0c9      	beq.n	8001a72 <xQueueGenericSend+0xaa>
 8001ade:	b672      	cpsid	i
 8001ae0:	e7fe      	b.n	8001ae0 <xQueueGenericSend+0x118>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ae2:	b672      	cpsid	i
 8001ae4:	e7fe      	b.n	8001ae4 <xQueueGenericSend+0x11c>

08001ae6 <xQueueGiveFromISR>:
{
 8001ae6:	b570      	push	{r4, r5, r6, lr}
 8001ae8:	0004      	movs	r4, r0
 8001aea:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d101      	bne.n	8001af4 <xQueueGiveFromISR+0xe>
 8001af0:	b672      	cpsid	i
 8001af2:	e7fe      	b.n	8001af2 <xQueueGiveFromISR+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001af4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <xQueueGiveFromISR+0x18>
 8001afa:	b672      	cpsid	i
 8001afc:	e7fe      	b.n	8001afc <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8001afe:	6803      	ldr	r3, [r0, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <xQueueGiveFromISR+0x24>
 8001b04:	6843      	ldr	r3, [r0, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d128      	bne.n	8001b5c <xQueueGiveFromISR+0x76>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001b0a:	f7ff fd53 	bl	80015b4 <ulSetInterruptMaskFromISR>
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001b10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001b12:	0005      	movs	r5, r0
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d301      	bcc.n	8001b1c <xQueueGiveFromISR+0x36>
			xReturn = errQUEUE_FULL;
 8001b18:	2400      	movs	r4, #0
 8001b1a:	e016      	b.n	8001b4a <xQueueGiveFromISR+0x64>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001b1c:	0021      	movs	r1, r4
 8001b1e:	3145      	adds	r1, #69	; 0x45
 8001b20:	780b      	ldrb	r3, [r1, #0]
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001b22:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8001b24:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001b26:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	d113      	bne.n	8001b54 <xQueueGiveFromISR+0x6e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <xQueueGiveFromISR+0x50>
			xReturn = pdPASS;
 8001b32:	2401      	movs	r4, #1
 8001b34:	e009      	b.n	8001b4a <xQueueGiveFromISR+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b36:	0020      	movs	r0, r4
 8001b38:	3024      	adds	r0, #36	; 0x24
 8001b3a:	f000 fbb5 	bl	80022a8 <xTaskRemoveFromEventList>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d0f7      	beq.n	8001b32 <xQueueGiveFromISR+0x4c>
							if( pxHigherPriorityTaskWoken != NULL )
 8001b42:	2e00      	cmp	r6, #0
 8001b44:	d0f5      	beq.n	8001b32 <xQueueGiveFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001b46:	2401      	movs	r4, #1
 8001b48:	6034      	str	r4, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001b4a:	0028      	movs	r0, r5
 8001b4c:	f7ff fd37 	bl	80015be <vClearInterruptMaskFromISR>
}
 8001b50:	0020      	movs	r0, r4
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001b54:	3301      	adds	r3, #1
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	700b      	strb	r3, [r1, #0]
 8001b5a:	e7ea      	b.n	8001b32 <xQueueGiveFromISR+0x4c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8001b5c:	b672      	cpsid	i
 8001b5e:	e7fe      	b.n	8001b5e <xQueueGiveFromISR+0x78>

08001b60 <xQueueGenericReceive>:
{
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	b085      	sub	sp, #20
 8001b64:	0004      	movs	r4, r0
 8001b66:	000f      	movs	r7, r1
 8001b68:	9201      	str	r2, [sp, #4]
 8001b6a:	9300      	str	r3, [sp, #0]
	configASSERT( pxQueue );
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d101      	bne.n	8001b74 <xQueueGenericReceive+0x14>
 8001b70:	b672      	cpsid	i
 8001b72:	e7fe      	b.n	8001b72 <xQueueGenericReceive+0x12>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b74:	2900      	cmp	r1, #0
 8001b76:	d000      	beq.n	8001b7a <xQueueGenericReceive+0x1a>
 8001b78:	e08e      	b.n	8001c98 <xQueueGenericReceive+0x138>
 8001b7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d100      	bne.n	8001b82 <xQueueGenericReceive+0x22>
 8001b80:	e08a      	b.n	8001c98 <xQueueGenericReceive+0x138>
 8001b82:	b672      	cpsid	i
 8001b84:	e7fe      	b.n	8001b84 <xQueueGenericReceive+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001b88:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06c      	beq.n	8001c68 <xQueueGenericReceive+0x108>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b8e:	0020      	movs	r0, r4
 8001b90:	3024      	adds	r0, #36	; 0x24
 8001b92:	e063      	b.n	8001c5c <xQueueGenericReceive+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b94:	9d01      	ldr	r5, [sp, #4]
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	d103      	bne.n	8001ba2 <xQueueGenericReceive+0x42>
					taskEXIT_CRITICAL();
 8001b9a:	f7ff fcfd 	bl	8001598 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001b9e:	0028      	movs	r0, r5
 8001ba0:	e065      	b.n	8001c6e <xQueueGenericReceive+0x10e>
				else if( xEntryTimeSet == pdFALSE )
 8001ba2:	2e00      	cmp	r6, #0
 8001ba4:	d102      	bne.n	8001bac <xQueueGenericReceive+0x4c>
					vTaskSetTimeOutState( &xTimeOut );
 8001ba6:	a802      	add	r0, sp, #8
 8001ba8:	f000 fbba 	bl	8002320 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001bac:	f7ff fcf4 	bl	8001598 <vPortExitCritical>
		vTaskSuspendAll();
 8001bb0:	f000 f9f6 	bl	8001fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001bb4:	f7ff fce4 	bl	8001580 <vPortEnterCritical>
 8001bb8:	0022      	movs	r2, r4
 8001bba:	3244      	adds	r2, #68	; 0x44
 8001bbc:	7813      	ldrb	r3, [r2, #0]
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <xQueueGenericReceive+0x68>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	7013      	strb	r3, [r2, #0]
 8001bc8:	0022      	movs	r2, r4
 8001bca:	3245      	adds	r2, #69	; 0x45
 8001bcc:	7813      	ldrb	r3, [r2, #0]
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <xQueueGenericReceive+0x78>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	7013      	strb	r3, [r2, #0]
 8001bd8:	f7ff fcde 	bl	8001598 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bdc:	a901      	add	r1, sp, #4
 8001bde:	a802      	add	r0, sp, #8
 8001be0:	f000 fbae 	bl	8002340 <xTaskCheckForTimeOut>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d14a      	bne.n	8001c7e <xQueueGenericReceive+0x11e>
	taskENTER_CRITICAL();
 8001be8:	f7ff fcca 	bl	8001580 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001bec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001bee:	f7ff fcd3 	bl	8001598 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bf2:	2d00      	cmp	r5, #0
 8001bf4:	d13d      	bne.n	8001c72 <xQueueGenericReceive+0x112>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d106      	bne.n	8001c0a <xQueueGenericReceive+0xaa>
						taskENTER_CRITICAL();
 8001bfc:	f7ff fcc0 	bl	8001580 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001c00:	6860      	ldr	r0, [r4, #4]
 8001c02:	f000 fbe3 	bl	80023cc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8001c06:	f7ff fcc7 	bl	8001598 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	9901      	ldr	r1, [sp, #4]
 8001c0e:	3024      	adds	r0, #36	; 0x24
 8001c10:	f000 fb38 	bl	8002284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c14:	0020      	movs	r0, r4
 8001c16:	f7ff fe51 	bl	80018bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c1a:	f000 fa47 	bl	80020ac <xTaskResumeAll>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d101      	bne.n	8001c26 <xQueueGenericReceive+0xc6>
					portYIELD_WITHIN_API();
 8001c22:	f7ff fca1 	bl	8001568 <vPortYield>
 8001c26:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001c28:	f7ff fcaa 	bl	8001580 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c2c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c2e:	2d00      	cmp	r5, #0
 8001c30:	d0b0      	beq.n	8001b94 <xQueueGenericReceive+0x34>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c32:	0039      	movs	r1, r7
 8001c34:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001c36:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c38:	f7ff fe2e 	bl	8001898 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8001c3c:	9b00      	ldr	r3, [sp, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1a1      	bne.n	8001b86 <xQueueGenericReceive+0x26>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c42:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001c44:	3d01      	subs	r5, #1
 8001c46:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <xQueueGenericReceive+0xf2>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001c4c:	f000 fc2a 	bl	80024a4 <pvTaskIncrementMutexHeldCount>
 8001c50:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c52:	6923      	ldr	r3, [r4, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <xQueueGenericReceive+0x108>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c58:	0020      	movs	r0, r4
 8001c5a:	3010      	adds	r0, #16
 8001c5c:	f000 fb24 	bl	80022a8 <xTaskRemoveFromEventList>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d001      	beq.n	8001c68 <xQueueGenericReceive+0x108>
							queueYIELD_IF_USING_PREEMPTION();
 8001c64:	f7ff fc80 	bl	8001568 <vPortYield>
				taskEXIT_CRITICAL();
 8001c68:	f7ff fc96 	bl	8001598 <vPortExitCritical>
				return pdPASS;
 8001c6c:	2001      	movs	r0, #1
}
 8001c6e:	b005      	add	sp, #20
 8001c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8001c72:	0020      	movs	r0, r4
 8001c74:	f7ff fe22 	bl	80018bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c78:	f000 fa18 	bl	80020ac <xTaskResumeAll>
 8001c7c:	e7d3      	b.n	8001c26 <xQueueGenericReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8001c7e:	0020      	movs	r0, r4
 8001c80:	f7ff fe1c 	bl	80018bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c84:	f000 fa12 	bl	80020ac <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001c88:	f7ff fc7a 	bl	8001580 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c8c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001c8e:	f7ff fc83 	bl	8001598 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c92:	2d00      	cmp	r5, #0
 8001c94:	d1c7      	bne.n	8001c26 <xQueueGenericReceive+0xc6>
 8001c96:	e782      	b.n	8001b9e <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c98:	f000 fb88 	bl	80023ac <xTaskGetSchedulerState>
 8001c9c:	2600      	movs	r6, #0
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d1c2      	bne.n	8001c28 <xQueueGenericReceive+0xc8>
 8001ca2:	9e01      	ldr	r6, [sp, #4]
 8001ca4:	2e00      	cmp	r6, #0
 8001ca6:	d0bf      	beq.n	8001c28 <xQueueGenericReceive+0xc8>
 8001ca8:	b672      	cpsid	i
 8001caa:	e7fe      	b.n	8001caa <xQueueGenericReceive+0x14a>

08001cac <xQueueReceiveFromISR>:
{
 8001cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cae:	0005      	movs	r5, r0
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	000f      	movs	r7, r1
 8001cb4:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d101      	bne.n	8001cbe <xQueueReceiveFromISR+0x12>
 8001cba:	b672      	cpsid	i
 8001cbc:	e7fe      	b.n	8001cbc <xQueueReceiveFromISR+0x10>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001cbe:	2900      	cmp	r1, #0
 8001cc0:	d11a      	bne.n	8001cf8 <xQueueReceiveFromISR+0x4c>
 8001cc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d017      	beq.n	8001cf8 <xQueueReceiveFromISR+0x4c>
 8001cc8:	b672      	cpsid	i
 8001cca:	e7fe      	b.n	8001cca <xQueueReceiveFromISR+0x1e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ccc:	0028      	movs	r0, r5
 8001cce:	3010      	adds	r0, #16
 8001cd0:	f000 faea 	bl	80022a8 <xTaskRemoveFromEventList>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	d027      	beq.n	8001d28 <xQueueReceiveFromISR+0x7c>
						if( pxHigherPriorityTaskWoken != NULL )
 8001cd8:	2e00      	cmp	r6, #0
 8001cda:	d025      	beq.n	8001d28 <xQueueReceiveFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001cdc:	2401      	movs	r4, #1
 8001cde:	6034      	str	r4, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001ce0:	9803      	ldr	r0, [sp, #12]
 8001ce2:	f7ff fc6c 	bl	80015be <vClearInterruptMaskFromISR>
}
 8001ce6:	0020      	movs	r0, r4
 8001ce8:	b005      	add	sp, #20
 8001cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001cec:	9b01      	ldr	r3, [sp, #4]
 8001cee:	9a02      	ldr	r2, [sp, #8]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	7013      	strb	r3, [r2, #0]
 8001cf6:	e017      	b.n	8001d28 <xQueueReceiveFromISR+0x7c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001cf8:	f7ff fc5c 	bl	80015b4 <ulSetInterruptMaskFromISR>
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cfc:	6bac      	ldr	r4, [r5, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001cfe:	9003      	str	r0, [sp, #12]
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d00:	2c00      	cmp	r4, #0
 8001d02:	d0ed      	beq.n	8001ce0 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8001d04:	002b      	movs	r3, r5
 8001d06:	3344      	adds	r3, #68	; 0x44
 8001d08:	9302      	str	r3, [sp, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d0c:	0039      	movs	r1, r7
			const int8_t cRxLock = pxQueue->cRxLock;
 8001d0e:	b25b      	sxtb	r3, r3
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d10:	0028      	movs	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 8001d12:	9301      	str	r3, [sp, #4]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d14:	f7ff fdc0 	bl	8001898 <prvCopyDataFromQueue>
			if( cRxLock == queueUNLOCKED )
 8001d18:	9b01      	ldr	r3, [sp, #4]
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001d1a:	3c01      	subs	r4, #1
 8001d1c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8001d1e:	3301      	adds	r3, #1
 8001d20:	d1e4      	bne.n	8001cec <xQueueReceiveFromISR+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d22:	692b      	ldr	r3, [r5, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1d1      	bne.n	8001ccc <xQueueReceiveFromISR+0x20>
			xReturn = pdPASS;
 8001d28:	2401      	movs	r4, #1
 8001d2a:	e7d9      	b.n	8001ce0 <xQueueReceiveFromISR+0x34>

08001d2c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <prvResetNextTaskUnblockTime+0x20>)
 8001d2e:	6813      	ldr	r3, [r2, #0]
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <prvResetNextTaskUnblockTime+0x24>)
 8001d34:	2900      	cmp	r1, #0
 8001d36:	d103      	bne.n	8001d40 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d3c:	601a      	str	r2, [r3, #0]
	}
}
 8001d3e:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d44:	68d2      	ldr	r2, [r2, #12]
 8001d46:	6852      	ldr	r2, [r2, #4]
 8001d48:	e7f8      	b.n	8001d3c <prvResetNextTaskUnblockTime+0x10>
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	20000ca8 	.word	0x20000ca8
 8001d50:	20000d80 	.word	0x20000d80

08001d54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d56:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d5a:	4d15      	ldr	r5, [pc, #84]	; (8001db0 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8001d5c:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d5e:	6828      	ldr	r0, [r5, #0]
{
 8001d60:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d62:	3004      	adds	r0, #4
 8001d64:	f7ff fbba 	bl	80014dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d68:	1c63      	adds	r3, r4, #1
 8001d6a:	d107      	bne.n	8001d7c <prvAddCurrentTaskToDelayedList+0x28>
 8001d6c:	2f00      	cmp	r7, #0
 8001d6e:	d005      	beq.n	8001d7c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d70:	6829      	ldr	r1, [r5, #0]
 8001d72:	4810      	ldr	r0, [pc, #64]	; (8001db4 <prvAddCurrentTaskToDelayedList+0x60>)
 8001d74:	3104      	adds	r1, #4
 8001d76:	f7ff fb8e 	bl	8001496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d7c:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001d7e:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d80:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001d82:	42a6      	cmp	r6, r4
 8001d84:	d906      	bls.n	8001d94 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <prvAddCurrentTaskToDelayedList+0x64>)
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	6829      	ldr	r1, [r5, #0]
 8001d8c:	3104      	adds	r1, #4
 8001d8e:	f7ff fb8e 	bl	80014ae <vListInsert>
 8001d92:	e7f2      	b.n	8001d7a <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <prvAddCurrentTaskToDelayedList+0x68>)
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	6829      	ldr	r1, [r5, #0]
 8001d9a:	3104      	adds	r1, #4
 8001d9c:	f7ff fb87 	bl	80014ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <prvAddCurrentTaskToDelayedList+0x6c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4294      	cmp	r4, r2
 8001da6:	d2e8      	bcs.n	8001d7a <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 8001da8:	601c      	str	r4, [r3, #0]
}
 8001daa:	e7e6      	b.n	8001d7a <prvAddCurrentTaskToDelayedList+0x26>
 8001dac:	20000dc8 	.word	0x20000dc8
 8001db0:	20000ca4 	.word	0x20000ca4
 8001db4:	20000da0 	.word	0x20000da0
 8001db8:	20000cac 	.word	0x20000cac
 8001dbc:	20000ca8 	.word	0x20000ca8
 8001dc0:	20000d80 	.word	0x20000d80

08001dc4 <xTaskCreate>:
	{
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dc6:	0095      	lsls	r5, r2, #2
	{
 8001dc8:	b085      	sub	sp, #20
 8001dca:	9002      	str	r0, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dcc:	0028      	movs	r0, r5
	{
 8001dce:	000f      	movs	r7, r1
 8001dd0:	9303      	str	r3, [sp, #12]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dd2:	f7ff fc83 	bl	80016dc <pvPortMalloc>
 8001dd6:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 8001dd8:	d100      	bne.n	8001ddc <xTaskCreate+0x18>
 8001dda:	e08e      	b.n	8001efa <xTaskCreate+0x136>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001ddc:	2054      	movs	r0, #84	; 0x54
 8001dde:	f7ff fc7d 	bl	80016dc <pvPortMalloc>
 8001de2:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8001de4:	d100      	bne.n	8001de8 <xTaskCreate+0x24>
 8001de6:	e085      	b.n	8001ef4 <xTaskCreate+0x130>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001de8:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001dea:	3d04      	subs	r5, #4
					pxNewTCB->pxStack = pxStack;
 8001dec:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001dee:	1976      	adds	r6, r6, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001df0:	439e      	bics	r6, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001df2:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001df4:	9600      	str	r6, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001df6:	001a      	movs	r2, r3
 8001df8:	5cf9      	ldrb	r1, [r7, r3]
 8001dfa:	3234      	adds	r2, #52	; 0x34
 8001dfc:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001dfe:	5cfa      	ldrb	r2, [r7, r3]
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	d002      	beq.n	8001e0a <xTaskCreate+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e04:	3301      	adds	r3, #1
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d1f5      	bne.n	8001df6 <xTaskCreate+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e0a:	0023      	movs	r3, r4
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001e10:	3343      	adds	r3, #67	; 0x43
 8001e12:	701d      	strb	r5, [r3, #0]
 8001e14:	2e06      	cmp	r6, #6
 8001e16:	d900      	bls.n	8001e1a <xTaskCreate+0x56>
 8001e18:	2606      	movs	r6, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e1a:	1d23      	adds	r3, r4, #4
 8001e1c:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
 8001e1e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001e20:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e22:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f7ff fb33 	bl	8001490 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e2a:	0020      	movs	r0, r4
 8001e2c:	3018      	adds	r0, #24
 8001e2e:	f7ff fb2f 	bl	8001490 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e32:	2307      	movs	r3, #7
 8001e34:	1b9e      	subs	r6, r3, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e36:	0023      	movs	r3, r4
 8001e38:	3350      	adds	r3, #80	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e3a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e3c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e3e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001e40:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e42:	9a03      	ldr	r2, [sp, #12]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e44:	701d      	strb	r5, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e46:	9902      	ldr	r1, [sp, #8]
 8001e48:	9800      	ldr	r0, [sp, #0]
 8001e4a:	f7ff fb7b 	bl	8001544 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 8001e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e50:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d000      	beq.n	8001e58 <xTaskCreate+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e56:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8001e58:	f7ff fb92 	bl	8001580 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <xTaskCreate+0x154>)
		if( pxCurrentTCB == NULL )
 8001e5e:	4d2f      	ldr	r5, [pc, #188]	; (8001f1c <xTaskCreate+0x158>)
		uxCurrentNumberOfTasks++;
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	3201      	adds	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001e66:	682a      	ldr	r2, [r5, #0]
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d149      	bne.n	8001f00 <xTaskCreate+0x13c>
			pxCurrentTCB = pxNewTCB;
 8001e6c:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d11d      	bne.n	8001eb0 <xTaskCreate+0xec>
 8001e74:	4e2a      	ldr	r6, [pc, #168]	; (8001f20 <xTaskCreate+0x15c>)
 8001e76:	0037      	movs	r7, r6
 8001e78:	378c      	adds	r7, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e7a:	0030      	movs	r0, r6
 8001e7c:	3614      	adds	r6, #20
 8001e7e:	f7ff fafc 	bl	800147a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e82:	42b7      	cmp	r7, r6
 8001e84:	d1f9      	bne.n	8001e7a <xTaskCreate+0xb6>
	vListInitialise( &xDelayedTaskList1 );
 8001e86:	4e27      	ldr	r6, [pc, #156]	; (8001f24 <xTaskCreate+0x160>)
 8001e88:	0030      	movs	r0, r6
 8001e8a:	f7ff faf6 	bl	800147a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001e8e:	4f26      	ldr	r7, [pc, #152]	; (8001f28 <xTaskCreate+0x164>)
 8001e90:	0038      	movs	r0, r7
 8001e92:	f7ff faf2 	bl	800147a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e96:	4825      	ldr	r0, [pc, #148]	; (8001f2c <xTaskCreate+0x168>)
 8001e98:	f7ff faef 	bl	800147a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001e9c:	4824      	ldr	r0, [pc, #144]	; (8001f30 <xTaskCreate+0x16c>)
 8001e9e:	f7ff faec 	bl	800147a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001ea2:	4824      	ldr	r0, [pc, #144]	; (8001f34 <xTaskCreate+0x170>)
 8001ea4:	f7ff fae9 	bl	800147a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <xTaskCreate+0x174>)
 8001eaa:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <xTaskCreate+0x178>)
 8001eae:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <xTaskCreate+0x17c>)
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <xTaskCreate+0x180>)
 8001eba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ebc:	6811      	ldr	r1, [r2, #0]
 8001ebe:	428b      	cmp	r3, r1
 8001ec0:	d900      	bls.n	8001ec4 <xTaskCreate+0x100>
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	2014      	movs	r0, #20
 8001ec6:	4358      	muls	r0, r3
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <xTaskCreate+0x15c>)
 8001eca:	9901      	ldr	r1, [sp, #4]
 8001ecc:	1818      	adds	r0, r3, r0
 8001ece:	f7ff fae2 	bl	8001496 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001ed2:	f7ff fb61 	bl	8001598 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <xTaskCreate+0x184>)
			xReturn = pdPASS;
 8001ed8:	2601      	movs	r6, #1
	if( xSchedulerRunning != pdFALSE )
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d201      	bcs.n	8001eee <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 8001eea:	f7ff fb3d 	bl	8001568 <vPortYield>
	}
 8001eee:	0030      	movs	r0, r6
 8001ef0:	b005      	add	sp, #20
 8001ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8001ef4:	0030      	movs	r0, r6
 8001ef6:	f7ff fc73 	bl	80017e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001efa:	2601      	movs	r6, #1
 8001efc:	4276      	negs	r6, r6
 8001efe:	e7f6      	b.n	8001eee <xTaskCreate+0x12a>
			if( xSchedulerRunning == pdFALSE )
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <xTaskCreate+0x184>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1d3      	bne.n	8001eb0 <xTaskCreate+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f08:	682b      	ldr	r3, [r5, #0]
 8001f0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d8ce      	bhi.n	8001eb0 <xTaskCreate+0xec>
					pxCurrentTCB = pxNewTCB;
 8001f12:	602c      	str	r4, [r5, #0]
 8001f14:	e7cc      	b.n	8001eb0 <xTaskCreate+0xec>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	20000d3c 	.word	0x20000d3c
 8001f1c:	20000ca4 	.word	0x20000ca4
 8001f20:	20000cb0 	.word	0x20000cb0
 8001f24:	20000d54 	.word	0x20000d54
 8001f28:	20000d68 	.word	0x20000d68
 8001f2c:	20000d88 	.word	0x20000d88
 8001f30:	20000db4 	.word	0x20000db4
 8001f34:	20000da0 	.word	0x20000da0
 8001f38:	20000ca8 	.word	0x20000ca8
 8001f3c:	20000cac 	.word	0x20000cac
 8001f40:	20000d4c 	.word	0x20000d4c
 8001f44:	20000d50 	.word	0x20000d50
 8001f48:	20000d9c 	.word	0x20000d9c

08001f4c <vTaskStartScheduler>:
{
 8001f4c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001f4e:	2400      	movs	r4, #0
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <vTaskStartScheduler+0x3c>)
 8001f52:	9400      	str	r4, [sp, #0]
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	0023      	movs	r3, r4
 8001f5a:	490c      	ldr	r1, [pc, #48]	; (8001f8c <vTaskStartScheduler+0x40>)
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <vTaskStartScheduler+0x44>)
 8001f5e:	f7ff ff31 	bl	8001dc4 <xTaskCreate>
	if( xReturn == pdPASS )
 8001f62:	2801      	cmp	r0, #1
 8001f64:	d10b      	bne.n	8001f7e <vTaskStartScheduler+0x32>
		portDISABLE_INTERRUPTS();
 8001f66:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <vTaskStartScheduler+0x48>)
 8001f6c:	4252      	negs	r2, r2
 8001f6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <vTaskStartScheduler+0x4c>)
 8001f72:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <vTaskStartScheduler+0x50>)
 8001f76:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001f78:	f7ff fb72 	bl	8001660 <xPortStartScheduler>
}
 8001f7c:	bd13      	pop	{r0, r1, r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f7e:	1c43      	adds	r3, r0, #1
 8001f80:	d1fc      	bne.n	8001f7c <vTaskStartScheduler+0x30>
 8001f82:	b672      	cpsid	i
 8001f84:	e7fe      	b.n	8001f84 <vTaskStartScheduler+0x38>
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	20000d7c 	.word	0x20000d7c
 8001f8c:	08003e88 	.word	0x08003e88
 8001f90:	080021b1 	.word	0x080021b1
 8001f94:	20000d80 	.word	0x20000d80
 8001f98:	20000d9c 	.word	0x20000d9c
 8001f9c:	20000dc8 	.word	0x20000dc8

08001fa0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001fa0:	4a02      	ldr	r2, [pc, #8]	; (8001fac <vTaskSuspendAll+0xc>)
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	4770      	bx	lr
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	20000d48 	.word	0x20000d48

08001fb0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <xTaskIncrementTick+0xd0>)
{
 8001fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d135      	bne.n	8002026 <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <xTaskIncrementTick+0xd4>)
 8001fbc:	681c      	ldr	r4, [r3, #0]
 8001fbe:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001fc0:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	d111      	bne.n	8001fea <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <xTaskIncrementTick+0xd8>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d001      	beq.n	8001fd4 <xTaskIncrementTick+0x24>
 8001fd0:	b672      	cpsid	i
 8001fd2:	e7fe      	b.n	8001fd2 <xTaskIncrementTick+0x22>
 8001fd4:	4a2d      	ldr	r2, [pc, #180]	; (800208c <xTaskIncrementTick+0xdc>)
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	6810      	ldr	r0, [r2, #0]
 8001fda:	6018      	str	r0, [r3, #0]
 8001fdc:	6011      	str	r1, [r2, #0]
 8001fde:	4a2c      	ldr	r2, [pc, #176]	; (8002090 <xTaskIncrementTick+0xe0>)
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	f7ff fea1 	bl	8001d2c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fea:	4f2a      	ldr	r7, [pc, #168]	; (8002094 <xTaskIncrementTick+0xe4>)
BaseType_t xSwitchRequired = pdFALSE;
 8001fec:	2600      	movs	r6, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	d307      	bcc.n	8002004 <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <xTaskIncrementTick+0xd8>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	2a00      	cmp	r2, #0
 8001ffc:	d119      	bne.n	8002032 <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ffe:	2301      	movs	r3, #1
 8002000:	425b      	negs	r3, r3
 8002002:	603b      	str	r3, [r7, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <xTaskIncrementTick+0xe8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200a:	2314      	movs	r3, #20
 800200c:	4353      	muls	r3, r2
 800200e:	4a23      	ldr	r2, [pc, #140]	; (800209c <xTaskIncrementTick+0xec>)
 8002010:	58d3      	ldr	r3, [r2, r3]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d900      	bls.n	8002018 <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
 8002016:	2601      	movs	r6, #1
		if( xYieldPending != pdFALSE )
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <xTaskIncrementTick+0xf0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d000      	beq.n	8002022 <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
 8002020:	2601      	movs	r6, #1
}
 8002022:	0030      	movs	r0, r6
 8002024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <xTaskIncrementTick+0xf4>)
BaseType_t xSwitchRequired = pdFALSE;
 8002028:	2600      	movs	r6, #0
		++uxPendedTicks;
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	e7f2      	b.n	8002018 <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002038:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 800203a:	429c      	cmp	r4, r3
 800203c:	d3e1      	bcc.n	8002002 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800203e:	1d2b      	adds	r3, r5, #4
 8002040:	0018      	movs	r0, r3
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	f7ff fa4a 	bl	80014dc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002048:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800204e:	0028      	movs	r0, r5
 8002050:	3018      	adds	r0, #24
 8002052:	f7ff fa43 	bl	80014dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <xTaskIncrementTick+0xf8>)
 8002058:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4290      	cmp	r0, r2
 800205e:	d900      	bls.n	8002062 <xTaskIncrementTick+0xb2>
 8002060:	6018      	str	r0, [r3, #0]
 8002062:	2314      	movs	r3, #20
 8002064:	4358      	muls	r0, r3
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <xTaskIncrementTick+0xec>)
 8002068:	1d29      	adds	r1, r5, #4
 800206a:	1818      	adds	r0, r3, r0
 800206c:	f7ff fa13 	bl	8001496 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <xTaskIncrementTick+0xe8>)
 8002072:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	429a      	cmp	r2, r3
 800207a:	d3bb      	bcc.n	8001ff4 <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
 800207c:	2601      	movs	r6, #1
 800207e:	e7b9      	b.n	8001ff4 <xTaskIncrementTick+0x44>
 8002080:	20000d48 	.word	0x20000d48
 8002084:	20000dc8 	.word	0x20000dc8
 8002088:	20000ca8 	.word	0x20000ca8
 800208c:	20000cac 	.word	0x20000cac
 8002090:	20000d84 	.word	0x20000d84
 8002094:	20000d80 	.word	0x20000d80
 8002098:	20000ca4 	.word	0x20000ca4
 800209c:	20000cb0 	.word	0x20000cb0
 80020a0:	20000dcc 	.word	0x20000dcc
 80020a4:	20000d44 	.word	0x20000d44
 80020a8:	20000d50 	.word	0x20000d50

080020ac <xTaskResumeAll>:
{
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 80020ae:	4c2b      	ldr	r4, [pc, #172]	; (800215c <xTaskResumeAll+0xb0>)
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <xTaskResumeAll+0xe>
 80020b6:	b672      	cpsid	i
 80020b8:	e7fe      	b.n	80020b8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 80020ba:	f7ff fa61 	bl	8001580 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020c4:	6824      	ldr	r4, [r4, #0]
 80020c6:	2c00      	cmp	r4, #0
 80020c8:	d004      	beq.n	80020d4 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 80020ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80020cc:	f7ff fa64 	bl	8001598 <vPortExitCritical>
}
 80020d0:	0020      	movs	r0, r4
 80020d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <xTaskResumeAll+0xb4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f6      	beq.n	80020ca <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 80020dc:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 80020de:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020e0:	4b20      	ldr	r3, [pc, #128]	; (8002164 <xTaskResumeAll+0xb8>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2a00      	cmp	r2, #0
 80020e6:	d11a      	bne.n	800211e <xTaskResumeAll+0x72>
				if( pxTCB != NULL )
 80020e8:	2c00      	cmp	r4, #0
 80020ea:	d001      	beq.n	80020f0 <xTaskResumeAll+0x44>
					prvResetNextTaskUnblockTime();
 80020ec:	f7ff fe1e 	bl	8001d2c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020f0:	4d1d      	ldr	r5, [pc, #116]	; (8002168 <xTaskResumeAll+0xbc>)
 80020f2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d00a      	beq.n	800210e <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 80020f8:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80020fa:	f7ff ff59 	bl	8001fb0 <xTaskIncrementTick>
 80020fe:	2800      	cmp	r0, #0
 8002100:	d001      	beq.n	8002106 <xTaskResumeAll+0x5a>
								xYieldPending = pdTRUE;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <xTaskResumeAll+0xc0>)
 8002104:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8002106:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002108:	2c00      	cmp	r4, #0
 800210a:	d1f6      	bne.n	80020fa <xTaskResumeAll+0x4e>
						uxPendedTicks = 0;
 800210c:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <xTaskResumeAll+0xc0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0d9      	beq.n	80020ca <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8002116:	f7ff fa27 	bl	8001568 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800211a:	2401      	movs	r4, #1
 800211c:	e7d6      	b.n	80020cc <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002122:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002124:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002126:	3018      	adds	r0, #24
 8002128:	f7ff f9d8 	bl	80014dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800212c:	0028      	movs	r0, r5
 800212e:	f7ff f9d5 	bl	80014dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <xTaskResumeAll+0xc4>)
 8002134:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4290      	cmp	r0, r2
 800213a:	d900      	bls.n	800213e <xTaskResumeAll+0x92>
 800213c:	6018      	str	r0, [r3, #0]
 800213e:	4370      	muls	r0, r6
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <xTaskResumeAll+0xc8>)
 8002142:	0029      	movs	r1, r5
 8002144:	1818      	adds	r0, r3, r0
 8002146:	f7ff f9a6 	bl	8001496 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <xTaskResumeAll+0xcc>)
 800214c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	429a      	cmp	r2, r3
 8002154:	d3c4      	bcc.n	80020e0 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <xTaskResumeAll+0xc0>)
 8002158:	601f      	str	r7, [r3, #0]
 800215a:	e7c1      	b.n	80020e0 <xTaskResumeAll+0x34>
 800215c:	20000d48 	.word	0x20000d48
 8002160:	20000d3c 	.word	0x20000d3c
 8002164:	20000d88 	.word	0x20000d88
 8002168:	20000d44 	.word	0x20000d44
 800216c:	20000dcc 	.word	0x20000dcc
 8002170:	20000d50 	.word	0x20000d50
 8002174:	20000cb0 	.word	0x20000cb0
 8002178:	20000ca4 	.word	0x20000ca4

0800217c <vTaskDelay>:
	{
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002180:	d102      	bne.n	8002188 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 8002182:	f7ff f9f1 	bl	8001568 <vPortYield>
	}
 8002186:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <vTaskDelay+0x30>)
 800218a:	681d      	ldr	r5, [r3, #0]
 800218c:	2d00      	cmp	r5, #0
 800218e:	d001      	beq.n	8002194 <vTaskDelay+0x18>
 8002190:	b672      	cpsid	i
 8002192:	e7fe      	b.n	8002192 <vTaskDelay+0x16>
			vTaskSuspendAll();
 8002194:	f7ff ff04 	bl	8001fa0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002198:	0029      	movs	r1, r5
 800219a:	0020      	movs	r0, r4
 800219c:	f7ff fdda 	bl	8001d54 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80021a0:	f7ff ff84 	bl	80020ac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d1ee      	bne.n	8002186 <vTaskDelay+0xa>
 80021a8:	e7eb      	b.n	8002182 <vTaskDelay+0x6>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	20000d48 	.word	0x20000d48

080021b0 <prvIdleTask>:
{
 80021b0:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021b2:	4c15      	ldr	r4, [pc, #84]	; (8002208 <prvIdleTask+0x58>)
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <prvIdleTask+0x5c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d9f7      	bls.n	80021b2 <prvIdleTask+0x2>
				taskYIELD();
 80021c2:	f7ff f9d1 	bl	8001568 <vPortYield>
 80021c6:	e7f4      	b.n	80021b2 <prvIdleTask+0x2>
			vTaskSuspendAll();
 80021c8:	f7ff feea 	bl	8001fa0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80021cc:	4d10      	ldr	r5, [pc, #64]	; (8002210 <prvIdleTask+0x60>)
 80021ce:	682e      	ldr	r6, [r5, #0]
			( void ) xTaskResumeAll();
 80021d0:	f7ff ff6c 	bl	80020ac <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80021d4:	2e00      	cmp	r6, #0
 80021d6:	d0ec      	beq.n	80021b2 <prvIdleTask+0x2>
				taskENTER_CRITICAL();
 80021d8:	f7ff f9d2 	bl	8001580 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80021dc:	68eb      	ldr	r3, [r5, #12]
 80021de:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021e0:	1d28      	adds	r0, r5, #4
 80021e2:	f7ff f97b 	bl	80014dc <uxListRemove>
					--uxCurrentNumberOfTasks;
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <prvIdleTask+0x64>)
 80021e8:	6813      	ldr	r3, [r2, #0]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80021f4:	f7ff f9d0 	bl	8001598 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80021f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80021fa:	f7ff faf1 	bl	80017e0 <vPortFree>
			vPortFree( pxTCB );
 80021fe:	0028      	movs	r0, r5
 8002200:	f7ff faee 	bl	80017e0 <vPortFree>
 8002204:	e7d5      	b.n	80021b2 <prvIdleTask+0x2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	20000d40 	.word	0x20000d40
 800220c:	20000cb0 	.word	0x20000cb0
 8002210:	20000db4 	.word	0x20000db4
 8002214:	20000d3c 	.word	0x20000d3c

08002218 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002218:	4b15      	ldr	r3, [pc, #84]	; (8002270 <vTaskSwitchContext+0x58>)
{
 800221a:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <vTaskSwitchContext+0x5c>)
 8002220:	2a00      	cmp	r2, #0
 8002222:	d002      	beq.n	800222a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]
}
 8002228:	bd30      	pop	{r4, r5, pc}
 800222a:	2414      	movs	r4, #20
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800222c:	4812      	ldr	r0, [pc, #72]	; (8002278 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 800222e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002230:	6802      	ldr	r2, [r0, #0]
 8002232:	4912      	ldr	r1, [pc, #72]	; (800227c <vTaskSwitchContext+0x64>)
 8002234:	0023      	movs	r3, r4
 8002236:	4353      	muls	r3, r2
 8002238:	585d      	ldr	r5, [r3, r1]
 800223a:	2d00      	cmp	r5, #0
 800223c:	d012      	beq.n	8002264 <vTaskSwitchContext+0x4c>
 800223e:	18cc      	adds	r4, r1, r3
 8002240:	6865      	ldr	r5, [r4, #4]
 8002242:	3308      	adds	r3, #8
 8002244:	686d      	ldr	r5, [r5, #4]
 8002246:	18cb      	adds	r3, r1, r3
 8002248:	6065      	str	r5, [r4, #4]
 800224a:	429d      	cmp	r5, r3
 800224c:	d101      	bne.n	8002252 <vTaskSwitchContext+0x3a>
 800224e:	686b      	ldr	r3, [r5, #4]
 8002250:	6063      	str	r3, [r4, #4]
 8002252:	2314      	movs	r3, #20
 8002254:	4353      	muls	r3, r2
 8002256:	18c9      	adds	r1, r1, r3
 8002258:	684b      	ldr	r3, [r1, #4]
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <vTaskSwitchContext+0x68>)
 800225e:	6019      	str	r1, [r3, #0]
 8002260:	6002      	str	r2, [r0, #0]
}
 8002262:	e7e1      	b.n	8002228 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002264:	2a00      	cmp	r2, #0
 8002266:	d101      	bne.n	800226c <vTaskSwitchContext+0x54>
 8002268:	b672      	cpsid	i
 800226a:	e7fe      	b.n	800226a <vTaskSwitchContext+0x52>
 800226c:	3a01      	subs	r2, #1
 800226e:	e7e1      	b.n	8002234 <vTaskSwitchContext+0x1c>
 8002270:	20000d48 	.word	0x20000d48
 8002274:	20000dcc 	.word	0x20000dcc
 8002278:	20000d50 	.word	0x20000d50
 800227c:	20000cb0 	.word	0x20000cb0
 8002280:	20000ca4 	.word	0x20000ca4

08002284 <vTaskPlaceOnEventList>:
{
 8002284:	b510      	push	{r4, lr}
 8002286:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8002288:	2800      	cmp	r0, #0
 800228a:	d101      	bne.n	8002290 <vTaskPlaceOnEventList+0xc>
 800228c:	b672      	cpsid	i
 800228e:	e7fe      	b.n	800228e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <vTaskPlaceOnEventList+0x20>)
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	3118      	adds	r1, #24
 8002296:	f7ff f90a 	bl	80014ae <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800229a:	2101      	movs	r1, #1
 800229c:	0020      	movs	r0, r4
 800229e:	f7ff fd59 	bl	8001d54 <prvAddCurrentTaskToDelayedList>
}
 80022a2:	bd10      	pop	{r4, pc}
 80022a4:	20000ca4 	.word	0x20000ca4

080022a8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80022a8:	68c3      	ldr	r3, [r0, #12]
{
 80022aa:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80022ac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80022ae:	2c00      	cmp	r4, #0
 80022b0:	d101      	bne.n	80022b6 <xTaskRemoveFromEventList+0xe>
 80022b2:	b672      	cpsid	i
 80022b4:	e7fe      	b.n	80022b4 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80022b6:	0025      	movs	r5, r4
 80022b8:	3518      	adds	r5, #24
 80022ba:	0028      	movs	r0, r5
 80022bc:	f7ff f90e 	bl	80014dc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <xTaskRemoveFromEventList+0x60>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d11b      	bne.n	8002300 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80022c8:	1d25      	adds	r5, r4, #4
 80022ca:	0028      	movs	r0, r5
 80022cc:	f7ff f906 	bl	80014dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <xTaskRemoveFromEventList+0x64>)
 80022d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022d4:	6811      	ldr	r1, [r2, #0]
 80022d6:	428b      	cmp	r3, r1
 80022d8:	d900      	bls.n	80022dc <xTaskRemoveFromEventList+0x34>
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	2014      	movs	r0, #20
 80022de:	0029      	movs	r1, r5
 80022e0:	4343      	muls	r3, r0
 80022e2:	480b      	ldr	r0, [pc, #44]	; (8002310 <xTaskRemoveFromEventList+0x68>)
 80022e4:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80022e6:	f7ff f8d6 	bl	8001496 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <xTaskRemoveFromEventList+0x6c>)
 80022ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022ee:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 80022f0:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d902      	bls.n	80022fe <xTaskRemoveFromEventList+0x56>
		xYieldPending = pdTRUE;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <xTaskRemoveFromEventList+0x70>)
 80022fa:	3001      	adds	r0, #1
 80022fc:	6018      	str	r0, [r3, #0]
}
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002300:	0029      	movs	r1, r5
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <xTaskRemoveFromEventList+0x74>)
 8002304:	e7ef      	b.n	80022e6 <xTaskRemoveFromEventList+0x3e>
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	20000d48 	.word	0x20000d48
 800230c:	20000d50 	.word	0x20000d50
 8002310:	20000cb0 	.word	0x20000cb0
 8002314:	20000ca4 	.word	0x20000ca4
 8002318:	20000dcc 	.word	0x20000dcc
 800231c:	20000d88 	.word	0x20000d88

08002320 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8002320:	2800      	cmp	r0, #0
 8002322:	d101      	bne.n	8002328 <vTaskSetTimeOutState+0x8>
 8002324:	b672      	cpsid	i
 8002326:	e7fe      	b.n	8002326 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <vTaskSetTimeOutState+0x18>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800232e:	4b03      	ldr	r3, [pc, #12]	; (800233c <vTaskSetTimeOutState+0x1c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6043      	str	r3, [r0, #4]
}
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000d84 	.word	0x20000d84
 800233c:	20000dc8 	.word	0x20000dc8

08002340 <xTaskCheckForTimeOut>:
{
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	0004      	movs	r4, r0
 8002344:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 8002346:	2800      	cmp	r0, #0
 8002348:	d101      	bne.n	800234e <xTaskCheckForTimeOut+0xe>
 800234a:	b672      	cpsid	i
 800234c:	e7fe      	b.n	800234c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 800234e:	2900      	cmp	r1, #0
 8002350:	d101      	bne.n	8002356 <xTaskCheckForTimeOut+0x16>
 8002352:	b672      	cpsid	i
 8002354:	e7fe      	b.n	8002354 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 8002356:	f7ff f913 	bl	8001580 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <xTaskCheckForTimeOut+0x58>)
				xReturn = pdFALSE;
 800235c:	2600      	movs	r6, #0
		const TickType_t xConstTickCount = xTickCount;
 800235e:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	d013      	beq.n	800238e <xTaskCheckForTimeOut+0x4e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002366:	4a0d      	ldr	r2, [pc, #52]	; (800239c <xTaskCheckForTimeOut+0x5c>)
 8002368:	6826      	ldr	r6, [r4, #0]
 800236a:	6810      	ldr	r0, [r2, #0]
 800236c:	6862      	ldr	r2, [r4, #4]
 800236e:	4286      	cmp	r6, r0
 8002370:	d002      	beq.n	8002378 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
 8002372:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002374:	4291      	cmp	r1, r2
 8002376:	d20a      	bcs.n	800238e <xTaskCheckForTimeOut+0x4e>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002378:	1a88      	subs	r0, r1, r2
			xReturn = pdTRUE;
 800237a:	2601      	movs	r6, #1
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800237c:	4283      	cmp	r3, r0
 800237e:	d906      	bls.n	800238e <xTaskCheckForTimeOut+0x4e>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002380:	1a5b      	subs	r3, r3, r1
 8002382:	189b      	adds	r3, r3, r2
 8002384:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002386:	0020      	movs	r0, r4
 8002388:	f7ff ffca 	bl	8002320 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800238c:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800238e:	f7ff f903 	bl	8001598 <vPortExitCritical>
}
 8002392:	0030      	movs	r0, r6
 8002394:	bd70      	pop	{r4, r5, r6, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	20000dc8 	.word	0x20000dc8
 800239c:	20000d84 	.word	0x20000d84

080023a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80023a0:	2201      	movs	r2, #1
 80023a2:	4b01      	ldr	r3, [pc, #4]	; (80023a8 <vTaskMissedYield+0x8>)
 80023a4:	601a      	str	r2, [r3, #0]
}
 80023a6:	4770      	bx	lr
 80023a8:	20000dcc 	.word	0x20000dcc

080023ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 80023ae:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <xTaskGetSchedulerState+0x1c>)
 80023b8:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80023ba:	4243      	negs	r3, r0
 80023bc:	4158      	adcs	r0, r3
 80023be:	0040      	lsls	r0, r0, #1
	}
 80023c0:	4770      	bx	lr
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000d9c 	.word	0x20000d9c
 80023c8:	20000d48 	.word	0x20000d48

080023cc <vTaskPriorityInherit>:
	{
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80023d0:	d026      	beq.n	8002420 <vTaskPriorityInherit+0x54>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80023d2:	4f16      	ldr	r7, [pc, #88]	; (800242c <vTaskPriorityInherit+0x60>)
 80023d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	4299      	cmp	r1, r3
 80023dc:	d220      	bcs.n	8002420 <vTaskPriorityInherit+0x54>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023de:	6983      	ldr	r3, [r0, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db04      	blt.n	80023ee <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e4:	2207      	movs	r2, #7
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	1ad2      	subs	r2, r2, r3
 80023ec:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80023ee:	2314      	movs	r3, #20
 80023f0:	434b      	muls	r3, r1
 80023f2:	4e0f      	ldr	r6, [pc, #60]	; (8002430 <vTaskPriorityInherit+0x64>)
 80023f4:	6962      	ldr	r2, [r4, #20]
 80023f6:	18f3      	adds	r3, r6, r3
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d112      	bne.n	8002422 <vTaskPriorityInherit+0x56>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023fc:	1d25      	adds	r5, r4, #4
 80023fe:	0028      	movs	r0, r5
 8002400:	f7ff f86c 	bl	80014dc <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002404:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <vTaskPriorityInherit+0x68>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800240a:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800240c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800240e:	428b      	cmp	r3, r1
 8002410:	d900      	bls.n	8002414 <vTaskPriorityInherit+0x48>
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	2014      	movs	r0, #20
 8002416:	4358      	muls	r0, r3
 8002418:	0029      	movs	r1, r5
 800241a:	1830      	adds	r0, r6, r0
 800241c:	f7ff f83b 	bl	8001496 <vListInsertEnd>
	}
 8002420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002428:	e7fa      	b.n	8002420 <vTaskPriorityInherit+0x54>
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	20000ca4 	.word	0x20000ca4
 8002430:	20000cb0 	.word	0x20000cb0
 8002434:	20000d50 	.word	0x20000d50

08002438 <xTaskPriorityDisinherit>:
	{
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800243c:	d101      	bne.n	8002442 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800243e:	2000      	movs	r0, #0
	}
 8002440:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <xTaskPriorityDisinherit+0x60>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4298      	cmp	r0, r3
 8002448:	d001      	beq.n	800244e <xTaskPriorityDisinherit+0x16>
 800244a:	b672      	cpsid	i
 800244c:	e7fe      	b.n	800244c <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
 800244e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <xTaskPriorityDisinherit+0x20>
 8002454:	b672      	cpsid	i
 8002456:	e7fe      	b.n	8002456 <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002458:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800245a:	6c41      	ldr	r1, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800245c:	3b01      	subs	r3, #1
 800245e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002460:	428a      	cmp	r2, r1
 8002462:	d0ec      	beq.n	800243e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ea      	bne.n	800243e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002468:	1d05      	adds	r5, r0, #4
 800246a:	0028      	movs	r0, r5
 800246c:	f7ff f836 	bl	80014dc <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002470:	2307      	movs	r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002472:	6c60      	ldr	r0, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002474:	1a1b      	subs	r3, r3, r0
 8002476:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800247a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4290      	cmp	r0, r2
 8002480:	d900      	bls.n	8002484 <xTaskPriorityDisinherit+0x4c>
 8002482:	6018      	str	r0, [r3, #0]
 8002484:	2314      	movs	r3, #20
 8002486:	4343      	muls	r3, r0
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <xTaskPriorityDisinherit+0x68>)
 800248a:	0029      	movs	r1, r5
 800248c:	18c0      	adds	r0, r0, r3
 800248e:	f7ff f802 	bl	8001496 <vListInsertEnd>
					xReturn = pdTRUE;
 8002492:	2001      	movs	r0, #1
		return xReturn;
 8002494:	e7d4      	b.n	8002440 <xTaskPriorityDisinherit+0x8>
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	20000ca4 	.word	0x20000ca4
 800249c:	20000d50 	.word	0x20000d50
 80024a0:	20000cb0 	.word	0x20000cb0

080024a4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <pvTaskIncrementMutexHeldCount+0x14>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	d003      	beq.n	80024b4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80024b0:	3201      	adds	r2, #1
 80024b2:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80024b4:	6818      	ldr	r0, [r3, #0]
	}
 80024b6:	4770      	bx	lr
 80024b8:	20000ca4 	.word	0x20000ca4

080024bc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80024bc:	b510      	push	{r4, lr}
  for(;;)
  {
	//test++;
	//HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);

    osDelay(200);
 80024be:	20c8      	movs	r0, #200	; 0xc8
 80024c0:	f7fe ff6c 	bl	800139c <osDelay>
 80024c4:	e7fb      	b.n	80024be <StartDefaultTask+0x2>
	...

080024c8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80024c8:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN StartTask02 */
	uint8_t data[] = {0x55,0x55,0x30,0x31,0x22,0x65};
 80024ca:	2206      	movs	r2, #6
 80024cc:	4907      	ldr	r1, [pc, #28]	; (80024ec <StartTask02+0x24>)
 80024ce:	4668      	mov	r0, sp
  /* Infinite loop */
  for(;;)
  {
	  HAL_SPI_Transmit(&hspi1,data,sizeof(data),1000);
 80024d0:	24fa      	movs	r4, #250	; 0xfa
	uint8_t data[] = {0x55,0x55,0x30,0x31,0x22,0x65};
 80024d2:	f001 f865 	bl	80035a0 <memcpy>
	  HAL_SPI_Transmit(&hspi1,data,sizeof(data),1000);
 80024d6:	00a4      	lsls	r4, r4, #2
 80024d8:	0023      	movs	r3, r4
 80024da:	2206      	movs	r2, #6
 80024dc:	4669      	mov	r1, sp
 80024de:	4804      	ldr	r0, [pc, #16]	; (80024f0 <StartTask02+0x28>)
 80024e0:	f7fe fd52 	bl	8000f88 <HAL_SPI_Transmit>
	  osDelay(1);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7fe ff59 	bl	800139c <osDelay>
 80024ea:	e7f5      	b.n	80024d8 <StartTask02+0x10>
 80024ec:	08003e3c 	.word	0x08003e3c
 80024f0:	20000ec8 	.word	0x20000ec8

080024f4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80024f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}


  /* Infinite loop */
  for(;;)
  {
	sprintf(tesstr,"hello %d\n\r",i++);
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <StartTask03+0x24>)
 80024f8:	a801      	add	r0, sp, #4
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	1c51      	adds	r1, r2, #1
 80024fe:	8019      	strh	r1, [r3, #0]
 8002500:	4906      	ldr	r1, [pc, #24]	; (800251c <StartTask03+0x28>)
 8002502:	f001 f869 	bl	80035d8 <siprintf>
	usb_tx_post(tesstr,sizeof(tesstr));
 8002506:	2114      	movs	r1, #20
 8002508:	a801      	add	r0, sp, #4
 800250a:	f000 fa11 	bl	8002930 <usb_tx_post>
    osDelay(10);
 800250e:	200a      	movs	r0, #10
 8002510:	f7fe ff44 	bl	800139c <osDelay>
 8002514:	e7ef      	b.n	80024f6 <StartTask03+0x2>
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	20000dd0 	.word	0x20000dd0
 800251c:	08003e8d 	.word	0x08003e8d

08002520 <SystemClock_Config>:
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002520:	2322      	movs	r3, #34	; 0x22
{
 8002522:	b530      	push	{r4, r5, lr}
 8002524:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002526:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002528:	3b12      	subs	r3, #18
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800252a:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800252c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800252e:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002530:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002532:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002534:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002536:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002538:	f7fe f856 	bl	80005e8 <HAL_RCC_OscConfig>
 800253c:	2800      	cmp	r0, #0
 800253e:	d000      	beq.n	8002542 <SystemClock_Config+0x22>
 8002540:	e7fe      	b.n	8002540 <SystemClock_Config+0x20>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002542:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002544:	2503      	movs	r5, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002546:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002548:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800254a:	0021      	movs	r1, r4
 800254c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002550:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002552:	f7fe fab7 	bl	8000ac4 <HAL_RCC_ClockConfig>
 8002556:	2800      	cmp	r0, #0
 8002558:	d000      	beq.n	800255c <SystemClock_Config+0x3c>
 800255a:	e7fe      	b.n	800255a <SystemClock_Config+0x3a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800255c:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800255e:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002560:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002562:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002564:	f7fe fb8e 	bl	8000c84 <HAL_RCCEx_PeriphCLKConfig>
 8002568:	1e04      	subs	r4, r0, #0
 800256a:	d000      	beq.n	800256e <SystemClock_Config+0x4e>
 800256c:	e7fe      	b.n	800256c <SystemClock_Config+0x4c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800256e:	f7fe fb57 	bl	8000c20 <HAL_RCC_GetHCLKFreq>
 8002572:	21fa      	movs	r1, #250	; 0xfa
 8002574:	0089      	lsls	r1, r1, #2
 8002576:	f7fd fddb 	bl	8000130 <__udivsi3>
 800257a:	f7fd febd 	bl	80002f8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800257e:	2004      	movs	r0, #4
 8002580:	f7fd fed4 	bl	800032c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8002584:	2001      	movs	r0, #1
 8002586:	0022      	movs	r2, r4
 8002588:	0029      	movs	r1, r5
 800258a:	4240      	negs	r0, r0
 800258c:	f7fd fe7a 	bl	8000284 <HAL_NVIC_SetPriority>
}
 8002590:	b019      	add	sp, #100	; 0x64
 8002592:	bd30      	pop	{r4, r5, pc}

08002594 <main>:
{
 8002594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002596:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8002598:	f7fd fe56 	bl	8000248 <HAL_Init>
  SystemClock_Config();
 800259c:	f7ff ffc0 	bl	8002520 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025a0:	2080      	movs	r0, #128	; 0x80
 80025a2:	4b5a      	ldr	r3, [pc, #360]	; (800270c <main+0x178>)
 80025a4:	03c0      	lsls	r0, r0, #15
 80025a6:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025aa:	4301      	orrs	r1, r0
 80025ac:	6159      	str	r1, [r3, #20]
 80025ae:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	02ff      	lsls	r7, r7, #11
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025b2:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025b6:	9202      	str	r2, [sp, #8]
 80025b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	6959      	ldr	r1, [r3, #20]
 80025bc:	0280      	lsls	r0, r0, #10
 80025be:	4301      	orrs	r1, r0
 80025c0:	6159      	str	r1, [r3, #20]
 80025c2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80025c4:	2108      	movs	r1, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	4002      	ands	r2, r0
 80025c8:	9203      	str	r2, [sp, #12]
 80025ca:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025cc:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80025ce:	4850      	ldr	r0, [pc, #320]	; (8002710 <main+0x17c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d0:	433a      	orrs	r2, r7
 80025d2:	615a      	str	r2, [r3, #20]
 80025d4:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	403b      	ands	r3, r7
 80025da:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2500      	movs	r5, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80025e2:	f7fd ff5b 	bl	800049c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 80025e6:	2308      	movs	r3, #8
 80025e8:	ac11      	add	r4, sp, #68	; 0x44
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025ea:	4849      	ldr	r0, [pc, #292]	; (8002710 <main+0x17c>)
 80025ec:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = LED_Pin;
 80025ee:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025f6:	f7fd fea7 	bl	8000348 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 80025fa:	4846      	ldr	r0, [pc, #280]	; (8002714 <main+0x180>)
 80025fc:	4b46      	ldr	r3, [pc, #280]	; (8002718 <main+0x184>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025fe:	6085      	str	r5, [r0, #8]
  hspi1.Instance = SPI1;
 8002600:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002602:	2382      	movs	r3, #130	; 0x82
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002608:	33fd      	adds	r3, #253	; 0xfd
 800260a:	33ff      	adds	r3, #255	; 0xff
 800260c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800260e:	2310      	movs	r3, #16
 8002610:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8002612:	3b09      	subs	r3, #9
 8002614:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002616:	199b      	adds	r3, r3, r6
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002618:	6105      	str	r5, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800261a:	6145      	str	r5, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800261c:	6187      	str	r7, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800261e:	6205      	str	r5, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002620:	6245      	str	r5, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002622:	6285      	str	r5, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002624:	6305      	str	r5, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002626:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002628:	f7fe fc50 	bl	8000ecc <HAL_SPI_Init>
 800262c:	42a8      	cmp	r0, r5
 800262e:	d000      	beq.n	8002632 <main+0x9e>
 8002630:	e7fe      	b.n	8002630 <main+0x9c>
  hi2c1.Instance = I2C1;
 8002632:	4d3a      	ldr	r5, [pc, #232]	; (800271c <main+0x188>)
 8002634:	4b3a      	ldr	r3, [pc, #232]	; (8002720 <main+0x18c>)
  hi2c1.Init.OwnAddress1 = 0;
 8002636:	60a8      	str	r0, [r5, #8]
  hi2c1.Instance = I2C1;
 8002638:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800263a:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <main+0x190>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800263c:	6128      	str	r0, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800263e:	6168      	str	r0, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002640:	61a8      	str	r0, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002642:	61e8      	str	r0, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002644:	6228      	str	r0, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002646:	0028      	movs	r0, r5
  hi2c1.Init.Timing = 0x2000090E;
 8002648:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800264a:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800264c:	f7fd ff2c 	bl	80004a8 <HAL_I2C_Init>
 8002650:	1e01      	subs	r1, r0, #0
 8002652:	d000      	beq.n	8002656 <main+0xc2>
 8002654:	e7fe      	b.n	8002654 <main+0xc0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002656:	0028      	movs	r0, r5
 8002658:	f7fd ff7c 	bl	8000554 <HAL_I2CEx_ConfigAnalogFilter>
 800265c:	1e01      	subs	r1, r0, #0
 800265e:	d000      	beq.n	8002662 <main+0xce>
 8002660:	e7fe      	b.n	8002660 <main+0xcc>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002662:	0028      	movs	r0, r5
 8002664:	f7fd ff9c 	bl	80005a0 <HAL_I2CEx_ConfigDigitalFilter>
 8002668:	1e07      	subs	r7, r0, #0
 800266a:	d000      	beq.n	800266e <main+0xda>
 800266c:	e7fe      	b.n	800266c <main+0xd8>
  hid_init_usbd();
 800266e:	f000 f9f1 	bl	8002a54 <hid_init_usbd>
/**\brief Enables or disables USB hardware
 * \param dev dev usb device \ref _usbd_device
 * \param enable Enables USB when TRUE disables otherwise
 */
inline static void usbd_enable(usbd_device *dev, bool enable) {
    dev->driver->enable(enable);
 8002672:	4d2d      	ldr	r5, [pc, #180]	; (8002728 <main+0x194>)
 8002674:	0030      	movs	r0, r6
 8002676:	682b      	ldr	r3, [r5, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4798      	blx	r3
 * \param dev dev usb device \ref _usbd_device
 * \param connect Connects USB to host if TRUE, disconnects otherwise
 * \return lanes connection status. \ref USB_LANES_STATUS
 */
inline static uint8_t usbd_connect(usbd_device *dev, bool connect) {
    return dev->driver->connect(connect);
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	0030      	movs	r0, r6
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4798      	blx	r3
  HAL_NVIC_EnableIRQ(USB_IRQn);
 8002684:	201f      	movs	r0, #31
 8002686:	f7fd fe2d 	bl	80002e4 <HAL_NVIC_EnableIRQ>
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800268a:	0031      	movs	r1, r6
 800268c:	a801      	add	r0, sp, #4
  osSemaphoreDef(myBinarySem01);
 800268e:	9701      	str	r7, [sp, #4]
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8002690:	f7fe fe8c 	bl	80013ac <osSemaphoreCreate>
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <main+0x198>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002696:	4d26      	ldr	r5, [pc, #152]	; (8002730 <main+0x19c>)
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8002698:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800269a:	ab07      	add	r3, sp, #28
 800269c:	469c      	mov	ip, r3
 800269e:	002b      	movs	r3, r5
 80026a0:	4662      	mov	r2, ip
 80026a2:	3308      	adds	r3, #8
 80026a4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80026a6:	c243      	stmia	r2!, {r0, r1, r6}
 80026a8:	cb03      	ldmia	r3!, {r0, r1}
 80026aa:	c203      	stmia	r2!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026ac:	0039      	movs	r1, r7
 80026ae:	4660      	mov	r0, ip
 80026b0:	f7fe fe5c 	bl	800136c <osThreadCreate>
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <main+0x1a0>)
 80026b6:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80026b8:	ab0c      	add	r3, sp, #48	; 0x30
 80026ba:	469c      	mov	ip, r3
 80026bc:	002b      	movs	r3, r5
 80026be:	4662      	mov	r2, ip
 80026c0:	331c      	adds	r3, #28
 80026c2:	cb43      	ldmia	r3!, {r0, r1, r6}
 80026c4:	c243      	stmia	r2!, {r0, r1, r6}
 80026c6:	cb03      	ldmia	r3!, {r0, r1}
 80026c8:	c203      	stmia	r2!, {r0, r1}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80026ca:	0039      	movs	r1, r7
 80026cc:	4660      	mov	r0, ip
 80026ce:	f7fe fe4d 	bl	800136c <osThreadCreate>
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <main+0x1a4>)
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80026d4:	0022      	movs	r2, r4
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80026d6:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80026d8:	002b      	movs	r3, r5
 80026da:	3330      	adds	r3, #48	; 0x30
 80026dc:	cb43      	ldmia	r3!, {r0, r1, r6}
 80026de:	c243      	stmia	r2!, {r0, r1, r6}
 80026e0:	cb03      	ldmia	r3!, {r0, r1}
 80026e2:	c203      	stmia	r2!, {r0, r1}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80026e4:	0039      	movs	r1, r7
 80026e6:	0020      	movs	r0, r4
 80026e8:	f7fe fe40 	bl	800136c <osThreadCreate>
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <main+0x1a8>)
  osMessageQDef(myQueue01, 16, uint16_t);
 80026ee:	3544      	adds	r5, #68	; 0x44
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80026f0:	6018      	str	r0, [r3, #0]
  osMessageQDef(myQueue01, 16, uint16_t);
 80026f2:	a805      	add	r0, sp, #20
 80026f4:	0003      	movs	r3, r0
 80026f6:	cd06      	ldmia	r5!, {r1, r2}
 80026f8:	c306      	stmia	r3!, {r1, r2}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80026fa:	0039      	movs	r1, r7
 80026fc:	f7fe feae 	bl	800145c <osMessageCreate>
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <main+0x1ac>)
 8002702:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002704:	f7fe fe2d 	bl	8001362 <osKernelStart>
 8002708:	e7fe      	b.n	8002708 <main+0x174>
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	40021000 	.word	0x40021000
 8002710:	48000400 	.word	0x48000400
 8002714:	20000ec8 	.word	0x20000ec8
 8002718:	40013000 	.word	0x40013000
 800271c:	20000e70 	.word	0x20000e70
 8002720:	40005400 	.word	0x40005400
 8002724:	2000090e 	.word	0x2000090e
 8002728:	20000f70 	.word	0x20000f70
 800272c:	20000ec0 	.word	0x20000ec0
 8002730:	08003e3c 	.word	0x08003e3c
 8002734:	20000e6c 	.word	0x20000e6c
 8002738:	20000ebc 	.word	0x20000ebc
 800273c:	20000ec4 	.word	0x20000ec4
 8002740:	20000f2c 	.word	0x20000f2c

08002744 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002746:	6802      	ldr	r2, [r0, #0]
{
 8002748:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 800274a:	429a      	cmp	r2, r3
 800274c:	d101      	bne.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 800274e:	f7fd fd8b 	bl	8000268 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002752:	bd10      	pop	{r4, pc}
 8002754:	40012c00 	.word	0x40012c00

08002758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2001      	movs	r0, #1
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_MspInit+0x4c>)
 800275e:	6999      	ldr	r1, [r3, #24]
 8002760:	4301      	orrs	r1, r0
 8002762:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4002      	ands	r2, r0
 800276c:	9200      	str	r2, [sp, #0]
 800276e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002770:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002772:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	400b      	ands	r3, r1
 800277e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002780:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002784:	f7fd fd7e 	bl	8000284 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002788:	2002      	movs	r0, #2
 800278a:	2200      	movs	r2, #0
 800278c:	2103      	movs	r1, #3
 800278e:	4240      	negs	r0, r0
 8002790:	f7fd fd78 	bl	8000284 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8002794:	2001      	movs	r0, #1
 8002796:	2200      	movs	r2, #0
 8002798:	2103      	movs	r1, #3
 800279a:	4240      	negs	r0, r0
 800279c:	f7fd fd72 	bl	8000284 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a0:	bd07      	pop	{r0, r1, r2, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	40021000 	.word	0x40021000

080027a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_I2C_MspInit+0x3c>)
 80027ac:	6802      	ldr	r2, [r0, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d115      	bne.n	80027de <HAL_I2C_MspInit+0x36>
    /**I2C1 GPIO Configuration    
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b2:	2312      	movs	r3, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027b4:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027b8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ba:	3b11      	subs	r3, #17
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027bc:	480a      	ldr	r0, [pc, #40]	; (80027e8 <HAL_I2C_MspInit+0x40>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027be:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80027c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027c6:	f7fd fdbf 	bl	8000348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_I2C_MspInit+0x44>)
 80027ce:	0380      	lsls	r0, r0, #14
 80027d0:	69d1      	ldr	r1, [r2, #28]
 80027d2:	4301      	orrs	r1, r0
 80027d4:	61d1      	str	r1, [r2, #28]
 80027d6:	69d3      	ldr	r3, [r2, #28]
 80027d8:	4003      	ands	r3, r0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027de:	b007      	add	sp, #28
 80027e0:	bd00      	pop	{pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40005400 	.word	0x40005400
 80027e8:	48001400 	.word	0x48001400
 80027ec:	40021000 	.word	0x40021000

080027f0 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_SPI_MspInit+0x40>)
 80027f4:	6802      	ldr	r2, [r0, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d117      	bne.n	800282a <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027fa:	2080      	movs	r0, #128	; 0x80
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <HAL_SPI_MspInit+0x44>)
 80027fe:	0140      	lsls	r0, r0, #5
 8002800:	6991      	ldr	r1, [r2, #24]
 8002802:	4301      	orrs	r1, r0
 8002804:	6191      	str	r1, [r2, #24]
 8002806:	6993      	ldr	r3, [r2, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002808:	2203      	movs	r2, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800280a:	4003      	ands	r3, r0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002810:	23f0      	movs	r3, #240	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002814:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	3bee      	subs	r3, #238	; 0xee
 8002818:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	a901      	add	r1, sp, #4
 800281e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002822:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002824:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	f7fd fd8f 	bl	8000348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800282a:	b007      	add	sp, #28
 800282c:	bd00      	pop	{pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40013000 	.word	0x40013000
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b510      	push	{r4, lr}
 800283a:	0001      	movs	r1, r0
 800283c:	b086      	sub	sp, #24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 800283e:	2200      	movs	r2, #0
 8002840:	200d      	movs	r0, #13
 8002842:	f7fd fd1f 	bl	8000284 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8002846:	200d      	movs	r0, #13
 8002848:	f7fd fd4c 	bl	80002e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800284c:	2080      	movs	r0, #128	; 0x80
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_InitTick+0x68>)
 8002850:	0100      	lsls	r0, r0, #4
 8002852:	6991      	ldr	r1, [r2, #24]
 8002854:	4301      	orrs	r1, r0
 8002856:	6191      	str	r1, [r2, #24]
 8002858:	6993      	ldr	r3, [r2, #24]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800285a:	4669      	mov	r1, sp
  __HAL_RCC_TIM1_CLK_ENABLE();
 800285c:	4003      	ands	r3, r0
 800285e:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002860:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002862:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002864:	f7fe f9f2 	bl	8000c4c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002868:	f7fe f9e0 	bl	8000c2c <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800286c:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <HAL_InitTick+0x6c>)
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8002872:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_InitTick+0x78>)
 8002876:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002878:	f7fd fc5a 	bl	8000130 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800287c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800287e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002880:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002882:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8002884:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002888:	f7fe fd4e 	bl	8001328 <HAL_TIM_Base_Init>
 800288c:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800288e:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim1);
 8002894:	0020      	movs	r0, r4
 8002896:	f7fe fc4d 	bl	8001134 <HAL_TIM_Base_Start_IT>
}
 800289a:	b006      	add	sp, #24
 800289c:	bd10      	pop	{r4, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40021000 	.word	0x40021000
 80028a4:	20000f30 	.word	0x20000f30
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	000f4240 	.word	0x000f4240
 80028b0:	000003e7 	.word	0x000003e7

080028b4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028b4:	4770      	bx	lr

080028b6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80028b6:	e7fe      	b.n	80028b6 <HardFault_Handler>

080028b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80028b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80028ba:	f7fe fdd6 	bl	800146a <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028be:	bd10      	pop	{r4, pc}

080028c0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
* @brief This function handles TIM1 break, update, trigger and commutation interrupts.
*/
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80028c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028c2:	4802      	ldr	r0, [pc, #8]	; (80028cc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80028c4:	f7fe fc44 	bl	8001150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	20000f30 	.word	0x20000f30

080028d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80028d0:	2101      	movs	r1, #1
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80028d4:	4811      	ldr	r0, [pc, #68]	; (800291c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4002      	ands	r2, r0
 80028e0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	480e      	ldr	r0, [pc, #56]	; (8002920 <SystemInit+0x50>)
 80028e6:	4002      	ands	r2, r0
 80028e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	480d      	ldr	r0, [pc, #52]	; (8002924 <SystemInit+0x54>)
 80028ee:	4002      	ands	r2, r0
 80028f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	480c      	ldr	r0, [pc, #48]	; (8002928 <SystemInit+0x58>)
 80028f6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80028f8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80028fa:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80028fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fe:	4382      	bics	r2, r0
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8002902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002904:	4809      	ldr	r0, [pc, #36]	; (800292c <SystemInit+0x5c>)
 8002906:	4002      	ands	r2, r0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800290a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290c:	438a      	bics	r2, r1
 800290e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]

}
 8002914:	4770      	bx	lr
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	40021000 	.word	0x40021000
 800291c:	08ffb80c 	.word	0x08ffb80c
 8002920:	fef6ffff 	.word	0xfef6ffff
 8002924:	fffbffff 	.word	0xfffbffff
 8002928:	ffc0ffff 	.word	0xffc0ffff
 800292c:	fffffe2c 	.word	0xfffffe2c

08002930 <usb_tx_post>:
        return usbd_fail;
    }
}

void usb_tx_post(uint8_t* pBuf,uint8_t nLen)
{
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	000d      	movs	r5, r1
	volatile int32_t mysem;
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8002934:	2101      	movs	r1, #1
{
 8002936:	0006      	movs	r6, r0
	osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8002938:	4c07      	ldr	r4, [pc, #28]	; (8002958 <usb_tx_post+0x28>)
 800293a:	4249      	negs	r1, r1
 800293c:	6820      	ldr	r0, [r4, #0]
 800293e:	f7fe fd47 	bl	80013d0 <osSemaphoreWait>
	//copy buffer to fifo.
	memcpy(&fifo[0],pBuf,nLen);
 8002942:	002a      	movs	r2, r5
 8002944:	0031      	movs	r1, r6
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <usb_tx_post+0x2c>)
 8002948:	f000 fe2a 	bl	80035a0 <memcpy>
	fpos = nLen;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <usb_tx_post+0x30>)
	osSemaphoreRelease(myBinarySem01Handle);
 800294e:	6820      	ldr	r0, [r4, #0]
	fpos = nLen;
 8002950:	601d      	str	r5, [r3, #0]
	osSemaphoreRelease(myBinarySem01Handle);
 8002952:	f7fe fd63 	bl	800141c <osSemaphoreRelease>
}
 8002956:	bd70      	pop	{r4, r5, r6, pc}
 8002958:	20000ec0 	.word	0x20000ec0
 800295c:	20000fd4 	.word	0x20000fd4
 8002960:	20000dd4 	.word	0x20000dd4

08002964 <hid_getdesc>:

};



static usbd_respond hid_getdesc (usbd_ctlreq *req, void **address, uint16_t *length) {
 8002964:	b510      	push	{r4, lr}
    const uint8_t dtype = req->wValue >> 8;
 8002966:	8843      	ldrh	r3, [r0, #2]
    const uint8_t dnumber = req->wValue & 0xFF;
    const void* desc;
    uint16_t len = 0;
    switch (dtype) {
 8002968:	0a18      	lsrs	r0, r3, #8
 800296a:	2803      	cmp	r0, #3
 800296c:	d013      	beq.n	8002996 <hid_getdesc+0x32>
 800296e:	d805      	bhi.n	800297c <hid_getdesc+0x18>
 8002970:	2801      	cmp	r0, #1
 8002972:	d00d      	beq.n	8002990 <hid_getdesc+0x2c>
 8002974:	2802      	cmp	r0, #2
 8002976:	d016      	beq.n	80029a6 <hid_getdesc+0x42>
    	desc = gamepad_desc;
    	len = sizeof(gamepad_desc);
    	break;

    default:
        return usbd_fail;
 8002978:	2000      	movs	r0, #0
 800297a:	e008      	b.n	800298e <hid_getdesc+0x2a>
    switch (dtype) {
 800297c:	2821      	cmp	r0, #33	; 0x21
 800297e:	d008      	beq.n	8002992 <hid_getdesc+0x2e>
 8002980:	2822      	cmp	r0, #34	; 0x22
 8002982:	d1f9      	bne.n	8002978 <hid_getdesc+0x14>
    	len = sizeof(gamepad_desc);
 8002984:	2330      	movs	r3, #48	; 0x30
    	desc = gamepad_desc;
 8002986:	4c09      	ldr	r4, [pc, #36]	; (80029ac <hid_getdesc+0x48>)
    if (len == 0) {
        len = ((struct usb_header_descriptor*)desc)->bLength;
    }
    *address = (void*)desc;
    *length = len;
    return usbd_ack;
 8002988:	2001      	movs	r0, #1
    *address = (void*)desc;
 800298a:	600c      	str	r4, [r1, #0]
    *length = len;
 800298c:	8013      	strh	r3, [r2, #0]
};
 800298e:	bd10      	pop	{r4, pc}
        desc = &hiddevice_desc;
 8002990:	4c07      	ldr	r4, [pc, #28]	; (80029b0 <hid_getdesc+0x4c>)
        len = ((struct usb_header_descriptor*)desc)->bLength;
 8002992:	7823      	ldrb	r3, [r4, #0]
 8002994:	e7f8      	b.n	8002988 <hid_getdesc+0x24>
    const uint8_t dnumber = req->wValue & 0xFF;
 8002996:	b2db      	uxtb	r3, r3
            return usbd_fail;
 8002998:	2000      	movs	r0, #0
        if (dnumber < 3) {
 800299a:	2b02      	cmp	r3, #2
 800299c:	d8f7      	bhi.n	800298e <hid_getdesc+0x2a>
            desc = dtable[dnumber];
 800299e:	4805      	ldr	r0, [pc, #20]	; (80029b4 <hid_getdesc+0x50>)
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	581c      	ldr	r4, [r3, r0]
        break;
 80029a4:	e7f5      	b.n	8002992 <hid_getdesc+0x2e>
        desc = &config_desc;
 80029a6:	4c04      	ldr	r4, [pc, #16]	; (80029b8 <hid_getdesc+0x54>)
        len = sizeof(config_desc);
 80029a8:	2322      	movs	r3, #34	; 0x22
 80029aa:	e7ed      	b.n	8002988 <hid_getdesc+0x24>
 80029ac:	08003efc 	.word	0x08003efc
 80029b0:	08003f2c 	.word	0x08003f2c
 80029b4:	08003ef0 	.word	0x08003ef0
 80029b8:	08003ece 	.word	0x08003ece

080029bc <test_func>:


static void test_func(void)
{

}
 80029bc:	4770      	bx	lr
	...

080029c0 <hid_control>:
static usbd_respond hid_control(usbd_device *dev, usbd_ctlreq *req, usbd_rqc_callback *callback) {
 80029c0:	0003      	movs	r3, r0
    if (((USB_REQ_RECIPIENT | USB_REQ_TYPE) & req->bmRequestType) != (USB_REQ_INTERFACE | USB_REQ_CLASS)) return usbd_fail;
 80029c2:	2063      	movs	r0, #99	; 0x63
 80029c4:	780a      	ldrb	r2, [r1, #0]
static usbd_respond hid_control(usbd_device *dev, usbd_ctlreq *req, usbd_rqc_callback *callback) {
 80029c6:	b500      	push	{lr}
    if (((USB_REQ_RECIPIENT | USB_REQ_TYPE) & req->bmRequestType) != (USB_REQ_INTERFACE | USB_REQ_CLASS)) return usbd_fail;
 80029c8:	4002      	ands	r2, r0
 80029ca:	2000      	movs	r0, #0
 80029cc:	2a21      	cmp	r2, #33	; 0x21
 80029ce:	d10c      	bne.n	80029ea <hid_control+0x2a>
    switch (req->bRequest) {
 80029d0:	7848      	ldrb	r0, [r1, #1]
 80029d2:	3801      	subs	r0, #1
 80029d4:	280a      	cmp	r0, #10
 80029d6:	d807      	bhi.n	80029e8 <hid_control+0x28>
 80029d8:	f7fd fb96 	bl	8000108 <__gnu_thumb1_case_uqi>
 80029dc:	060e0813 	.word	0x060e0813
 80029e0:	06060606 	.word	0x06060606
 80029e4:	1013      	.short	0x1013
 80029e6:	15          	.byte	0x15
 80029e7:	00          	.byte	0x00
        return usbd_fail;
 80029e8:	2000      	movs	r0, #0
}
 80029ea:	bd00      	pop	{pc}
    	dev->status.data_ptr = &idle_rate;
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <hid_control+0x4c>)
    	dev->status.data_count = 1;
 80029ee:	2001      	movs	r0, #1
    	dev->status.data_ptr = &protocol_version;
 80029f0:	659a      	str	r2, [r3, #88]	; 0x58
    	dev->status.data_count = 1;
 80029f2:	335c      	adds	r3, #92	; 0x5c
 80029f4:	8018      	strh	r0, [r3, #0]
 80029f6:	e7f8      	b.n	80029ea <hid_control+0x2a>
    	dev->status.data_ptr = &protocol_version;
 80029f8:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <hid_control+0x50>)
 80029fa:	e7f8      	b.n	80029ee <hid_control+0x2e>
    	idle_rate = req->data;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <hid_control+0x4c>)
 80029fe:	3108      	adds	r1, #8
    	protocol_version = req->data;
 8002a00:	7019      	strb	r1, [r3, #0]
    	return usbd_ack;
 8002a02:	2001      	movs	r0, #1
 8002a04:	e7f1      	b.n	80029ea <hid_control+0x2a>
    	protocol_version = req->data;
 8002a06:	3108      	adds	r1, #8
 8002a08:	4b01      	ldr	r3, [pc, #4]	; (8002a10 <hid_control+0x50>)
 8002a0a:	e7f9      	b.n	8002a00 <hid_control+0x40>
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	20000dd8 	.word	0x20000dd8

08002a14 <cdc_setconf>:


static usbd_respond cdc_setconf (usbd_device *dev, uint8_t cfg) {
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	0005      	movs	r5, r0
 8002a18:	1e0c      	subs	r4, r1, #0
    switch (cfg) {
 8002a1a:	d003      	beq.n	8002a24 <cdc_setconf+0x10>
 8002a1c:	2901      	cmp	r1, #1
 8002a1e:	d008      	beq.n	8002a32 <cdc_setconf+0x1e>
        usbd_ep_write(dev,HID_RPT_EP,0,0);
//        usbd_reg_endpoint(dev, CDC_TXD_EP, cdc_txonly);
//        usbd_ep_write(dev, CDC_TXD_EP, 0, 0);
        return usbd_ack;
    default:
        return usbd_fail;
 8002a20:	2000      	movs	r0, #0
 8002a22:	e005      	b.n	8002a30 <cdc_setconf+0x1c>
    dev->driver->ep_deconfig(ep);
 8002a24:	6803      	ldr	r3, [r0, #0]
 8002a26:	2081      	movs	r0, #129	; 0x81
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4798      	blx	r3
    dev->endpoint[ep & 0x07] = callback;
 8002a2c:	63ac      	str	r4, [r5, #56]	; 0x38
        return usbd_ack;
 8002a2e:	2001      	movs	r0, #1
    }
}
 8002a30:	bd70      	pop	{r4, r5, r6, pc}
    return dev->driver->ep_config(ep, eptype, epsize);
 8002a32:	6803      	ldr	r3, [r0, #0]
 8002a34:	2208      	movs	r2, #8
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2103      	movs	r1, #3
 8002a3a:	2081      	movs	r0, #129	; 0x81
 8002a3c:	4798      	blx	r3
    return dev->driver->ep_write(ep, buf, blen);
 8002a3e:	2200      	movs	r2, #0
    dev->endpoint[ep & 0x07] = callback;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <cdc_setconf+0x3c>)
    return dev->driver->ep_write(ep, buf, blen);
 8002a42:	0011      	movs	r1, r2
    dev->endpoint[ep & 0x07] = callback;
 8002a44:	63ab      	str	r3, [r5, #56]	; 0x38
    return dev->driver->ep_write(ep, buf, blen);
 8002a46:	682b      	ldr	r3, [r5, #0]
 8002a48:	2081      	movs	r0, #129	; 0x81
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	4798      	blx	r3
 8002a4e:	e7ee      	b.n	8002a2e <cdc_setconf+0x1a>
 8002a50:	080029bd 	.word	0x080029bd

08002a54 <hid_init_usbd>:
    dev->driver = drv;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <hid_init_usbd+0x2c>)
 8002a56:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <hid_init_usbd+0x30>)
    dev->status.ep0size = ep0size;
 8002a58:	2108      	movs	r1, #8
    dev->driver = drv;
 8002a5a:	601a      	str	r2, [r3, #0]
    dev->status.ep0size = ep0size;
 8002a5c:	001a      	movs	r2, r3
 8002a5e:	3260      	adds	r2, #96	; 0x60
 8002a60:	7011      	strb	r1, [r2, #0]
    dev->status.data_ptr = buffer;
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <hid_init_usbd+0x34>)
    dev->status.data_maxsize = bsize - __builtin_offsetof(usbd_ctlreq, data);
 8002a64:	3170      	adds	r1, #112	; 0x70
    dev->status.data_ptr = buffer;
 8002a66:	659a      	str	r2, [r3, #88]	; 0x58
    dev->status.data_buf = buffer;
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
    dev->status.data_maxsize = bsize - __builtin_offsetof(usbd_ctlreq, data);
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	325e      	adds	r2, #94	; 0x5e
 8002a6e:	8011      	strh	r1, [r2, #0]
    dev->config_callback = callback;
 8002a70:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <hid_init_usbd+0x38>)
 8002a72:	60da      	str	r2, [r3, #12]
    dev->control_callback = callback;
 8002a74:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <hid_init_usbd+0x3c>)
 8002a76:	605a      	str	r2, [r3, #4]
    dev->descriptor_callback = callback;
 8002a78:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <hid_init_usbd+0x40>)
 8002a7a:	611a      	str	r2, [r3, #16]
void hid_init_usbd(void) {
    usbd_init(&udev, &usbd_hw, CDC_EP0_SIZE, ubuf, sizeof(ubuf));
    usbd_reg_config(&udev, cdc_setconf);
    usbd_reg_control(&udev, hid_control);
    usbd_reg_descr(&udev, hid_getdesc);
}
 8002a7c:	4770      	bx	lr
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	20000f70 	.word	0x20000f70
 8002a84:	08003f8c 	.word	0x08003f8c
 8002a88:	20000ddc 	.word	0x20000ddc
 8002a8c:	08002a15 	.word	0x08002a15
 8002a90:	080029c1 	.word	0x080029c1
 8002a94:	08002965 	.word	0x08002965

08002a98 <USB_IRQHandler>:

#define USB_HANDLER     USB_IRQHandler
#define USB_NVIC_IRQ    USB_IRQn


void USB_HANDLER(void) {
 8002a98:	b510      	push	{r4, lr}
    usbd_poll(&udev);
 8002a9a:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <USB_IRQHandler+0xc>)
 8002a9c:	f000 f9ee 	bl	8002e7c <usbd_poll>
}
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	20000f70 	.word	0x20000f70

08002aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002aa8:	4813      	ldr	r0, [pc, #76]	; (8002af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aaa:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002aac:	2004      	movs	r0, #4
    LDR R1, [R0]
 8002aae:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002ab0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002ab2:	221f      	movs	r2, #31
    CMP R1, R2
 8002ab4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002ab6:	d105      	bne.n	8002ac4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002ab8:	4810      	ldr	r0, [pc, #64]	; (8002afc <LoopForever+0x6>)
    LDR R1,=0x00000001
 8002aba:	2101      	movs	r1, #1
    STR R1, [R0]
 8002abc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002abe:	4810      	ldr	r0, [pc, #64]	; (8002b00 <LoopForever+0xa>)
    LDR R1,=0x00000000
 8002ac0:	2100      	movs	r1, #0
    STR R1, [R0]
 8002ac2:	6001      	str	r1, [r0, #0]

08002ac4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ac4:	480f      	ldr	r0, [pc, #60]	; (8002b04 <LoopForever+0xe>)
  ldr r1, =_edata
 8002ac6:	4910      	ldr	r1, [pc, #64]	; (8002b08 <LoopForever+0x12>)
  ldr r2, =_sidata
 8002ac8:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <LoopForever+0x16>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002acc:	e002      	b.n	8002ad4 <LoopCopyDataInit>

08002ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad2:	3304      	adds	r3, #4

08002ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad8:	d3f9      	bcc.n	8002ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ada:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <LoopForever+0x1a>)
  ldr r4, =_ebss
 8002adc:	4c0d      	ldr	r4, [pc, #52]	; (8002b14 <LoopForever+0x1e>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae0:	e001      	b.n	8002ae6 <LoopFillZerobss>

08002ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae4:	3204      	adds	r2, #4

08002ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae8:	d3fb      	bcc.n	8002ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002aea:	f7ff fef1 	bl	80028d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002aee:	f000 fd33 	bl	8003558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002af2:	f7ff fd4f 	bl	8002594 <main>

08002af6 <LoopForever>:

LoopForever:
    b LoopForever
 8002af6:	e7fe      	b.n	8002af6 <LoopForever>
  ldr   r0, =_estack
 8002af8:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8002afc:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8002b00:	40010000 	.word	0x40010000
  ldr r0, =_sdata
 8002b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002b0c:	08003ffc 	.word	0x08003ffc
  ldr r2, =_sbss
 8002b10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002b14:	200010d8 	.word	0x200010d8

08002b18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC1_IRQHandler>

08002b1a <usbd_set_address>:
/** \brief Callback that sets USB device address
 * \param dev pointer to usb device
 * \param req pointer to usb control request data
 * \return none
 */
static void usbd_set_address (usbd_device *dev, usbd_ctlreq *req) {
 8002b1a:	b570      	push	{r4, r5, r6, lr}
 8002b1c:	0004      	movs	r4, r0
 8002b1e:	000d      	movs	r5, r1
    dev->driver->setaddr(req->wValue);
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	7888      	ldrb	r0, [r1, #2]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4798      	blx	r3
    dev->status.device_state = (req->wValue) ? usbd_state_addressed : usbd_state_default;
 8002b28:	886b      	ldrh	r3, [r5, #2]
 8002b2a:	3462      	adds	r4, #98	; 0x62
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	4193      	sbcs	r3, r2
 8002b30:	3302      	adds	r3, #2
 8002b32:	7023      	strb	r3, [r4, #0]
}
 8002b34:	bd70      	pop	{r4, r5, r6, pc}

08002b36 <usbd_process_callback>:
/** \brief Control transfer completion callback processing
 * \param dev pointer to the usb device
 * \return none
 */
static void usbd_process_callback (usbd_device *dev) {
    if (dev->complete_callback) {
 8002b36:	6883      	ldr	r3, [r0, #8]
static void usbd_process_callback (usbd_device *dev) {
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	0004      	movs	r4, r0
    if (dev->complete_callback) {
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <usbd_process_callback+0x12>
        dev->complete_callback(dev, dev->status.data_buf);
 8002b40:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002b42:	4798      	blx	r3
        dev->complete_callback = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60a3      	str	r3, [r4, #8]
    }
}
 8002b48:	bd10      	pop	{r4, pc}

08002b4a <usbd_stall_pid>:

/** \brief Control endpoint stall (STALL PID)
 * \param dev pointer to usb device
 * \param ep endpoint number
 */
static void usbd_stall_pid(usbd_device *dev, uint8_t ep) {
 8002b4a:	b570      	push	{r4, r5, r6, lr}
 8002b4c:	0004      	movs	r4, r0
    dev->driver->ep_setstall(ep & 0x7F, 1);
 8002b4e:	207f      	movs	r0, #127	; 0x7f
 8002b50:	6823      	ldr	r3, [r4, #0]
static void usbd_stall_pid(usbd_device *dev, uint8_t ep) {
 8002b52:	000d      	movs	r5, r1
    dev->driver->ep_setstall(ep & 0x7F, 1);
 8002b54:	4008      	ands	r0, r1
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4798      	blx	r3
    dev->driver->ep_setstall(ep | 0x80, 1);
 8002b5c:	2080      	movs	r0, #128	; 0x80
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	4328      	orrs	r0, r5
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	2101      	movs	r1, #1
 8002b66:	4798      	blx	r3
    dev->status.control_state = usbd_ctl_idle;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	3463      	adds	r4, #99	; 0x63
 8002b6c:	7023      	strb	r3, [r4, #0]
}
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}

08002b70 <usbd_process_evt>:
/** \brief General event processing callback
 * \param dev usb device
 * \param evt usb event
 * \param ep active endpoint
 */
static void usbd_process_evt(usbd_device *dev, uint8_t evt, uint8_t ep) {
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	0004      	movs	r4, r0
 8002b74:	000d      	movs	r5, r1
 8002b76:	0016      	movs	r6, r2
    switch (evt) {
 8002b78:	2900      	cmp	r1, #0
 8002b7a:	d00c      	beq.n	8002b96 <usbd_process_evt+0x26>
 8002b7c:	1f0b      	subs	r3, r1, #4
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d81c      	bhi.n	8002bbc <usbd_process_evt+0x4c>
        usbd_process_reset(dev);
        break;
    case usbd_evt_eprx:
    case usbd_evt_eptx:
    case usbd_evt_epsetup:
        if (dev->endpoint[ep & 0x07]) dev->endpoint[ep & 0x07](dev, evt, ep);
 8002b82:	2307      	movs	r3, #7
 8002b84:	4013      	ands	r3, r2
 8002b86:	330c      	adds	r3, #12
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	18c3      	adds	r3, r0, r3
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d014      	beq.n	8002bbc <usbd_process_evt+0x4c>
 8002b92:	4798      	blx	r3
 8002b94:	e012      	b.n	8002bbc <usbd_process_evt+0x4c>
    dev->status.device_state = usbd_state_default;
 8002b96:	0003      	movs	r3, r0
 8002b98:	2202      	movs	r2, #2
 8002b9a:	3362      	adds	r3, #98	; 0x62
 8002b9c:	701a      	strb	r2, [r3, #0]
    dev->status.control_state = usbd_ctl_idle;
 8002b9e:	7059      	strb	r1, [r3, #1]
    dev->status.device_cfg = 0;
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	7019      	strb	r1, [r3, #0]
    dev->driver->ep_config(0, USB_EPTYPE_CONTROL, dev->status.ep0size);
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	6803      	ldr	r3, [r0, #0]
 8002baa:	0008      	movs	r0, r1
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	4798      	blx	r3
    dev->endpoint[0] = usbd_process_ep0;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <usbd_process_evt+0x64>)
    dev->driver->setaddr(0);
 8002bb2:	0028      	movs	r0, r5
    dev->endpoint[0] = usbd_process_ep0;
 8002bb4:	6363      	str	r3, [r4, #52]	; 0x34
    dev->driver->setaddr(0);
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4798      	blx	r3
        break;
    default:
        break;
    }
    if (dev->events[evt]) dev->events[evt](dev, evt, ep);
 8002bbc:	1d2b      	adds	r3, r5, #4
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	18e3      	adds	r3, r4, r3
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <usbd_process_evt+0x60>
 8002bc8:	0032      	movs	r2, r6
 8002bca:	0029      	movs	r1, r5
 8002bcc:	0020      	movs	r0, r4
 8002bce:	4798      	blx	r3
}
 8002bd0:	bd70      	pop	{r4, r5, r6, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	08002c4d 	.word	0x08002c4d

08002bd8 <usbd_process_eptx>:
static void usbd_process_eptx(usbd_device *dev, uint8_t ep) {
 8002bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (dev->status.control_state) {
 8002bda:	0006      	movs	r6, r0
static void usbd_process_eptx(usbd_device *dev, uint8_t ep) {
 8002bdc:	9101      	str	r1, [sp, #4]
    switch (dev->status.control_state) {
 8002bde:	3663      	adds	r6, #99	; 0x63
static void usbd_process_eptx(usbd_device *dev, uint8_t ep) {
 8002be0:	0004      	movs	r4, r0
    switch (dev->status.control_state) {
 8002be2:	7830      	ldrb	r0, [r6, #0]
 8002be4:	3802      	subs	r0, #2
 8002be6:	2803      	cmp	r0, #3
 8002be8:	d827      	bhi.n	8002c3a <usbd_process_eptx+0x62>
 8002bea:	f7fd fa8d 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002bee:	0202      	.short	0x0202
 8002bf0:	2927      	.short	0x2927
        _t = _MIN(dev->status.data_count, dev->status.ep0size);
 8002bf2:	0023      	movs	r3, r4
 8002bf4:	0027      	movs	r7, r4
 8002bf6:	3360      	adds	r3, #96	; 0x60
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	375c      	adds	r7, #92	; 0x5c
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	883b      	ldrh	r3, [r7, #0]
 8002c00:	1c15      	adds	r5, r2, #0
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d900      	bls.n	8002c08 <usbd_process_eptx+0x30>
 8002c06:	1c1d      	adds	r5, r3, #0
        dev->driver->ep_write(ep, dev->status.data_ptr, _t);
 8002c08:	6823      	ldr	r3, [r4, #0]
        _t = _MIN(dev->status.data_count, dev->status.ep0size);
 8002c0a:	b2ad      	uxth	r5, r5
        dev->driver->ep_write(ep, dev->status.data_ptr, _t);
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	002a      	movs	r2, r5
 8002c10:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002c12:	9801      	ldr	r0, [sp, #4]
 8002c14:	4798      	blx	r3
        dev->status.data_ptr += _t;
 8002c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c18:	195b      	adds	r3, r3, r5
 8002c1a:	65a3      	str	r3, [r4, #88]	; 0x58
        dev->status.data_count -= _t;
 8002c1c:	883b      	ldrh	r3, [r7, #0]
 8002c1e:	1b5b      	subs	r3, r3, r5
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	803b      	strh	r3, [r7, #0]
        if (0 != dev->status.data_count) break;
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d108      	bne.n	8002c3a <usbd_process_eptx+0x62>
        if ( usbd_ctl_txdata == dev->status.control_state || _t != dev->status.ep0size ) {
 8002c28:	7833      	ldrb	r3, [r6, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d003      	beq.n	8002c36 <usbd_process_eptx+0x5e>
 8002c2e:	9b00      	ldr	r3, [sp, #0]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	42ab      	cmp	r3, r5
 8002c34:	d001      	beq.n	8002c3a <usbd_process_eptx+0x62>
            dev->status.control_state = usbd_ctl_lastdata; /* no ZLP required */
 8002c36:	2304      	movs	r3, #4
        dev->status.control_state = usbd_ctl_statusout;
 8002c38:	7033      	strb	r3, [r6, #0]
}
 8002c3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        dev->status.control_state = usbd_ctl_statusout;
 8002c3c:	2306      	movs	r3, #6
 8002c3e:	e7fb      	b.n	8002c38 <usbd_process_eptx+0x60>
        dev->status.control_state = usbd_ctl_idle;
 8002c40:	2300      	movs	r3, #0
        return usbd_process_callback(dev);
 8002c42:	0020      	movs	r0, r4
        dev->status.control_state = usbd_ctl_idle;
 8002c44:	7033      	strb	r3, [r6, #0]
        return usbd_process_callback(dev);
 8002c46:	f7ff ff76 	bl	8002b36 <usbd_process_callback>
 8002c4a:	e7f6      	b.n	8002c3a <usbd_process_eptx+0x62>

08002c4c <usbd_process_ep0>:
static void usbd_process_ep0 (usbd_device *dev, uint8_t event, uint8_t ep) {
 8002c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c4e:	0004      	movs	r4, r0
 8002c50:	0016      	movs	r6, r2
    switch (event) {
 8002c52:	2905      	cmp	r1, #5
 8002c54:	d00a      	beq.n	8002c6c <usbd_process_ep0+0x20>
 8002c56:	2906      	cmp	r1, #6
 8002c58:	d003      	beq.n	8002c62 <usbd_process_ep0+0x16>
 8002c5a:	2904      	cmp	r1, #4
 8002c5c:	d145      	bne.n	8002cea <usbd_process_ep0+0x9e>
        return usbd_process_eptx(dev, ep);
 8002c5e:	0011      	movs	r1, r2
 8002c60:	e0ad      	b.n	8002dbe <usbd_process_ep0+0x172>
        dev->status.control_state = usbd_ctl_idle;
 8002c62:	0003      	movs	r3, r0
 8002c64:	2200      	movs	r2, #0
 8002c66:	3363      	adds	r3, #99	; 0x63
 8002c68:	701a      	strb	r2, [r3, #0]
        dev->complete_callback = 0;
 8002c6a:	6082      	str	r2, [r0, #8]
    switch (dev->status.control_state) {
 8002c6c:	0027      	movs	r7, r4
 8002c6e:	3763      	adds	r7, #99	; 0x63
 8002c70:	783b      	ldrb	r3, [r7, #0]
    usbd_ctlreq *const req = dev->status.data_buf;
 8002c72:	6d65      	ldr	r5, [r4, #84]	; 0x54
    switch (dev->status.control_state) {
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d026      	beq.n	8002cc6 <usbd_process_ep0+0x7a>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <usbd_process_ep0+0x3e>
 8002c7c:	2b06      	cmp	r3, #6
 8002c7e:	d035      	beq.n	8002cec <usbd_process_ep0+0xa0>
        return usbd_stall_pid(dev, ep);
 8002c80:	0031      	movs	r1, r6
 8002c82:	0020      	movs	r0, r4
 8002c84:	f7ff ff61 	bl	8002b4a <usbd_stall_pid>
 8002c88:	e02f      	b.n	8002cea <usbd_process_ep0+0x9e>
        if (0x08 !=  dev->driver->ep_read(ep, req, dev->status.data_maxsize)) {
 8002c8a:	0023      	movs	r3, r4
 8002c8c:	335e      	adds	r3, #94	; 0x5e
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	0029      	movs	r1, r5
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	0030      	movs	r0, r6
 8002c9a:	4798      	blx	r3
 8002c9c:	2808      	cmp	r0, #8
 8002c9e:	d1ef      	bne.n	8002c80 <usbd_process_ep0+0x34>
        dev->status.data_ptr = req->data;
 8002ca0:	002b      	movs	r3, r5
        dev->status.data_count = req->wLength;
 8002ca2:	0022      	movs	r2, r4
        dev->status.data_ptr = req->data;
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	65a3      	str	r3, [r4, #88]	; 0x58
        dev->status.data_count = req->wLength;
 8002ca8:	88eb      	ldrh	r3, [r5, #6]
 8002caa:	325c      	adds	r2, #92	; 0x5c
 8002cac:	8013      	strh	r3, [r2, #0]
        if ((req->bmRequestType & USB_REQ_DEVTOHOST) || (0 == req->wLength)) break;
 8002cae:	782a      	ldrb	r2, [r5, #0]
 8002cb0:	2a7f      	cmp	r2, #127	; 0x7f
 8002cb2:	d829      	bhi.n	8002d08 <usbd_process_ep0+0xbc>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d027      	beq.n	8002d08 <usbd_process_ep0+0xbc>
        if (req->wLength > dev->status.data_maxsize) {
 8002cb8:	9a01      	ldr	r2, [sp, #4]
 8002cba:	8812      	ldrh	r2, [r2, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d3df      	bcc.n	8002c80 <usbd_process_ep0+0x34>
        dev->status.control_state = usbd_ctl_rxdata;
 8002cc0:	2301      	movs	r3, #1
            dev->status.control_state = usbd_ctl_statusin;
 8002cc2:	703b      	strb	r3, [r7, #0]
 8002cc4:	e011      	b.n	8002cea <usbd_process_ep0+0x9e>
        _t = dev->driver->ep_read(ep, dev->status.data_ptr, dev->status.data_count);
 8002cc6:	0027      	movs	r7, r4
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	375c      	adds	r7, #92	; 0x5c
 8002ccc:	883a      	ldrh	r2, [r7, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002cd2:	0030      	movs	r0, r6
 8002cd4:	4798      	blx	r3
        if (dev->status.data_count < _t) {
 8002cd6:	883b      	ldrh	r3, [r7, #0]
        _t = dev->driver->ep_read(ep, dev->status.data_ptr, dev->status.data_count);
 8002cd8:	b282      	uxth	r2, r0
        if (dev->status.data_count < _t) {
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d8d0      	bhi.n	8002c80 <usbd_process_ep0+0x34>
        } else if (dev->status.data_count != _t) {
 8002cde:	d013      	beq.n	8002d08 <usbd_process_ep0+0xbc>
            dev->status.data_count -= _t;
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	803b      	strh	r3, [r7, #0]
            dev->status.data_ptr += _t;
 8002ce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ce6:	1898      	adds	r0, r3, r2
 8002ce8:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8002cea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        dev->driver->ep_read(ep, dev->status.data_ptr, dev->status.data_maxsize);
 8002cec:	0023      	movs	r3, r4
 8002cee:	335e      	adds	r3, #94	; 0x5e
 8002cf0:	881a      	ldrh	r2, [r3, #0]
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	0030      	movs	r0, r6
 8002cfa:	4798      	blx	r3
        dev->status.control_state = usbd_ctl_idle;
 8002cfc:	2300      	movs	r3, #0
        return usbd_process_callback(dev);
 8002cfe:	0020      	movs	r0, r4
        dev->status.control_state = usbd_ctl_idle;
 8002d00:	703b      	strb	r3, [r7, #0]
        return usbd_process_callback(dev);
 8002d02:	f7ff ff18 	bl	8002b36 <usbd_process_callback>
 8002d06:	e7f0      	b.n	8002cea <usbd_process_ep0+0x9e>
    dev->status.data_ptr = req->data;
 8002d08:	002f      	movs	r7, r5
    dev->status.data_count = /*req->wLength;*/dev->status.data_maxsize;
 8002d0a:	0023      	movs	r3, r4
    dev->status.data_ptr = req->data;
 8002d0c:	3708      	adds	r7, #8
    dev->status.data_count = /*req->wLength;*/dev->status.data_maxsize;
 8002d0e:	335c      	adds	r3, #92	; 0x5c
 8002d10:	9301      	str	r3, [sp, #4]
    dev->status.data_ptr = req->data;
 8002d12:	65a7      	str	r7, [r4, #88]	; 0x58
    dev->status.data_count = /*req->wLength;*/dev->status.data_maxsize;
 8002d14:	3302      	adds	r3, #2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	9a01      	ldr	r2, [sp, #4]
 8002d1a:	8013      	strh	r3, [r2, #0]
    if (dev->control_callback) {
 8002d1c:	6863      	ldr	r3, [r4, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d119      	bne.n	8002d56 <usbd_process_ep0+0x10a>
    switch (req->bmRequestType & (USB_REQ_TYPE | USB_REQ_RECIPIENT)) {
 8002d22:	2263      	movs	r2, #99	; 0x63
 8002d24:	782b      	ldrb	r3, [r5, #0]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d100      	bne.n	8002d2e <usbd_process_ep0+0xe2>
 8002d2c:	e086      	b.n	8002e3c <usbd_process_ep0+0x1f0>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d021      	beq.n	8002d76 <usbd_process_ep0+0x12a>
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d1a4      	bne.n	8002c80 <usbd_process_ep0+0x34>
    switch (req->bRequest) {
 8002d36:	786f      	ldrb	r7, [r5, #1]
 8002d38:	2f01      	cmp	r7, #1
 8002d3a:	d100      	bne.n	8002d3e <usbd_process_ep0+0xf2>
 8002d3c:	e082      	b.n	8002e44 <usbd_process_ep0+0x1f8>
 8002d3e:	2f00      	cmp	r7, #0
 8002d40:	d100      	bne.n	8002d44 <usbd_process_ep0+0xf8>
 8002d42:	e084      	b.n	8002e4e <usbd_process_ep0+0x202>
 8002d44:	2f03      	cmp	r7, #3
 8002d46:	d000      	beq.n	8002d4a <usbd_process_ep0+0xfe>
 8002d48:	e79a      	b.n	8002c80 <usbd_process_ep0+0x34>
        dev->driver->ep_setstall(req->wIndex, 1);
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	7928      	ldrb	r0, [r5, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
        dev->driver->ep_setstall(req->wIndex, 0);
 8002d52:	4798      	blx	r3
 8002d54:	e023      	b.n	8002d9e <usbd_process_ep0+0x152>
        usbd_respond r = dev->control_callback(dev, req, &(dev->complete_callback));
 8002d56:	0022      	movs	r2, r4
 8002d58:	0029      	movs	r1, r5
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	0020      	movs	r0, r4
 8002d5e:	4798      	blx	r3
        if (r != usbd_fail) return r;
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d0de      	beq.n	8002d22 <usbd_process_ep0+0xd6>
    switch (usbd_process_request(dev, req)) {
 8002d64:	2801      	cmp	r0, #1
 8002d66:	d01a      	beq.n	8002d9e <usbd_process_ep0+0x152>
 8002d68:	2802      	cmp	r0, #2
 8002d6a:	d000      	beq.n	8002d6e <usbd_process_ep0+0x122>
 8002d6c:	e788      	b.n	8002c80 <usbd_process_ep0+0x34>
        dev->status.control_state = usbd_ctl_statusin;
 8002d6e:	2305      	movs	r3, #5
 8002d70:	3463      	adds	r4, #99	; 0x63
 8002d72:	7023      	strb	r3, [r4, #0]
 8002d74:	e7b9      	b.n	8002cea <usbd_process_ep0+0x9e>
    switch (req->bRequest) {
 8002d76:	7868      	ldrb	r0, [r5, #1]
 8002d78:	2809      	cmp	r0, #9
 8002d7a:	d900      	bls.n	8002d7e <usbd_process_ep0+0x132>
 8002d7c:	e780      	b.n	8002c80 <usbd_process_ep0+0x34>
 8002d7e:	f7fd f9cd 	bl	800011c <__gnu_thumb1_case_shi>
 8002d82:	0037      	.short	0x0037
 8002d84:	ff7fff7f 	.word	0xff7fff7f
 8002d88:	ff7fff7f 	.word	0xff7fff7f
 8002d8c:	0022003b 	.word	0x0022003b
 8002d90:	000aff7f 	.word	0x000aff7f
 8002d94:	0048      	.short	0x0048
        req->data[0] = dev->status.device_cfg;
 8002d96:	0023      	movs	r3, r4
 8002d98:	3361      	adds	r3, #97	; 0x61
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	722b      	strb	r3, [r5, #8]
 8002d9e:	0027      	movs	r7, r4
        if (req->bmRequestType & USB_REQ_DEVTOHOST) {
 8002da0:	782b      	ldrb	r3, [r5, #0]
 8002da2:	3763      	adds	r7, #99	; 0x63
 8002da4:	2b7f      	cmp	r3, #127	; 0x7f
 8002da6:	d95b      	bls.n	8002e60 <usbd_process_ep0+0x214>
            if (dev->status.data_count >= req->wLength) {
 8002da8:	9a01      	ldr	r2, [sp, #4]
 8002daa:	88eb      	ldrh	r3, [r5, #6]
 8002dac:	8812      	ldrh	r2, [r2, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d354      	bcc.n	8002e5c <usbd_process_ep0+0x210>
                dev->status.data_count = req->wLength;
 8002db2:	9a01      	ldr	r2, [sp, #4]
 8002db4:	8013      	strh	r3, [r2, #0]
                dev->status.control_state = usbd_ctl_txdata;
 8002db6:	2302      	movs	r3, #2
            return usbd_process_eptx(dev, ep | 0x80);
 8002db8:	2180      	movs	r1, #128	; 0x80
                dev->status.control_state = usbd_ctl_ztxdata;
 8002dba:	703b      	strb	r3, [r7, #0]
            return usbd_process_eptx(dev, ep | 0x80);
 8002dbc:	4331      	orrs	r1, r6
        return usbd_process_eptx(dev, ep);
 8002dbe:	0020      	movs	r0, r4
 8002dc0:	f7ff ff0a 	bl	8002bd8 <usbd_process_eptx>
 8002dc4:	e791      	b.n	8002cea <usbd_process_ep0+0x9e>
        if (req->wValue == ((USB_DTYPE_STRING << 8) | INTSERIALNO_DESCRIPTOR )) {
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <usbd_process_ep0+0x228>)
 8002dc8:	886a      	ldrh	r2, [r5, #2]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d106      	bne.n	8002ddc <usbd_process_ep0+0x190>
            dev->status.data_count = dev->driver->get_serialno_desc(req->data);
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	0038      	movs	r0, r7
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4798      	blx	r3
 8002dd6:	9b01      	ldr	r3, [sp, #4]
 8002dd8:	8018      	strh	r0, [r3, #0]
 8002dda:	e7e0      	b.n	8002d9e <usbd_process_ep0+0x152>
            if (dev->descriptor_callback) {
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d100      	bne.n	8002de4 <usbd_process_ep0+0x198>
 8002de2:	e74d      	b.n	8002c80 <usbd_process_ep0+0x34>
                return dev->descriptor_callback(req, &(dev->status.data_ptr), &(dev->status.data_count));
 8002de4:	0021      	movs	r1, r4
 8002de6:	9a01      	ldr	r2, [sp, #4]
 8002de8:	3158      	adds	r1, #88	; 0x58
 8002dea:	0028      	movs	r0, r5
 8002dec:	4798      	blx	r3
 8002dee:	e7b9      	b.n	8002d64 <usbd_process_ep0+0x118>
        req->data[0] = 0;
 8002df0:	2300      	movs	r3, #0
        req->data[0] = 0;
 8002df2:	722b      	strb	r3, [r5, #8]
        req->data[1] = 0;
 8002df4:	726b      	strb	r3, [r5, #9]
 8002df6:	e7d2      	b.n	8002d9e <usbd_process_ep0+0x152>
}

/**\brief Retrieves status and capabilities.
 * \return current HW status, enumeration speed and capabilities \ref USBD_HW_CAPS */
inline static uint32_t usbd_getinfo(usbd_device *dev) {
    return dev->driver->getinfo();
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4798      	blx	r3
        if (usbd_getinfo(dev) & USBD_HW_ADDRFST) {
 8002dfe:	07c3      	lsls	r3, r0, #31
 8002e00:	d504      	bpl.n	8002e0c <usbd_process_ep0+0x1c0>
            usbd_set_address(dev, req);
 8002e02:	0029      	movs	r1, r5
 8002e04:	0020      	movs	r0, r4
 8002e06:	f7ff fe88 	bl	8002b1a <usbd_set_address>
 8002e0a:	e7c8      	b.n	8002d9e <usbd_process_ep0+0x152>
            dev->complete_callback = usbd_set_address;
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <usbd_process_ep0+0x22c>)
 8002e0e:	60a3      	str	r3, [r4, #8]
 8002e10:	e7c5      	b.n	8002d9e <usbd_process_ep0+0x152>
    if (dev->config_callback) {
 8002e12:	68e3      	ldr	r3, [r4, #12]
        return usbd_configure(dev, req->wValue);
 8002e14:	78af      	ldrb	r7, [r5, #2]
    if (dev->config_callback) {
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d100      	bne.n	8002e1c <usbd_process_ep0+0x1d0>
 8002e1a:	e731      	b.n	8002c80 <usbd_process_ep0+0x34>
        if (dev->config_callback(dev, config) == usbd_ack) {
 8002e1c:	0039      	movs	r1, r7
 8002e1e:	0020      	movs	r0, r4
 8002e20:	4798      	blx	r3
 8002e22:	2801      	cmp	r0, #1
 8002e24:	d000      	beq.n	8002e28 <usbd_process_ep0+0x1dc>
 8002e26:	e72b      	b.n	8002c80 <usbd_process_ep0+0x34>
            dev->status.device_cfg = config;
 8002e28:	0023      	movs	r3, r4
 8002e2a:	3361      	adds	r3, #97	; 0x61
 8002e2c:	701f      	strb	r7, [r3, #0]
            dev->status.device_state = (config) ? usbd_state_configured : usbd_state_addressed;
 8002e2e:	1e7b      	subs	r3, r7, #1
 8002e30:	419f      	sbcs	r7, r3
 8002e32:	0023      	movs	r3, r4
 8002e34:	3703      	adds	r7, #3
 8002e36:	3362      	adds	r3, #98	; 0x62
 8002e38:	701f      	strb	r7, [r3, #0]
 8002e3a:	e7b0      	b.n	8002d9e <usbd_process_ep0+0x152>
    switch (req->bRequest) {
 8002e3c:	786b      	ldrb	r3, [r5, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0d7      	beq.n	8002df2 <usbd_process_ep0+0x1a6>
 8002e42:	e71d      	b.n	8002c80 <usbd_process_ep0+0x34>
        dev->driver->ep_setstall(req->wIndex, 0);
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	7928      	ldrb	r0, [r5, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	e781      	b.n	8002d52 <usbd_process_ep0+0x106>
        req->data[0] = dev->driver->ep_isstalled(req->wIndex) ? 1 : 0;
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	7928      	ldrb	r0, [r5, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	4798      	blx	r3
        req->data[1] = 0;
 8002e56:	726f      	strb	r7, [r5, #9]
        req->data[0] = dev->driver->ep_isstalled(req->wIndex) ? 1 : 0;
 8002e58:	7228      	strb	r0, [r5, #8]
 8002e5a:	e7a0      	b.n	8002d9e <usbd_process_ep0+0x152>
                dev->status.control_state = usbd_ctl_ztxdata;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e7ab      	b.n	8002db8 <usbd_process_ep0+0x16c>
            dev->driver->ep_write(ep | 0x80, 0, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2080      	movs	r0, #128	; 0x80
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	4330      	orrs	r0, r6
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	0011      	movs	r1, r2
 8002e6c:	4798      	blx	r3
            dev->status.control_state = usbd_ctl_statusin;
 8002e6e:	2305      	movs	r3, #5
 8002e70:	e727      	b.n	8002cc2 <usbd_process_ep0+0x76>
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	000003fe 	.word	0x000003fe
 8002e78:	08002b1b 	.word	0x08002b1b

08002e7c <usbd_poll>:

 __attribute__((externally_visible)) void usbd_poll(usbd_device *dev) {
 8002e7c:	b510      	push	{r4, lr}
    return dev->driver->poll(dev, usbd_process_evt);
 8002e7e:	6803      	ldr	r3, [r0, #0]
 8002e80:	4901      	ldr	r1, [pc, #4]	; (8002e88 <usbd_poll+0xc>)
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	4798      	blx	r3
}
 8002e86:	bd10      	pop	{r4, pc}
 8002e88:	08002b71 	.word	0x08002b71

08002e8c <get_next_pma>:
 * \param sz uint16_t Requested buffer size.
 * \return uint16_t Buffer address for PMA table.
 * \note PMA buffers grown from top to bottom like stack.
 */
static uint16_t get_next_pma(uint16_t sz) {
    unsigned _result = USB_PMASIZE;
 8002e8c:	2380      	movs	r3, #128	; 0x80
static uint16_t get_next_pma(uint16_t sz) {
 8002e8e:	b530      	push	{r4, r5, lr}
    for (int i = 0; i < 8; i++) {
 8002e90:	2200      	movs	r2, #0
static uint16_t get_next_pma(uint16_t sz) {
 8002e92:	0005      	movs	r5, r0
    unsigned _result = USB_PMASIZE;
 8002e94:	00db      	lsls	r3, r3, #3
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8002e96:	480d      	ldr	r0, [pc, #52]	; (8002ecc <get_next_pma+0x40>)
 8002e98:	00d1      	lsls	r1, r2, #3
 8002e9a:	1809      	adds	r1, r1, r0
        pma_table *tbl = EPT(i);
        if ((tbl->rx.addr) && (tbl->rx.addr < _result)) _result = tbl->rx.addr;
 8002e9c:	888c      	ldrh	r4, [r1, #4]
 8002e9e:	2c00      	cmp	r4, #0
 8002ea0:	d002      	beq.n	8002ea8 <get_next_pma+0x1c>
 8002ea2:	42a3      	cmp	r3, r4
 8002ea4:	d900      	bls.n	8002ea8 <get_next_pma+0x1c>
 8002ea6:	0023      	movs	r3, r4
        if ((tbl->tx.addr) && (tbl->tx.addr < _result)) _result = tbl->tx.addr;
 8002ea8:	8809      	ldrh	r1, [r1, #0]
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	d002      	beq.n	8002eb4 <get_next_pma+0x28>
 8002eae:	428b      	cmp	r3, r1
 8002eb0:	d900      	bls.n	8002eb4 <get_next_pma+0x28>
 8002eb2:	000b      	movs	r3, r1
    for (int i = 0; i < 8; i++) {
 8002eb4:	3201      	adds	r2, #1
 8002eb6:	2a08      	cmp	r2, #8
 8002eb8:	d1ed      	bne.n	8002e96 <get_next_pma+0xa>
    }
    return (_result < (0x020 + sz)) ? 0 : (_result - sz);
 8002eba:	002a      	movs	r2, r5
 8002ebc:	3220      	adds	r2, #32
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d301      	bcc.n	8002ec8 <get_next_pma+0x3c>
 8002ec4:	1b5b      	subs	r3, r3, r5
 8002ec6:	b298      	uxth	r0, r3
}
 8002ec8:	bd30      	pop	{r4, r5, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	40006000 	.word	0x40006000

08002ed0 <ep_setstall>:
    return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8002ed0:	2307      	movs	r3, #7
    if (!(RCC->APB1ENR & RCC_APB1ENR_USBEN)) return STATUS_VAL(0);
    if (USB->BCDR & USB_BCDR_DPPU) return STATUS_VAL(USBD_HW_ENABLED | USBD_HW_SPEED_FS);
    return STATUS_VAL(USBD_HW_ENABLED);
}

void ep_setstall(uint8_t ep, bool stall) {
 8002ed2:	b530      	push	{r4, r5, lr}
    volatile uint16_t *reg = EPR(ep);
    /* ISOCHRONOUS endpoint can't be stalled or unstalled */
    if (USB_EP_ISOCHRONOUS == (*reg & USB_EP_T_FIELD)) return;
 8002ed4:	25c0      	movs	r5, #192	; 0xc0
 8002ed6:	2480      	movs	r4, #128	; 0x80
    return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8002ed8:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <ep_setstall+0xa0>)
 8002eda:	4003      	ands	r3, r0
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	189b      	adds	r3, r3, r2
    if (USB_EP_ISOCHRONOUS == (*reg & USB_EP_T_FIELD)) return;
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	00ed      	lsls	r5, r5, #3
 8002ee4:	00e4      	lsls	r4, r4, #3
 8002ee6:	402a      	ands	r2, r5
 8002ee8:	42a2      	cmp	r2, r4
 8002eea:	d00e      	beq.n	8002f0a <ep_setstall+0x3a>
    /* If it's an IN endpoint */
    if (ep & 0x80) {
 8002eec:	b240      	sxtb	r0, r0
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	da1d      	bge.n	8002f2e <ep_setstall+0x5e>
        /* DISABLED endpoint can't be stalled or unstalled */
        if (USB_EP_TX_DIS == (*reg & USB_EPTX_STAT)) return;
 8002ef2:	2230      	movs	r2, #48	; 0x30
 8002ef4:	8818      	ldrh	r0, [r3, #0]
 8002ef6:	4210      	tst	r0, r2
 8002ef8:	d007      	beq.n	8002f0a <ep_setstall+0x3a>
        if (stall) {
 8002efa:	2900      	cmp	r1, #0
 8002efc:	d006      	beq.n	8002f0c <ep_setstall+0x3c>
            EP_TX_STALL(reg);
 8002efe:	8819      	ldrh	r1, [r3, #0]
 8002f00:	3a20      	subs	r2, #32
 8002f02:	404a      	eors	r2, r1
 8002f04:	491b      	ldr	r1, [pc, #108]	; (8002f74 <ep_setstall+0xa4>)
            }
        }
    } else {
        if (USB_EP_RX_DIS == (*reg & USB_EPRX_STAT)) return;
        if (stall) {
            EP_RX_STALL(reg);
 8002f06:	400a      	ands	r2, r1
            if ((USB_EP_KIND | USB_EP_BULK) == (*reg & (USB_EP_T_FIELD | USB_EP_KIND))) {
                /* set endpoint to VALID, clear DTOG_RX, set SWBUF_RX */
                EP_DRX_UNSTALL(reg);
            } else {
                /* set endpoint to VALID and clear DTOG_RX */
                EP_RX_UNSTALL(reg);
 8002f08:	801a      	strh	r2, [r3, #0]
            }
        }
    }
}
 8002f0a:	bd30      	pop	{r4, r5, pc}
            if ((USB_EP_KIND | USB_EP_BULK) == (*reg & (USB_EP_T_FIELD | USB_EP_KIND))) {
 8002f0c:	24e0      	movs	r4, #224	; 0xe0
 8002f0e:	2080      	movs	r0, #128	; 0x80
 8002f10:	8819      	ldrh	r1, [r3, #0]
 8002f12:	00e4      	lsls	r4, r4, #3
 8002f14:	0040      	lsls	r0, r0, #1
 8002f16:	4021      	ands	r1, r4
 8002f18:	4281      	cmp	r1, r0
 8002f1a:	d103      	bne.n	8002f24 <ep_setstall+0x54>
                EP_DTX_UNSTALL(reg);
 8002f1c:	8819      	ldrh	r1, [r3, #0]
 8002f1e:	404a      	eors	r2, r1
 8002f20:	4915      	ldr	r1, [pc, #84]	; (8002f78 <ep_setstall+0xa8>)
 8002f22:	e7f0      	b.n	8002f06 <ep_setstall+0x36>
                EP_TX_UNSTALL(reg);
 8002f24:	2220      	movs	r2, #32
 8002f26:	8819      	ldrh	r1, [r3, #0]
 8002f28:	404a      	eors	r2, r1
 8002f2a:	4914      	ldr	r1, [pc, #80]	; (8002f7c <ep_setstall+0xac>)
 8002f2c:	e7eb      	b.n	8002f06 <ep_setstall+0x36>
        if (USB_EP_RX_DIS == (*reg & USB_EPRX_STAT)) return;
 8002f2e:	22c0      	movs	r2, #192	; 0xc0
 8002f30:	8818      	ldrh	r0, [r3, #0]
 8002f32:	0192      	lsls	r2, r2, #6
 8002f34:	4210      	tst	r0, r2
 8002f36:	d0e8      	beq.n	8002f0a <ep_setstall+0x3a>
        if (stall) {
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d005      	beq.n	8002f48 <ep_setstall+0x78>
            EP_RX_STALL(reg);
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	8819      	ldrh	r1, [r3, #0]
 8002f40:	0152      	lsls	r2, r2, #5
 8002f42:	404a      	eors	r2, r1
 8002f44:	490e      	ldr	r1, [pc, #56]	; (8002f80 <ep_setstall+0xb0>)
 8002f46:	e7de      	b.n	8002f06 <ep_setstall+0x36>
            if ((USB_EP_KIND | USB_EP_BULK) == (*reg & (USB_EP_T_FIELD | USB_EP_KIND))) {
 8002f48:	24e0      	movs	r4, #224	; 0xe0
 8002f4a:	2080      	movs	r0, #128	; 0x80
 8002f4c:	8819      	ldrh	r1, [r3, #0]
 8002f4e:	00e4      	lsls	r4, r4, #3
 8002f50:	0040      	lsls	r0, r0, #1
 8002f52:	4021      	ands	r1, r4
 8002f54:	4281      	cmp	r1, r0
 8002f56:	d106      	bne.n	8002f66 <ep_setstall+0x96>
                EP_DRX_UNSTALL(reg);
 8002f58:	22c1      	movs	r2, #193	; 0xc1
 8002f5a:	8819      	ldrh	r1, [r3, #0]
 8002f5c:	0192      	lsls	r2, r2, #6
 8002f5e:	404a      	eors	r2, r1
 8002f60:	2130      	movs	r1, #48	; 0x30
                EP_RX_UNSTALL(reg);
 8002f62:	438a      	bics	r2, r1
 8002f64:	e7d0      	b.n	8002f08 <ep_setstall+0x38>
 8002f66:	8819      	ldrh	r1, [r3, #0]
 8002f68:	404a      	eors	r2, r1
 8002f6a:	2170      	movs	r1, #112	; 0x70
 8002f6c:	e7f9      	b.n	8002f62 <ep_setstall+0x92>
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	40005c00 	.word	0x40005c00
 8002f74:	ffff8fbf 	.word	0xffff8fbf
 8002f78:	ffffcfff 	.word	0xffffcfff
 8002f7c:	ffff8fff 	.word	0xffff8fff
 8002f80:	ffffbf8f 	.word	0xffffbf8f

08002f84 <connect>:
    }
}

uint8_t connect(bool connect) {
    uint8_t res;
    USB->BCDR = USB_BCDR_BCDEN | USB_BCDR_DCDEN;
 8002f84:	2303      	movs	r3, #3
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <connect+0x3c>)
 8002f88:	8013      	strh	r3, [r2, #0]
    if (USB->BCDR & USB_BCDR_DCDET) {
 8002f8a:	8811      	ldrh	r1, [r2, #0]
            }
        } else {
            res = usbd_lane_sdp;
        }
    } else {
        res = usbd_lane_dsc;
 8002f8c:	3b02      	subs	r3, #2
    if (USB->BCDR & USB_BCDR_DCDET) {
 8002f8e:	06c9      	lsls	r1, r1, #27
 8002f90:	d50f      	bpl.n	8002fb2 <connect+0x2e>
        USB->BCDR = USB_BCDR_BCDEN | USB_BCDR_PDEN;
 8002f92:	3304      	adds	r3, #4
 8002f94:	8013      	strh	r3, [r2, #0]
        if (USB->BCDR & USB_BCDR_PS2DET) {
 8002f96:	8811      	ldrh	r1, [r2, #0]
            res = usbd_lane_unk;
 8002f98:	2300      	movs	r3, #0
        if (USB->BCDR & USB_BCDR_PS2DET) {
 8002f9a:	0609      	lsls	r1, r1, #24
 8002f9c:	d409      	bmi.n	8002fb2 <connect+0x2e>
        } else if (USB->BCDR & USB_BCDR_PDET) {
 8002f9e:	8811      	ldrh	r1, [r2, #0]
            res = usbd_lane_sdp;
 8002fa0:	3302      	adds	r3, #2
        } else if (USB->BCDR & USB_BCDR_PDET) {
 8002fa2:	0689      	lsls	r1, r1, #26
 8002fa4:	d505      	bpl.n	8002fb2 <connect+0x2e>
            USB->BCDR = USB_BCDR_BCDEN | USB_BCDR_SDEN;
 8002fa6:	3307      	adds	r3, #7
 8002fa8:	8013      	strh	r3, [r2, #0]
            if (USB->BCDR & USB_BCDR_SDET) {
 8002faa:	8813      	ldrh	r3, [r2, #0]
 8002fac:	065b      	lsls	r3, r3, #25
                res = usbd_lane_cdp;
 8002fae:	0fdb      	lsrs	r3, r3, #31
 8002fb0:	3303      	adds	r3, #3
    }
    USB->BCDR = (connect) ? USB_BCDR_DPPU : 0;
 8002fb2:	1e41      	subs	r1, r0, #1
 8002fb4:	4188      	sbcs	r0, r1
 8002fb6:	03c0      	lsls	r0, r0, #15
 8002fb8:	8010      	strh	r0, [r2, #0]
    return res;
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	4770      	bx	lr
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	40005c58 	.word	0x40005c58

08002fc4 <setaddr>:

void setaddr (uint8_t addr) {
    USB->DADDR = USB_DADDR_EF | addr;
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	4318      	orrs	r0, r3
 8002fc8:	4b01      	ldr	r3, [pc, #4]	; (8002fd0 <setaddr+0xc>)
 8002fca:	8018      	strh	r0, [r3, #0]
}
 8002fcc:	4770      	bx	lr
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	40005c4c 	.word	0x40005c4c

08002fd4 <ep_config>:

bool ep_config(uint8_t ep, uint8_t eptype, uint16_t epsize) {
 8002fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fd6:	0015      	movs	r5, r2
 8002fd8:	2207      	movs	r2, #7
 8002fda:	000f      	movs	r7, r1
 8002fdc:	4002      	ands	r2, r0
    return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8002fde:	4942      	ldr	r1, [pc, #264]	; (80030e8 <ep_config+0x114>)
 8002fe0:	0094      	lsls	r4, r2, #2
 8002fe2:	1864      	adds	r4, r4, r1
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8002fe4:	4941      	ldr	r1, [pc, #260]	; (80030ec <ep_config+0x118>)
 8002fe6:	00d6      	lsls	r6, r2, #3
bool ep_config(uint8_t ep, uint8_t eptype, uint16_t epsize) {
 8002fe8:	0003      	movs	r3, r0
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8002fea:	1876      	adds	r6, r6, r1
    volatile uint16_t *reg = EPR(ep);
    pma_table *tbl = EPT(ep);
    /* epsize should be 16-bit aligned */
    if (epsize & 0x01) epsize++;
 8002fec:	07e9      	lsls	r1, r5, #31
 8002fee:	d501      	bpl.n	8002ff4 <ep_config+0x20>
 8002ff0:	3501      	adds	r5, #1
 8002ff2:	b2ad      	uxth	r5, r5

    switch (eptype) {
 8002ff4:	2f06      	cmp	r7, #6
 8002ff6:	d81e      	bhi.n	8003036 <ep_config+0x62>
 8002ff8:	0038      	movs	r0, r7
 8002ffa:	f7fd f885 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002ffe:	0804      	.short	0x0804
 8003000:	1c1c1c0b 	.word	0x1c1c1c0b
 8003004:	19          	.byte	0x19
 8003005:	00          	.byte	0x00
    case USB_EPTYPE_CONTROL:
        *reg = USB_EP_CONTROL | (ep & 0x07);
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	0089      	lsls	r1, r1, #2
        break;
    case USB_EPTYPE_BULK | USB_EPTYPE_DBLBUF:
        *reg = USB_EP_BULK | USB_EP_KIND | (ep & 0x07);
        break;
    default:
        *reg = USB_EP_INTERRUPT | (ep & 0x07);
 800300a:	430a      	orrs	r2, r1
 800300c:	e003      	b.n	8003016 <ep_config+0x42>
        *reg = USB_EP_ISOCHRONOUS | (ep & 0x07);
 800300e:	2180      	movs	r1, #128	; 0x80
        *reg = USB_EP_INTERRUPT | (ep & 0x07);
 8003010:	00c9      	lsls	r1, r1, #3
 8003012:	e7fa      	b.n	800300a <ep_config+0x36>
        *reg = USB_EP_BULK | (ep & 0x07);
 8003014:	b292      	uxth	r2, r2
        break;
    }
    /* if it TX or CONTROL endpoint */
    if ((ep & 0x80) || (eptype == USB_EPTYPE_CONTROL)) {
 8003016:	b25b      	sxtb	r3, r3
        *reg = USB_EP_INTERRUPT | (ep & 0x07);
 8003018:	8022      	strh	r2, [r4, #0]
    if ((ep & 0x80) || (eptype == USB_EPTYPE_CONTROL)) {
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0c      	blt.n	800303a <ep_config+0x66>
 8003020:	2f00      	cmp	r7, #0
 8003022:	d00a      	beq.n	800303a <ep_config+0x66>
        }
    }
    if (!(ep & 0x80)) {
        uint16_t _rxcnt;
        uint16_t _pma;
        if (epsize > 62) {
 8003024:	2d3e      	cmp	r5, #62	; 0x3e
 8003026:	d82e      	bhi.n	8003086 <ep_config+0xb2>
                epsize -= 0x20;
            }
            _rxcnt = 0x8000 | (epsize << 5);
            epsize += 0x20;
        } else {
            _rxcnt = epsize << 9;
 8003028:	026b      	lsls	r3, r5, #9
 800302a:	b29b      	uxth	r3, r3
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	e036      	b.n	800309e <ep_config+0xca>
        *reg = USB_EP_BULK | USB_EP_KIND | (ep & 0x07);
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	0049      	lsls	r1, r1, #1
 8003034:	e7e9      	b.n	800300a <ep_config+0x36>
        *reg = USB_EP_INTERRUPT | (ep & 0x07);
 8003036:	21c0      	movs	r1, #192	; 0xc0
 8003038:	e7ea      	b.n	8003010 <ep_config+0x3c>
        _pma = get_next_pma(epsize);
 800303a:	0028      	movs	r0, r5
 800303c:	f7ff ff26 	bl	8002e8c <get_next_pma>
        if (_pma == 0) return false;
 8003040:	2800      	cmp	r0, #0
 8003042:	d101      	bne.n	8003048 <ep_config+0x74>
 8003044:	2000      	movs	r0, #0
        } else {
            EP_RX_UNSTALL(reg);
        }
    }
    return true;
}
 8003046:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        tbl->tx.cnt  = 0;
 8003048:	2300      	movs	r3, #0
        tbl->tx.addr = _pma;
 800304a:	8030      	strh	r0, [r6, #0]
        tbl->tx.cnt  = 0;
 800304c:	8073      	strh	r3, [r6, #2]
        if ((eptype == USB_EPTYPE_ISOCHRONUS) ||
 800304e:	2f01      	cmp	r7, #1
 8003050:	d001      	beq.n	8003056 <ep_config+0x82>
 8003052:	2f06      	cmp	r7, #6
 8003054:	d112      	bne.n	800307c <ep_config+0xa8>
            _pma = get_next_pma(epsize);
 8003056:	0028      	movs	r0, r5
 8003058:	f7ff ff18 	bl	8002e8c <get_next_pma>
            if (_pma == 0) return false;
 800305c:	2800      	cmp	r0, #0
 800305e:	d0f1      	beq.n	8003044 <ep_config+0x70>
            tbl->tx1.cnt  = 0;
 8003060:	2300      	movs	r3, #0
            tbl->tx1.addr = _pma;
 8003062:	80b0      	strh	r0, [r6, #4]
            tbl->tx1.cnt  = 0;
 8003064:	80f3      	strh	r3, [r6, #6]
            EP_DTX_UNSTALL(reg);
 8003066:	8822      	ldrh	r2, [r4, #0]
 8003068:	3330      	adds	r3, #48	; 0x30
 800306a:	4053      	eors	r3, r2
 800306c:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <ep_config+0x11c>)
            EP_TX_UNSTALL(reg);
 800306e:	4013      	ands	r3, r2
 8003070:	8023      	strh	r3, [r4, #0]
    if (!(ep & 0x80)) {
 8003072:	9b01      	ldr	r3, [sp, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	dad5      	bge.n	8003024 <ep_config+0x50>
    return true;
 8003078:	2001      	movs	r0, #1
 800307a:	e7e4      	b.n	8003046 <ep_config+0x72>
            EP_TX_UNSTALL(reg);
 800307c:	2320      	movs	r3, #32
 800307e:	8822      	ldrh	r2, [r4, #0]
 8003080:	4053      	eors	r3, r2
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <ep_config+0x120>)
 8003084:	e7f3      	b.n	800306e <ep_config+0x9a>
 8003086:	231f      	movs	r3, #31
 8003088:	402b      	ands	r3, r5
            if (epsize & 0x1F) {
 800308a:	d101      	bne.n	8003090 <ep_config+0xbc>
                epsize -= 0x20;
 800308c:	3d20      	subs	r5, #32
 800308e:	b2ab      	uxth	r3, r5
            _rxcnt = 0x8000 | (epsize << 5);
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <ep_config+0x124>)
 8003092:	0159      	lsls	r1, r3, #5
 8003094:	430a      	orrs	r2, r1
 8003096:	b292      	uxth	r2, r2
            epsize += 0x20;
 8003098:	3320      	adds	r3, #32
            _rxcnt = 0x8000 | (epsize << 5);
 800309a:	9201      	str	r2, [sp, #4]
            epsize += 0x20;
 800309c:	b29d      	uxth	r5, r3
        _pma = get_next_pma(epsize);
 800309e:	0028      	movs	r0, r5
 80030a0:	f7ff fef4 	bl	8002e8c <get_next_pma>
        if (_pma == 0) return false;
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d0cd      	beq.n	8003044 <ep_config+0x70>
        tbl->rx.cnt = _rxcnt;
 80030a8:	466b      	mov	r3, sp
 80030aa:	889b      	ldrh	r3, [r3, #4]
        tbl->rx.addr = _pma;
 80030ac:	80b0      	strh	r0, [r6, #4]
        tbl->rx.cnt = _rxcnt;
 80030ae:	80f3      	strh	r3, [r6, #6]
        if ((eptype == USB_EPTYPE_ISOCHRONUS) ||
 80030b0:	2f01      	cmp	r7, #1
 80030b2:	d001      	beq.n	80030b8 <ep_config+0xe4>
 80030b4:	2f06      	cmp	r7, #6
 80030b6:	d110      	bne.n	80030da <ep_config+0x106>
            _pma = get_next_pma(epsize);
 80030b8:	0028      	movs	r0, r5
 80030ba:	f7ff fee7 	bl	8002e8c <get_next_pma>
            if (_pma == 0) return false;
 80030be:	2800      	cmp	r0, #0
 80030c0:	d0c0      	beq.n	8003044 <ep_config+0x70>
            tbl->rx0.cnt  = _rxcnt;
 80030c2:	466b      	mov	r3, sp
 80030c4:	889b      	ldrh	r3, [r3, #4]
            tbl->rx0.addr = _pma;
 80030c6:	8030      	strh	r0, [r6, #0]
            tbl->rx0.cnt  = _rxcnt;
 80030c8:	8073      	strh	r3, [r6, #2]
            EP_DRX_UNSTALL(reg);
 80030ca:	23c1      	movs	r3, #193	; 0xc1
 80030cc:	8822      	ldrh	r2, [r4, #0]
 80030ce:	019b      	lsls	r3, r3, #6
 80030d0:	4053      	eors	r3, r2
 80030d2:	2230      	movs	r2, #48	; 0x30
            EP_RX_UNSTALL(reg);
 80030d4:	4393      	bics	r3, r2
 80030d6:	8023      	strh	r3, [r4, #0]
 80030d8:	e7ce      	b.n	8003078 <ep_config+0xa4>
 80030da:	23c0      	movs	r3, #192	; 0xc0
 80030dc:	8822      	ldrh	r2, [r4, #0]
 80030de:	019b      	lsls	r3, r3, #6
 80030e0:	4053      	eors	r3, r2
 80030e2:	2270      	movs	r2, #112	; 0x70
 80030e4:	e7f6      	b.n	80030d4 <ep_config+0x100>
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	40005c00 	.word	0x40005c00
 80030ec:	40006000 	.word	0x40006000
 80030f0:	ffffcfff 	.word	0xffffcfff
 80030f4:	ffff8fff 	.word	0xffff8fff
 80030f8:	ffff8000 	.word	0xffff8000

080030fc <ep_deconfig>:
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 80030fc:	2307      	movs	r3, #7
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <ep_deconfig+0x24>)
 8003100:	4018      	ands	r0, r3
 8003102:	00c3      	lsls	r3, r0, #3
 8003104:	189b      	adds	r3, r3, r2
    return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <ep_deconfig+0x28>)
 8003108:	0080      	lsls	r0, r0, #2
 800310a:	1880      	adds	r0, r0, r2

void ep_deconfig(uint8_t ep) {
    pma_table *ept = EPT(ep);
    *EPR(ep) &= ~USB_EPREG_MASK;
 800310c:	8802      	ldrh	r2, [r0, #0]
 800310e:	4906      	ldr	r1, [pc, #24]	; (8003128 <ep_deconfig+0x2c>)
 8003110:	400a      	ands	r2, r1
 8003112:	8002      	strh	r2, [r0, #0]
    ept->rx.addr = 0;
 8003114:	2200      	movs	r2, #0
 8003116:	809a      	strh	r2, [r3, #4]
    ept->rx.cnt  = 0;
 8003118:	80da      	strh	r2, [r3, #6]
    ept->tx.addr = 0;
 800311a:	801a      	strh	r2, [r3, #0]
    ept->tx.cnt  = 0;
 800311c:	805a      	strh	r2, [r3, #2]
}
 800311e:	4770      	bx	lr
 8003120:	40006000 	.word	0x40006000
 8003124:	40005c00 	.word	0x40005c00
 8003128:	00007070 	.word	0x00007070

0800312c <pma_read>:

static uint16_t pma_read (uint8_t *buf, uint16_t blen, pma_rec *rx) {
 800312c:	b530      	push	{r4, r5, lr}
    uint16_t *pma = (void*)(USB_PMAADDR + rx->addr);
    uint16_t rxcnt = rx->cnt & 0x03FF;
 800312e:	8853      	ldrh	r3, [r2, #2]
    uint16_t *pma = (void*)(USB_PMAADDR + rx->addr);
 8003130:	8814      	ldrh	r4, [r2, #0]
    rx->cnt &= ~0x3FF;
 8003132:	0a9d      	lsrs	r5, r3, #10
    uint16_t rxcnt = rx->cnt & 0x03FF;
 8003134:	059b      	lsls	r3, r3, #22
    rx->cnt &= ~0x3FF;
 8003136:	02ad      	lsls	r5, r5, #10
    uint16_t rxcnt = rx->cnt & 0x03FF;
 8003138:	0d9b      	lsrs	r3, r3, #22
    rx->cnt &= ~0x3FF;
 800313a:	8055      	strh	r5, [r2, #2]
 800313c:	1c1a      	adds	r2, r3, #0
 800313e:	428b      	cmp	r3, r1
 8003140:	d900      	bls.n	8003144 <pma_read+0x18>
 8003142:	1c0a      	adds	r2, r1, #0
 8003144:	b292      	uxth	r2, r2

    if (blen > rxcnt) {
        blen = rxcnt;
    }
    rxcnt = blen;
    while (blen) {
 8003146:	0005      	movs	r5, r0
 8003148:	0013      	movs	r3, r2
        uint16_t _t = *pma;
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <pma_read+0x40>)
 800314c:	1864      	adds	r4, r4, r1
    while (blen) {
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <pma_read+0x2a>
            pma++;
            blen--;
        } else break;
    }
    return rxcnt;
}
 8003152:	0010      	movs	r0, r2
 8003154:	bd30      	pop	{r4, r5, pc}
        uint16_t _t = *pma;
 8003156:	1a29      	subs	r1, r5, r0
 8003158:	5b09      	ldrh	r1, [r1, r4]
        *buf++ = _t & 0xFF;
 800315a:	7029      	strb	r1, [r5, #0]
        if (--blen) {
 800315c:	2b01      	cmp	r3, #1
 800315e:	d0f8      	beq.n	8003152 <pma_read+0x26>
            *buf++ = _t >> 8;
 8003160:	0a09      	lsrs	r1, r1, #8
            blen--;
 8003162:	3b02      	subs	r3, #2
            *buf++ = _t >> 8;
 8003164:	7069      	strb	r1, [r5, #1]
            blen--;
 8003166:	b29b      	uxth	r3, r3
 8003168:	3502      	adds	r5, #2
 800316a:	e7f0      	b.n	800314e <pma_read+0x22>
 800316c:	40006000 	.word	0x40006000

08003170 <ep_read>:

int32_t ep_read(uint8_t ep, void *buf, uint16_t blen) {
 8003170:	b570      	push	{r4, r5, r6, lr}
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8003172:	2307      	movs	r3, #7
int32_t ep_read(uint8_t ep, void *buf, uint16_t blen) {
 8003174:	0004      	movs	r4, r0
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8003176:	401c      	ands	r4, r3
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <ep_read+0x98>)
 800317a:	00e5      	lsls	r5, r4, #3
int32_t ep_read(uint8_t ep, void *buf, uint16_t blen) {
 800317c:	0008      	movs	r0, r1
 800317e:	0011      	movs	r1, r2
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8003180:	18ea      	adds	r2, r5, r3
    return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <ep_read+0x9c>)
 8003184:	00a4      	lsls	r4, r4, #2
 8003186:	18e4      	adds	r4, r4, r3
    pma_table *tbl = EPT(ep);
    volatile uint16_t *reg = EPR(ep);
    switch (*reg & (USB_EPRX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {
 8003188:	23dc      	movs	r3, #220	; 0xdc
 800318a:	8826      	ldrh	r6, [r4, #0]
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	4033      	ands	r3, r6
 8003190:	2698      	movs	r6, #152	; 0x98
 8003192:	01b6      	lsls	r6, r6, #6
 8003194:	42b3      	cmp	r3, r6
 8003196:	d008      	beq.n	80031aa <ep_read+0x3a>
 8003198:	d812      	bhi.n	80031c0 <ep_read+0x50>
 800319a:	2580      	movs	r5, #128	; 0x80
 800319c:	01ad      	lsls	r5, r5, #6
 800319e:	42ab      	cmp	r3, r5
 80031a0:	d003      	beq.n	80031aa <ep_read+0x3a>
 80031a2:	2588      	movs	r5, #136	; 0x88
 80031a4:	01ad      	lsls	r5, r5, #6
 80031a6:	42ab      	cmp	r3, r5
 80031a8:	d112      	bne.n	80031d0 <ep_read+0x60>
    /* regular endpoint */
    case (USB_EP_RX_NAK | USB_EP_BULK):
    case (USB_EP_RX_NAK | USB_EP_CONTROL):
    case (USB_EP_RX_NAK | USB_EP_INTERRUPT):
        {
        int32_t res = pma_read(buf, blen, &(tbl->rx));
 80031aa:	3204      	adds	r2, #4
 80031ac:	f7ff ffbe 	bl	800312c <pma_read>
        /* setting endpoint to VALID state */
        EP_RX_VALID(reg);
 80031b0:	23c0      	movs	r3, #192	; 0xc0
 80031b2:	8822      	ldrh	r2, [r4, #0]
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	4053      	eors	r3, r2
 80031b8:	4a15      	ldr	r2, [pc, #84]	; (8003210 <ep_read+0xa0>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	8023      	strh	r3, [r4, #0]
        return res;
 80031be:	e01c      	b.n	80031fa <ep_read+0x8a>
    switch (*reg & (USB_EPRX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {
 80031c0:	26c4      	movs	r6, #196	; 0xc4
 80031c2:	01b6      	lsls	r6, r6, #6
 80031c4:	42b3      	cmp	r3, r6
 80031c6:	d006      	beq.n	80031d6 <ep_read+0x66>
 80031c8:	26d0      	movs	r6, #208	; 0xd0
 80031ca:	01b6      	lsls	r6, r6, #6
 80031cc:	42b3      	cmp	r3, r6
 80031ce:	d015      	beq.n	80031fc <ep_read+0x8c>
        }
    /* invalid or not ready */
    default:
        return -1;
 80031d0:	2001      	movs	r0, #1
 80031d2:	4240      	negs	r0, r0
 80031d4:	e011      	b.n	80031fa <ep_read+0x8a>
        switch (*reg & (USB_EP_DTOG_RX | USB_EP_SWBUF_RX)) {
 80031d6:	8823      	ldrh	r3, [r4, #0]
 80031d8:	4d0e      	ldr	r5, [pc, #56]	; (8003214 <ep_read+0xa4>)
 80031da:	402b      	ands	r3, r5
 80031dc:	d001      	beq.n	80031e2 <ep_read+0x72>
 80031de:	42ab      	cmp	r3, r5
 80031e0:	d105      	bne.n	80031ee <ep_read+0x7e>
            *reg = (*reg & USB_EPREG_MASK) | USB_EP_SWBUF_RX;
 80031e2:	8823      	ldrh	r3, [r4, #0]
 80031e4:	4d0c      	ldr	r5, [pc, #48]	; (8003218 <ep_read+0xa8>)
 80031e6:	401d      	ands	r5, r3
 80031e8:	2340      	movs	r3, #64	; 0x40
 80031ea:	432b      	orrs	r3, r5
 80031ec:	8023      	strh	r3, [r4, #0]
        if (*reg & USB_EP_SWBUF_RX) {
 80031ee:	8823      	ldrh	r3, [r4, #0]
 80031f0:	065b      	lsls	r3, r3, #25
 80031f2:	d500      	bpl.n	80031f6 <ep_read+0x86>
            return pma_read(buf, blen, &(tbl->rx1));
 80031f4:	3204      	adds	r2, #4
            return pma_read(buf, blen, &(tbl->rx0));
 80031f6:	f7ff ff99 	bl	800312c <pma_read>
    }
}
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
        if (*reg & USB_EP_DTOG_RX) {
 80031fc:	8823      	ldrh	r3, [r4, #0]
 80031fe:	045b      	lsls	r3, r3, #17
 8003200:	d5f9      	bpl.n	80031f6 <ep_read+0x86>
            return pma_read(buf, blen, &(tbl->rx1));
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <ep_read+0xac>)
 8003204:	18ea      	adds	r2, r5, r3
 8003206:	e7f6      	b.n	80031f6 <ep_read+0x86>
 8003208:	40006000 	.word	0x40006000
 800320c:	40005c00 	.word	0x40005c00
 8003210:	ffffbf8f 	.word	0xffffbf8f
 8003214:	00004040 	.word	0x00004040
 8003218:	ffff8f8f 	.word	0xffff8f8f
 800321c:	40006004 	.word	0x40006004

08003220 <pma_write>:

static void pma_write(uint8_t *buf, uint16_t blen, pma_rec *tx) {
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t *pma = (void*)(USB_PMAADDR + tx->addr);
 8003222:	8813      	ldrh	r3, [r2, #0]
    tx->cnt = blen;
 8003224:	8051      	strh	r1, [r2, #2]
    while (blen > 1) {
 8003226:	0005      	movs	r5, r0
 8003228:	000a      	movs	r2, r1
    uint16_t *pma = (void*)(USB_PMAADDR + tx->addr);
 800322a:	4c0d      	ldr	r4, [pc, #52]	; (8003260 <pma_write+0x40>)
        *pma++ = buf[1] << 8 | buf[0];
 800322c:	4e0c      	ldr	r6, [pc, #48]	; (8003260 <pma_write+0x40>)
    uint16_t *pma = (void*)(USB_PMAADDR + tx->addr);
 800322e:	191c      	adds	r4, r3, r4
        *pma++ = buf[1] << 8 | buf[0];
 8003230:	1a1b      	subs	r3, r3, r0
 8003232:	199b      	adds	r3, r3, r6
    while (blen > 1) {
 8003234:	2a01      	cmp	r2, #1
 8003236:	d80a      	bhi.n	800324e <pma_write+0x2e>
 8003238:	084b      	lsrs	r3, r1, #1
 800323a:	005b      	lsls	r3, r3, #1
        buf += 2;
        blen -= 2;
    }
    if (blen) *pma = *buf;
 800323c:	1ac9      	subs	r1, r1, r3
 800323e:	b289      	uxth	r1, r1
 8003240:	18c0      	adds	r0, r0, r3
 8003242:	18e4      	adds	r4, r4, r3
 8003244:	2900      	cmp	r1, #0
 8003246:	d001      	beq.n	800324c <pma_write+0x2c>
 8003248:	7803      	ldrb	r3, [r0, #0]
 800324a:	8023      	strh	r3, [r4, #0]
}
 800324c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pma++ = buf[1] << 8 | buf[0];
 800324e:	786f      	ldrb	r7, [r5, #1]
 8003250:	782e      	ldrb	r6, [r5, #0]
 8003252:	023f      	lsls	r7, r7, #8
 8003254:	433e      	orrs	r6, r7
        blen -= 2;
 8003256:	3a02      	subs	r2, #2
        *pma++ = buf[1] << 8 | buf[0];
 8003258:	52ee      	strh	r6, [r5, r3]
        blen -= 2;
 800325a:	b292      	uxth	r2, r2
        buf += 2;
 800325c:	3502      	adds	r5, #2
 800325e:	e7e9      	b.n	8003234 <pma_write+0x14>
 8003260:	40006000 	.word	0x40006000

08003264 <ep_write>:

int32_t ep_write(uint8_t ep, void *buf, uint16_t blen) {
 8003264:	b570      	push	{r4, r5, r6, lr}
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8003266:	2307      	movs	r3, #7
int32_t ep_write(uint8_t ep, void *buf, uint16_t blen) {
 8003268:	0004      	movs	r4, r0
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 800326a:	401c      	ands	r4, r3
 800326c:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <ep_write+0x94>)
int32_t ep_write(uint8_t ep, void *buf, uint16_t blen) {
 800326e:	0008      	movs	r0, r1
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8003270:	00e1      	lsls	r1, r4, #3
int32_t ep_write(uint8_t ep, void *buf, uint16_t blen) {
 8003272:	0015      	movs	r5, r2
    return (pma_table*)((ep & 0x07) * 8 + USB_PMAADDR);
 8003274:	18ca      	adds	r2, r1, r3
    return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <ep_write+0x98>)
 8003278:	00a4      	lsls	r4, r4, #2
 800327a:	18e4      	adds	r4, r4, r3
    pma_table *tbl = EPT(ep);
    volatile uint16_t *reg = EPR(ep);
    switch (*reg & (USB_EPTX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {
 800327c:	23e6      	movs	r3, #230	; 0xe6
 800327e:	8826      	ldrh	r6, [r4, #0]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4033      	ands	r3, r6
 8003284:	2688      	movs	r6, #136	; 0x88
 8003286:	00b6      	lsls	r6, r6, #2
 8003288:	42b3      	cmp	r3, r6
 800328a:	d011      	beq.n	80032b0 <ep_write+0x4c>
 800328c:	d808      	bhi.n	80032a0 <ep_write+0x3c>
 800328e:	2b20      	cmp	r3, #32
 8003290:	d00e      	beq.n	80032b0 <ep_write+0x4c>
 8003292:	3e01      	subs	r6, #1
 8003294:	3eff      	subs	r6, #255	; 0xff
 8003296:	42b3      	cmp	r3, r6
 8003298:	d013      	beq.n	80032c2 <ep_write+0x5e>
        pma_write(buf, blen, &(tbl->tx));
        EP_TX_VALID(reg);
        break;
    /* invalid or not ready */
    default:
        return -1;
 800329a:	2001      	movs	r0, #1
 800329c:	4240      	negs	r0, r0
 800329e:	e029      	b.n	80032f4 <ep_write+0x90>
    switch (*reg & (USB_EPTX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {
 80032a0:	2686      	movs	r6, #134	; 0x86
 80032a2:	00f6      	lsls	r6, r6, #3
 80032a4:	42b3      	cmp	r3, r6
 80032a6:	d01c      	beq.n	80032e2 <ep_write+0x7e>
 80032a8:	21c4      	movs	r1, #196	; 0xc4
 80032aa:	00c9      	lsls	r1, r1, #3
 80032ac:	428b      	cmp	r3, r1
 80032ae:	d1f4      	bne.n	800329a <ep_write+0x36>
        pma_write(buf, blen, &(tbl->tx));
 80032b0:	0029      	movs	r1, r5
 80032b2:	f7ff ffb5 	bl	8003220 <pma_write>
        EP_TX_VALID(reg);
 80032b6:	2330      	movs	r3, #48	; 0x30
 80032b8:	8822      	ldrh	r2, [r4, #0]
 80032ba:	4053      	eors	r3, r2
 80032bc:	4a10      	ldr	r2, [pc, #64]	; (8003300 <ep_write+0x9c>)
 80032be:	4013      	ands	r3, r2
 80032c0:	e00d      	b.n	80032de <ep_write+0x7a>
        if (*reg & USB_EP_SWBUF_TX) {
 80032c2:	8823      	ldrh	r3, [r4, #0]
 80032c4:	045b      	lsls	r3, r3, #17
 80032c6:	d501      	bpl.n	80032cc <ep_write+0x68>
            pma_write(buf, blen, &(tbl->tx1));
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <ep_write+0xa0>)
 80032ca:	18ca      	adds	r2, r1, r3
            pma_write(buf, blen, &(tbl->tx0));
 80032cc:	0029      	movs	r1, r5
 80032ce:	f7ff ffa7 	bl	8003220 <pma_write>
        *reg = (*reg & USB_EPREG_MASK) | USB_EP_SWBUF_TX;
 80032d2:	8823      	ldrh	r3, [r4, #0]
 80032d4:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <ep_write+0xa4>)
 80032d6:	401a      	ands	r2, r3
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	01db      	lsls	r3, r3, #7
 80032dc:	4313      	orrs	r3, r2
        EP_TX_VALID(reg);
 80032de:	8023      	strh	r3, [r4, #0]
        break;
 80032e0:	e007      	b.n	80032f2 <ep_write+0x8e>
        if (!(*reg & USB_EP_DTOG_TX)) {
 80032e2:	8823      	ldrh	r3, [r4, #0]
 80032e4:	065b      	lsls	r3, r3, #25
 80032e6:	d401      	bmi.n	80032ec <ep_write+0x88>
            pma_write(buf, blen, &(tbl->tx1));
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <ep_write+0xa0>)
 80032ea:	18ca      	adds	r2, r1, r3
            pma_write(buf, blen, &(tbl->tx0));
 80032ec:	0029      	movs	r1, r5
 80032ee:	f7ff ff97 	bl	8003220 <pma_write>
    }
    return blen;
 80032f2:	0028      	movs	r0, r5
}
 80032f4:	bd70      	pop	{r4, r5, r6, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	40006000 	.word	0x40006000
 80032fc:	40005c00 	.word	0x40005c00
 8003300:	ffff8fbf 	.word	0xffff8fbf
 8003304:	40006004 	.word	0x40006004
 8003308:	ffff8f8f 	.word	0xffff8f8f

0800330c <get_frame>:

uint16_t get_frame (void) {
    return USB->FNR & USB_FNR_FN;
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <get_frame+0xc>)
 800330e:	8818      	ldrh	r0, [r3, #0]
 8003310:	0540      	lsls	r0, r0, #21
 8003312:	0d40      	lsrs	r0, r0, #21
}
 8003314:	4770      	bx	lr
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40005c48 	.word	0x40005c48

0800331c <evt_poll>:

void evt_poll(usbd_device *dev, usbd_evt_callback callback) {
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t _ev, _ep;
    uint16_t _istr = USB->ISTR;
    _ep = _istr & USB_ISTR_EP_ID;
 800331e:	240f      	movs	r4, #15
void evt_poll(usbd_device *dev, usbd_evt_callback callback) {
 8003320:	000d      	movs	r5, r1
    uint16_t _istr = USB->ISTR;
 8003322:	4930      	ldr	r1, [pc, #192]	; (80033e4 <evt_poll+0xc8>)
void evt_poll(usbd_device *dev, usbd_evt_callback callback) {
 8003324:	0006      	movs	r6, r0
    uint16_t _istr = USB->ISTR;
 8003326:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8003328:	b292      	uxth	r2, r2
    _ep = _istr & USB_ISTR_EP_ID;
 800332a:	b2d3      	uxtb	r3, r2
    if (_istr & USB_ISTR_CTR) {
 800332c:	b210      	sxth	r0, r2
    _ep = _istr & USB_ISTR_EP_ID;
 800332e:	401c      	ands	r4, r3
    if (_istr & USB_ISTR_CTR) {
 8003330:	2800      	cmp	r0, #0
 8003332:	da1b      	bge.n	800336c <evt_poll+0x50>
    return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8003334:	2207      	movs	r2, #7
 8003336:	4013      	ands	r3, r2
 8003338:	4a2b      	ldr	r2, [pc, #172]	; (80033e8 <evt_poll+0xcc>)
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	189b      	adds	r3, r3, r2
        volatile uint16_t *reg = EPR(_ep);
        if (*reg & USB_EP_CTR_TX) {
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	0612      	lsls	r2, r2, #24
 8003342:	d50a      	bpl.n	800335a <evt_poll+0x3e>
            *reg &= (USB_EPREG_MASK ^ USB_EP_CTR_TX);
 8003344:	881a      	ldrh	r2, [r3, #0]
 8003346:	4929      	ldr	r1, [pc, #164]	; (80033ec <evt_poll+0xd0>)
 8003348:	400a      	ands	r2, r1
 800334a:	801a      	strh	r2, [r3, #0]
            _ep |= 0x80;
 800334c:	2380      	movs	r3, #128	; 0x80
            _ev = usbd_evt_eptx;
 800334e:	2104      	movs	r1, #4
            _ep |= 0x80;
 8003350:	431c      	orrs	r4, r3
        USB->ISTR &= ~USB_ISTR_ERR;
        _ev = usbd_evt_error;
    } else {
        return;
    }
    callback(dev, _ev, _ep);
 8003352:	0022      	movs	r2, r4
 8003354:	0030      	movs	r0, r6
 8003356:	47a8      	blx	r5
}
 8003358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            *reg &= (USB_EPREG_MASK ^ USB_EP_CTR_RX);
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	4924      	ldr	r1, [pc, #144]	; (80033f0 <evt_poll+0xd4>)
 800335e:	400a      	ands	r2, r1
 8003360:	801a      	strh	r2, [r3, #0]
            _ev = (*reg & USB_EP_SETUP) ? usbd_evt_epsetup : usbd_evt_eprx;
 8003362:	8819      	ldrh	r1, [r3, #0]
 8003364:	0509      	lsls	r1, r1, #20
 8003366:	0fc9      	lsrs	r1, r1, #31
 8003368:	3105      	adds	r1, #5
 800336a:	e7f2      	b.n	8003352 <evt_poll+0x36>
    } else if (_istr & USB_ISTR_RESET) {
 800336c:	0553      	lsls	r3, r2, #21
 800336e:	d50e      	bpl.n	800338e <evt_poll+0x72>
        USB->BTABLE = 0;
 8003370:	2700      	movs	r7, #0
        USB->ISTR &= ~USB_ISTR_RESET;
 8003372:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8003374:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <evt_poll+0xd8>)
 8003376:	4013      	ands	r3, r2
 8003378:	87cb      	strh	r3, [r1, #62]	; 0x3e
        USB->BTABLE = 0;
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <evt_poll+0xdc>)
 800337c:	801f      	strh	r7, [r3, #0]
            ep_deconfig(i);
 800337e:	b2f8      	uxtb	r0, r7
        for (int i = 0; i < 8; i++) {
 8003380:	3701      	adds	r7, #1
            ep_deconfig(i);
 8003382:	f7ff febb 	bl	80030fc <ep_deconfig>
        for (int i = 0; i < 8; i++) {
 8003386:	2f08      	cmp	r7, #8
 8003388:	d1f9      	bne.n	800337e <evt_poll+0x62>
        _ev = usbd_evt_reset;
 800338a:	2100      	movs	r1, #0
 800338c:	e7e1      	b.n	8003352 <evt_poll+0x36>
    } else if (_istr & USB_ISTR_SOF) {
 800338e:	0593      	lsls	r3, r2, #22
 8003390:	d505      	bpl.n	800339e <evt_poll+0x82>
        USB->ISTR &= ~USB_ISTR_SOF;
 8003392:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <evt_poll+0xe0>)
 8003396:	4013      	ands	r3, r2
 8003398:	87cb      	strh	r3, [r1, #62]	; 0x3e
        _ev = usbd_evt_sof;
 800339a:	2101      	movs	r1, #1
 800339c:	e7d9      	b.n	8003352 <evt_poll+0x36>
    } else if (_istr & USB_ISTR_WKUP) {
 800339e:	04d3      	lsls	r3, r2, #19
 80033a0:	d50a      	bpl.n	80033b8 <evt_poll+0x9c>
        USB->CNTR &= ~USB_CNTR_FSUSP;
 80033a2:	2008      	movs	r0, #8
 80033a4:	4a16      	ldr	r2, [pc, #88]	; (8003400 <evt_poll+0xe4>)
 80033a6:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80033a8:	4383      	bics	r3, r0
 80033aa:	87d3      	strh	r3, [r2, #62]	; 0x3e
        USB->ISTR &= ~USB_ISTR_WKUP;
 80033ac:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <evt_poll+0xe8>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	87cb      	strh	r3, [r1, #62]	; 0x3e
        _ev = usbd_evt_wkup;
 80033b4:	2103      	movs	r1, #3
 80033b6:	e7cc      	b.n	8003352 <evt_poll+0x36>
    } else if (_istr & USB_ISTR_SUSP) {
 80033b8:	0513      	lsls	r3, r2, #20
 80033ba:	d50a      	bpl.n	80033d2 <evt_poll+0xb6>
        USB->CNTR |= USB_CNTR_FSUSP;
 80033bc:	2308      	movs	r3, #8
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <evt_poll+0xe4>)
 80033c0:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
 80033c2:	4303      	orrs	r3, r0
 80033c4:	87d3      	strh	r3, [r2, #62]	; 0x3e
        USB->ISTR &= ~USB_ISTR_SUSP;
 80033c6:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <evt_poll+0xec>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	87cb      	strh	r3, [r1, #62]	; 0x3e
        _ev = usbd_evt_susp;
 80033ce:	2102      	movs	r1, #2
 80033d0:	e7bf      	b.n	8003352 <evt_poll+0x36>
    } else if (_istr & USB_ISTR_ERR) {
 80033d2:	0493      	lsls	r3, r2, #18
 80033d4:	d5c0      	bpl.n	8003358 <evt_poll+0x3c>
        USB->ISTR &= ~USB_ISTR_ERR;
 80033d6:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80033d8:	4a0c      	ldr	r2, [pc, #48]	; (800340c <evt_poll+0xf0>)
 80033da:	4013      	ands	r3, r2
 80033dc:	87cb      	strh	r3, [r1, #62]	; 0x3e
        _ev = usbd_evt_error;
 80033de:	2107      	movs	r1, #7
 80033e0:	e7b7      	b.n	8003352 <evt_poll+0x36>
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	40005c06 	.word	0x40005c06
 80033e8:	40005c00 	.word	0x40005c00
 80033ec:	ffff8f0f 	.word	0xffff8f0f
 80033f0:	00000f8f 	.word	0x00000f8f
 80033f4:	fffffbff 	.word	0xfffffbff
 80033f8:	40005c50 	.word	0x40005c50
 80033fc:	fffffdff 	.word	0xfffffdff
 8003400:	40005c02 	.word	0x40005c02
 8003404:	ffffefff 	.word	0xffffefff
 8003408:	fffff7ff 	.word	0xfffff7ff
 800340c:	ffffdfff 	.word	0xffffdfff

08003410 <getinfo>:
    if (!(RCC->APB1ENR & RCC_APB1ENR_USBEN)) return STATUS_VAL(0);
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <getinfo+0x1c>)
 8003412:	2002      	movs	r0, #2
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	d506      	bpl.n	8003428 <getinfo+0x18>
    if (USB->BCDR & USB_BCDR_DPPU) return STATUS_VAL(USBD_HW_ENABLED | USBD_HW_SPEED_FS);
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <getinfo+0x20>)
 800341c:	3028      	adds	r0, #40	; 0x28
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b21b      	sxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	db00      	blt.n	8003428 <getinfo+0x18>
    return STATUS_VAL(USBD_HW_ENABLED);
 8003426:	3820      	subs	r0, #32
}
 8003428:	4770      	bx	lr
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	40021000 	.word	0x40021000
 8003430:	40005c58 	.word	0x40005c58

08003434 <ep_isstalled>:
bool ep_isstalled(uint8_t ep) {
 8003434:	2307      	movs	r3, #7
    if (ep & 0x80) {
 8003436:	b242      	sxtb	r2, r0
    return (uint16_t*)((ep & 0x07) * 4 + USB_BASE);
 8003438:	4018      	ands	r0, r3
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <ep_isstalled+0x2c>)
 800343c:	0080      	lsls	r0, r0, #2
 800343e:	18c0      	adds	r0, r0, r3
        return (USB_EP_TX_STALL == (USB_EPTX_STAT & *EPR(ep)));
 8003440:	8800      	ldrh	r0, [r0, #0]
    if (ep & 0x80) {
 8003442:	2a00      	cmp	r2, #0
 8003444:	da06      	bge.n	8003454 <ep_isstalled+0x20>
        return (USB_EP_TX_STALL == (USB_EPTX_STAT & *EPR(ep)));
 8003446:	2330      	movs	r3, #48	; 0x30
 8003448:	4018      	ands	r0, r3
 800344a:	3810      	subs	r0, #16
        return (USB_EP_RX_STALL == (USB_EPRX_STAT & *EPR(ep)));
 800344c:	4243      	negs	r3, r0
 800344e:	4158      	adcs	r0, r3
 8003450:	b2c0      	uxtb	r0, r0
}
 8003452:	4770      	bx	lr
        return (USB_EP_RX_STALL == (USB_EPRX_STAT & *EPR(ep)));
 8003454:	23c0      	movs	r3, #192	; 0xc0
 8003456:	019b      	lsls	r3, r3, #6
 8003458:	4018      	ands	r0, r3
 800345a:	4b02      	ldr	r3, [pc, #8]	; (8003464 <ep_isstalled+0x30>)
 800345c:	18c0      	adds	r0, r0, r3
 800345e:	e7f5      	b.n	800344c <ep_isstalled+0x18>
 8003460:	40005c00 	.word	0x40005c00
 8003464:	fffff000 	.word	0xfffff000

08003468 <enable>:
void enable(bool enable) {
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <enable+0x40>)
 800346c:	0412      	lsls	r2, r2, #16
        RCC->APB1ENR  |=  RCC_APB1ENR_USBEN;
 800346e:	69d9      	ldr	r1, [r3, #28]
    if (enable) {
 8003470:	2800      	cmp	r0, #0
 8003472:	d00c      	beq.n	800348e <enable+0x26>
        RCC->APB1ENR  |=  RCC_APB1ENR_USBEN;
 8003474:	4311      	orrs	r1, r2
 8003476:	61d9      	str	r1, [r3, #28]
        RCC->APB1RSTR |= RCC_APB1RSTR_USBRST;
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	430a      	orrs	r2, r1
 800347c:	611a      	str	r2, [r3, #16]
        RCC->APB1RSTR &= ~RCC_APB1RSTR_USBRST;
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	490a      	ldr	r1, [pc, #40]	; (80034ac <enable+0x44>)
 8003482:	400a      	ands	r2, r1
 8003484:	611a      	str	r2, [r3, #16]
        USB->CNTR = USB_CNTR_CTRM | USB_CNTR_RESETM | USB_CNTR_ERRM |
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <enable+0x48>)
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <enable+0x4c>)
 800348a:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 800348c:	4770      	bx	lr
    } else if (RCC->APB1ENR & RCC_APB1ENR_USBEN) {
 800348e:	4211      	tst	r1, r2
 8003490:	d0fc      	beq.n	800348c <enable+0x24>
        USB->BCDR = 0;
 8003492:	4909      	ldr	r1, [pc, #36]	; (80034b8 <enable+0x50>)
 8003494:	8008      	strh	r0, [r1, #0]
        RCC->APB1RSTR |= RCC_APB1RSTR_USBRST;
 8003496:	6919      	ldr	r1, [r3, #16]
 8003498:	430a      	orrs	r2, r1
 800349a:	611a      	str	r2, [r3, #16]
        RCC->APB1ENR &= ~RCC_APB1ENR_USBEN;
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	4903      	ldr	r1, [pc, #12]	; (80034ac <enable+0x44>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	61da      	str	r2, [r3, #28]
}
 80034a4:	e7f2      	b.n	800348c <enable+0x24>
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	40021000 	.word	0x40021000
 80034ac:	ff7fffff 	.word	0xff7fffff
 80034b0:	ffffbe00 	.word	0xffffbe00
 80034b4:	40005c02 	.word	0x40005c02
 80034b8:	40005c58 	.word	0x40005c58

080034bc <get_serialno_desc>:
        data >>= 8;
    }
    return fnv;
}

uint16_t get_serialno_desc(void *buffer) {
 80034bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        fnv *= 16777619;
 80034be:	4d21      	ldr	r5, [pc, #132]	; (8003544 <get_serialno_desc+0x88>)
    struct  usb_string_descriptor *dsc = buffer;
    uint16_t *str = dsc->wString;
    uint32_t fnv = 2166136261;
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x00));
 80034c0:	2104      	movs	r1, #4
        fnv ^= (data & 0xFF);
 80034c2:	27ff      	movs	r7, #255	; 0xff
 80034c4:	002e      	movs	r6, r5
    uint16_t *str = dsc->wString;
 80034c6:	1c83      	adds	r3, r0, #2
 80034c8:	9301      	str	r3, [sp, #4]
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x00));
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <get_serialno_desc+0x8c>)
 80034cc:	681c      	ldr	r4, [r3, #0]
 80034ce:	4b1f      	ldr	r3, [pc, #124]	; (800354c <get_serialno_desc+0x90>)
        fnv ^= (data & 0xFF);
 80034d0:	0022      	movs	r2, r4
 80034d2:	403a      	ands	r2, r7
 80034d4:	4053      	eors	r3, r2
 80034d6:	3901      	subs	r1, #1
        fnv *= 16777619;
 80034d8:	436b      	muls	r3, r5
        data >>= 8;
 80034da:	0a24      	lsrs	r4, r4, #8
    for (int i = 0; i < 4 ; i++) {
 80034dc:	2900      	cmp	r1, #0
 80034de:	d1f7      	bne.n	80034d0 <get_serialno_desc+0x14>
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x04));
 80034e0:	491b      	ldr	r1, [pc, #108]	; (8003550 <get_serialno_desc+0x94>)
        fnv ^= (data & 0xFF);
 80034e2:	27ff      	movs	r7, #255	; 0xff
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x04));
 80034e4:	680c      	ldr	r4, [r1, #0]
 80034e6:	2104      	movs	r1, #4
        fnv ^= (data & 0xFF);
 80034e8:	0025      	movs	r5, r4
 80034ea:	403d      	ands	r5, r7
 80034ec:	406b      	eors	r3, r5
 80034ee:	3901      	subs	r1, #1
        fnv *= 16777619;
 80034f0:	4373      	muls	r3, r6
        data >>= 8;
 80034f2:	0a24      	lsrs	r4, r4, #8
    for (int i = 0; i < 4 ; i++) {
 80034f4:	2900      	cmp	r1, #0
 80034f6:	d1f7      	bne.n	80034e8 <get_serialno_desc+0x2c>
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x14));
 80034f8:	4916      	ldr	r1, [pc, #88]	; (8003554 <get_serialno_desc+0x98>)
        fnv ^= (data & 0xFF);
 80034fa:	27ff      	movs	r7, #255	; 0xff
    fnv = fnv1a32_turn(fnv, *(uint32_t*)(UID_BASE + 0x14));
 80034fc:	680c      	ldr	r4, [r1, #0]
 80034fe:	2104      	movs	r1, #4
        fnv ^= (data & 0xFF);
 8003500:	0025      	movs	r5, r4
 8003502:	403d      	ands	r5, r7
 8003504:	406b      	eors	r3, r5
 8003506:	3901      	subs	r1, #1
        fnv *= 16777619;
 8003508:	4373      	muls	r3, r6
        data >>= 8;
 800350a:	0a24      	lsrs	r4, r4, #8
    for (int i = 0; i < 4 ; i++) {
 800350c:	2900      	cmp	r1, #0
 800350e:	d1f7      	bne.n	8003500 <get_serialno_desc+0x44>
    for (int i = 28; i >= 0; i -= 4 ) {
        uint16_t c = (fnv >> i) & 0x0F;
        c += (c < 10) ? '0' : ('A' - 10);
 8003510:	2630      	movs	r6, #48	; 0x30
 8003512:	2737      	movs	r7, #55	; 0x37
 8003514:	9a01      	ldr	r2, [sp, #4]
    for (int i = 0; i < 4 ; i++) {
 8003516:	311c      	adds	r1, #28
        uint16_t c = (fnv >> i) & 0x0F;
 8003518:	001c      	movs	r4, r3
 800351a:	250f      	movs	r5, #15
 800351c:	40cc      	lsrs	r4, r1
 800351e:	402c      	ands	r4, r5
 8003520:	46a4      	mov	ip, r4
        c += (c < 10) ? '0' : ('A' - 10);
 8003522:	4665      	mov	r5, ip
 8003524:	0034      	movs	r4, r6
 8003526:	2d09      	cmp	r5, #9
 8003528:	d900      	bls.n	800352c <get_serialno_desc+0x70>
 800352a:	003c      	movs	r4, r7
 800352c:	4464      	add	r4, ip
    for (int i = 28; i >= 0; i -= 4 ) {
 800352e:	3904      	subs	r1, #4
        *str++ = c;
 8003530:	8014      	strh	r4, [r2, #0]
 8003532:	3202      	adds	r2, #2
    for (int i = 28; i >= 0; i -= 4 ) {
 8003534:	1d0c      	adds	r4, r1, #4
 8003536:	d1ef      	bne.n	8003518 <get_serialno_desc+0x5c>
    }
    dsc->bDescriptorType = USB_DTYPE_STRING;
 8003538:	2303      	movs	r3, #3
 800353a:	7043      	strb	r3, [r0, #1]
    dsc->bLength = 18;
 800353c:	330f      	adds	r3, #15
 800353e:	7003      	strb	r3, [r0, #0]
    return 18;
}
 8003540:	0018      	movs	r0, r3
 8003542:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003544:	01000193 	.word	0x01000193
 8003548:	1ffff7ac 	.word	0x1ffff7ac
 800354c:	811c9dc5 	.word	0x811c9dc5
 8003550:	1ffff7b0 	.word	0x1ffff7b0
 8003554:	1ffff7c0 	.word	0x1ffff7c0

08003558 <__libc_init_array>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	2600      	movs	r6, #0
 800355c:	4d0c      	ldr	r5, [pc, #48]	; (8003590 <__libc_init_array+0x38>)
 800355e:	4c0d      	ldr	r4, [pc, #52]	; (8003594 <__libc_init_array+0x3c>)
 8003560:	1b64      	subs	r4, r4, r5
 8003562:	10a4      	asrs	r4, r4, #2
 8003564:	42a6      	cmp	r6, r4
 8003566:	d109      	bne.n	800357c <__libc_init_array+0x24>
 8003568:	2600      	movs	r6, #0
 800356a:	f000 fc4b 	bl	8003e04 <_init>
 800356e:	4d0a      	ldr	r5, [pc, #40]	; (8003598 <__libc_init_array+0x40>)
 8003570:	4c0a      	ldr	r4, [pc, #40]	; (800359c <__libc_init_array+0x44>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	42a6      	cmp	r6, r4
 8003578:	d105      	bne.n	8003586 <__libc_init_array+0x2e>
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	00b3      	lsls	r3, r6, #2
 800357e:	58eb      	ldr	r3, [r5, r3]
 8003580:	4798      	blx	r3
 8003582:	3601      	adds	r6, #1
 8003584:	e7ee      	b.n	8003564 <__libc_init_array+0xc>
 8003586:	00b3      	lsls	r3, r6, #2
 8003588:	58eb      	ldr	r3, [r5, r3]
 800358a:	4798      	blx	r3
 800358c:	3601      	adds	r6, #1
 800358e:	e7f2      	b.n	8003576 <__libc_init_array+0x1e>
 8003590:	08003ff4 	.word	0x08003ff4
 8003594:	08003ff4 	.word	0x08003ff4
 8003598:	08003ff4 	.word	0x08003ff4
 800359c:	08003ff8 	.word	0x08003ff8

080035a0 <memcpy>:
 80035a0:	2300      	movs	r3, #0
 80035a2:	b510      	push	{r4, lr}
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d100      	bne.n	80035aa <memcpy+0xa>
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	5ccc      	ldrb	r4, [r1, r3]
 80035ac:	54c4      	strb	r4, [r0, r3]
 80035ae:	3301      	adds	r3, #1
 80035b0:	e7f8      	b.n	80035a4 <memcpy+0x4>

080035b2 <memmove>:
 80035b2:	b510      	push	{r4, lr}
 80035b4:	4288      	cmp	r0, r1
 80035b6:	d902      	bls.n	80035be <memmove+0xc>
 80035b8:	188b      	adds	r3, r1, r2
 80035ba:	4298      	cmp	r0, r3
 80035bc:	d308      	bcc.n	80035d0 <memmove+0x1e>
 80035be:	2300      	movs	r3, #0
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d007      	beq.n	80035d4 <memmove+0x22>
 80035c4:	5ccc      	ldrb	r4, [r1, r3]
 80035c6:	54c4      	strb	r4, [r0, r3]
 80035c8:	3301      	adds	r3, #1
 80035ca:	e7f9      	b.n	80035c0 <memmove+0xe>
 80035cc:	5c8b      	ldrb	r3, [r1, r2]
 80035ce:	5483      	strb	r3, [r0, r2]
 80035d0:	3a01      	subs	r2, #1
 80035d2:	d2fb      	bcs.n	80035cc <memmove+0x1a>
 80035d4:	bd10      	pop	{r4, pc}
	...

080035d8 <siprintf>:
 80035d8:	b40e      	push	{r1, r2, r3}
 80035da:	b510      	push	{r4, lr}
 80035dc:	b09d      	sub	sp, #116	; 0x74
 80035de:	a902      	add	r1, sp, #8
 80035e0:	9002      	str	r0, [sp, #8]
 80035e2:	6108      	str	r0, [r1, #16]
 80035e4:	480b      	ldr	r0, [pc, #44]	; (8003614 <siprintf+0x3c>)
 80035e6:	2482      	movs	r4, #130	; 0x82
 80035e8:	6088      	str	r0, [r1, #8]
 80035ea:	6148      	str	r0, [r1, #20]
 80035ec:	2001      	movs	r0, #1
 80035ee:	4240      	negs	r0, r0
 80035f0:	ab1f      	add	r3, sp, #124	; 0x7c
 80035f2:	81c8      	strh	r0, [r1, #14]
 80035f4:	4808      	ldr	r0, [pc, #32]	; (8003618 <siprintf+0x40>)
 80035f6:	cb04      	ldmia	r3!, {r2}
 80035f8:	00a4      	lsls	r4, r4, #2
 80035fa:	6800      	ldr	r0, [r0, #0]
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	818c      	strh	r4, [r1, #12]
 8003600:	f000 f86e 	bl	80036e0 <_svfiprintf_r>
 8003604:	2300      	movs	r3, #0
 8003606:	9a02      	ldr	r2, [sp, #8]
 8003608:	7013      	strb	r3, [r2, #0]
 800360a:	b01d      	add	sp, #116	; 0x74
 800360c:	bc10      	pop	{r4}
 800360e:	bc08      	pop	{r3}
 8003610:	b003      	add	sp, #12
 8003612:	4718      	bx	r3
 8003614:	7fffffff 	.word	0x7fffffff
 8003618:	2000000c 	.word	0x2000000c

0800361c <__ssputs_r>:
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361e:	688e      	ldr	r6, [r1, #8]
 8003620:	b085      	sub	sp, #20
 8003622:	0007      	movs	r7, r0
 8003624:	000c      	movs	r4, r1
 8003626:	9203      	str	r2, [sp, #12]
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	429e      	cmp	r6, r3
 800362c:	d839      	bhi.n	80036a2 <__ssputs_r+0x86>
 800362e:	2390      	movs	r3, #144	; 0x90
 8003630:	898a      	ldrh	r2, [r1, #12]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	421a      	tst	r2, r3
 8003636:	d034      	beq.n	80036a2 <__ssputs_r+0x86>
 8003638:	2503      	movs	r5, #3
 800363a:	6909      	ldr	r1, [r1, #16]
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	1a5b      	subs	r3, r3, r1
 8003640:	9302      	str	r3, [sp, #8]
 8003642:	6963      	ldr	r3, [r4, #20]
 8003644:	9802      	ldr	r0, [sp, #8]
 8003646:	435d      	muls	r5, r3
 8003648:	0feb      	lsrs	r3, r5, #31
 800364a:	195d      	adds	r5, r3, r5
 800364c:	9b01      	ldr	r3, [sp, #4]
 800364e:	106d      	asrs	r5, r5, #1
 8003650:	3301      	adds	r3, #1
 8003652:	181b      	adds	r3, r3, r0
 8003654:	42ab      	cmp	r3, r5
 8003656:	d900      	bls.n	800365a <__ssputs_r+0x3e>
 8003658:	001d      	movs	r5, r3
 800365a:	0553      	lsls	r3, r2, #21
 800365c:	d532      	bpl.n	80036c4 <__ssputs_r+0xa8>
 800365e:	0029      	movs	r1, r5
 8003660:	0038      	movs	r0, r7
 8003662:	f000 fb1f 	bl	8003ca4 <_malloc_r>
 8003666:	1e06      	subs	r6, r0, #0
 8003668:	d109      	bne.n	800367e <__ssputs_r+0x62>
 800366a:	230c      	movs	r3, #12
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	2340      	movs	r3, #64	; 0x40
 8003670:	2001      	movs	r0, #1
 8003672:	89a2      	ldrh	r2, [r4, #12]
 8003674:	4240      	negs	r0, r0
 8003676:	4313      	orrs	r3, r2
 8003678:	81a3      	strh	r3, [r4, #12]
 800367a:	b005      	add	sp, #20
 800367c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800367e:	9a02      	ldr	r2, [sp, #8]
 8003680:	6921      	ldr	r1, [r4, #16]
 8003682:	f7ff ff8d 	bl	80035a0 <memcpy>
 8003686:	89a3      	ldrh	r3, [r4, #12]
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <__ssputs_r+0xc0>)
 800368a:	401a      	ands	r2, r3
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	4313      	orrs	r3, r2
 8003690:	81a3      	strh	r3, [r4, #12]
 8003692:	9b02      	ldr	r3, [sp, #8]
 8003694:	6126      	str	r6, [r4, #16]
 8003696:	18f6      	adds	r6, r6, r3
 8003698:	6026      	str	r6, [r4, #0]
 800369a:	6165      	str	r5, [r4, #20]
 800369c:	9e01      	ldr	r6, [sp, #4]
 800369e:	1aed      	subs	r5, r5, r3
 80036a0:	60a5      	str	r5, [r4, #8]
 80036a2:	9b01      	ldr	r3, [sp, #4]
 80036a4:	42b3      	cmp	r3, r6
 80036a6:	d200      	bcs.n	80036aa <__ssputs_r+0x8e>
 80036a8:	001e      	movs	r6, r3
 80036aa:	0032      	movs	r2, r6
 80036ac:	9903      	ldr	r1, [sp, #12]
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	f7ff ff7f 	bl	80035b2 <memmove>
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	2000      	movs	r0, #0
 80036b8:	1b9b      	subs	r3, r3, r6
 80036ba:	60a3      	str	r3, [r4, #8]
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	199e      	adds	r6, r3, r6
 80036c0:	6026      	str	r6, [r4, #0]
 80036c2:	e7da      	b.n	800367a <__ssputs_r+0x5e>
 80036c4:	002a      	movs	r2, r5
 80036c6:	0038      	movs	r0, r7
 80036c8:	f000 fb4a 	bl	8003d60 <_realloc_r>
 80036cc:	1e06      	subs	r6, r0, #0
 80036ce:	d1e0      	bne.n	8003692 <__ssputs_r+0x76>
 80036d0:	6921      	ldr	r1, [r4, #16]
 80036d2:	0038      	movs	r0, r7
 80036d4:	f000 fa9c 	bl	8003c10 <_free_r>
 80036d8:	e7c7      	b.n	800366a <__ssputs_r+0x4e>
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	fffffb7f 	.word	0xfffffb7f

080036e0 <_svfiprintf_r>:
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e2:	b09f      	sub	sp, #124	; 0x7c
 80036e4:	9002      	str	r0, [sp, #8]
 80036e6:	9305      	str	r3, [sp, #20]
 80036e8:	898b      	ldrh	r3, [r1, #12]
 80036ea:	000f      	movs	r7, r1
 80036ec:	0016      	movs	r6, r2
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	d511      	bpl.n	8003716 <_svfiprintf_r+0x36>
 80036f2:	690b      	ldr	r3, [r1, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10e      	bne.n	8003716 <_svfiprintf_r+0x36>
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	f000 fad3 	bl	8003ca4 <_malloc_r>
 80036fe:	6038      	str	r0, [r7, #0]
 8003700:	6138      	str	r0, [r7, #16]
 8003702:	2800      	cmp	r0, #0
 8003704:	d105      	bne.n	8003712 <_svfiprintf_r+0x32>
 8003706:	230c      	movs	r3, #12
 8003708:	9a02      	ldr	r2, [sp, #8]
 800370a:	3801      	subs	r0, #1
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	b01f      	add	sp, #124	; 0x7c
 8003710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003712:	2340      	movs	r3, #64	; 0x40
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	2300      	movs	r3, #0
 8003718:	ad06      	add	r5, sp, #24
 800371a:	616b      	str	r3, [r5, #20]
 800371c:	3320      	adds	r3, #32
 800371e:	766b      	strb	r3, [r5, #25]
 8003720:	3310      	adds	r3, #16
 8003722:	76ab      	strb	r3, [r5, #26]
 8003724:	0034      	movs	r4, r6
 8003726:	7823      	ldrb	r3, [r4, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d147      	bne.n	80037bc <_svfiprintf_r+0xdc>
 800372c:	1ba3      	subs	r3, r4, r6
 800372e:	9304      	str	r3, [sp, #16]
 8003730:	d00d      	beq.n	800374e <_svfiprintf_r+0x6e>
 8003732:	1ba3      	subs	r3, r4, r6
 8003734:	0032      	movs	r2, r6
 8003736:	0039      	movs	r1, r7
 8003738:	9802      	ldr	r0, [sp, #8]
 800373a:	f7ff ff6f 	bl	800361c <__ssputs_r>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	d100      	bne.n	8003744 <_svfiprintf_r+0x64>
 8003742:	e0b5      	b.n	80038b0 <_svfiprintf_r+0x1d0>
 8003744:	696a      	ldr	r2, [r5, #20]
 8003746:	9b04      	ldr	r3, [sp, #16]
 8003748:	4694      	mov	ip, r2
 800374a:	4463      	add	r3, ip
 800374c:	616b      	str	r3, [r5, #20]
 800374e:	7823      	ldrb	r3, [r4, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d100      	bne.n	8003756 <_svfiprintf_r+0x76>
 8003754:	e0ac      	b.n	80038b0 <_svfiprintf_r+0x1d0>
 8003756:	2201      	movs	r2, #1
 8003758:	2300      	movs	r3, #0
 800375a:	4252      	negs	r2, r2
 800375c:	606a      	str	r2, [r5, #4]
 800375e:	a902      	add	r1, sp, #8
 8003760:	3254      	adds	r2, #84	; 0x54
 8003762:	1852      	adds	r2, r2, r1
 8003764:	3401      	adds	r4, #1
 8003766:	602b      	str	r3, [r5, #0]
 8003768:	60eb      	str	r3, [r5, #12]
 800376a:	60ab      	str	r3, [r5, #8]
 800376c:	7013      	strb	r3, [r2, #0]
 800376e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003770:	4e58      	ldr	r6, [pc, #352]	; (80038d4 <_svfiprintf_r+0x1f4>)
 8003772:	2205      	movs	r2, #5
 8003774:	7821      	ldrb	r1, [r4, #0]
 8003776:	0030      	movs	r0, r6
 8003778:	f000 fa3e 	bl	8003bf8 <memchr>
 800377c:	1c62      	adds	r2, r4, #1
 800377e:	2800      	cmp	r0, #0
 8003780:	d120      	bne.n	80037c4 <_svfiprintf_r+0xe4>
 8003782:	6829      	ldr	r1, [r5, #0]
 8003784:	06cb      	lsls	r3, r1, #27
 8003786:	d504      	bpl.n	8003792 <_svfiprintf_r+0xb2>
 8003788:	2353      	movs	r3, #83	; 0x53
 800378a:	ae02      	add	r6, sp, #8
 800378c:	3020      	adds	r0, #32
 800378e:	199b      	adds	r3, r3, r6
 8003790:	7018      	strb	r0, [r3, #0]
 8003792:	070b      	lsls	r3, r1, #28
 8003794:	d504      	bpl.n	80037a0 <_svfiprintf_r+0xc0>
 8003796:	2353      	movs	r3, #83	; 0x53
 8003798:	202b      	movs	r0, #43	; 0x2b
 800379a:	ae02      	add	r6, sp, #8
 800379c:	199b      	adds	r3, r3, r6
 800379e:	7018      	strb	r0, [r3, #0]
 80037a0:	7823      	ldrb	r3, [r4, #0]
 80037a2:	2b2a      	cmp	r3, #42	; 0x2a
 80037a4:	d016      	beq.n	80037d4 <_svfiprintf_r+0xf4>
 80037a6:	2000      	movs	r0, #0
 80037a8:	210a      	movs	r1, #10
 80037aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ac:	7822      	ldrb	r2, [r4, #0]
 80037ae:	3a30      	subs	r2, #48	; 0x30
 80037b0:	2a09      	cmp	r2, #9
 80037b2:	d955      	bls.n	8003860 <_svfiprintf_r+0x180>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d015      	beq.n	80037e4 <_svfiprintf_r+0x104>
 80037b8:	9309      	str	r3, [sp, #36]	; 0x24
 80037ba:	e013      	b.n	80037e4 <_svfiprintf_r+0x104>
 80037bc:	2b25      	cmp	r3, #37	; 0x25
 80037be:	d0b5      	beq.n	800372c <_svfiprintf_r+0x4c>
 80037c0:	3401      	adds	r4, #1
 80037c2:	e7b0      	b.n	8003726 <_svfiprintf_r+0x46>
 80037c4:	2301      	movs	r3, #1
 80037c6:	1b80      	subs	r0, r0, r6
 80037c8:	4083      	lsls	r3, r0
 80037ca:	6829      	ldr	r1, [r5, #0]
 80037cc:	0014      	movs	r4, r2
 80037ce:	430b      	orrs	r3, r1
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	e7cd      	b.n	8003770 <_svfiprintf_r+0x90>
 80037d4:	9b05      	ldr	r3, [sp, #20]
 80037d6:	1d18      	adds	r0, r3, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	9005      	str	r0, [sp, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	db39      	blt.n	8003854 <_svfiprintf_r+0x174>
 80037e0:	9309      	str	r3, [sp, #36]	; 0x24
 80037e2:	0014      	movs	r4, r2
 80037e4:	7823      	ldrb	r3, [r4, #0]
 80037e6:	2b2e      	cmp	r3, #46	; 0x2e
 80037e8:	d10b      	bne.n	8003802 <_svfiprintf_r+0x122>
 80037ea:	7863      	ldrb	r3, [r4, #1]
 80037ec:	1c62      	adds	r2, r4, #1
 80037ee:	2b2a      	cmp	r3, #42	; 0x2a
 80037f0:	d13e      	bne.n	8003870 <_svfiprintf_r+0x190>
 80037f2:	9b05      	ldr	r3, [sp, #20]
 80037f4:	3402      	adds	r4, #2
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	9205      	str	r2, [sp, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	db34      	blt.n	800386a <_svfiprintf_r+0x18a>
 8003800:	9307      	str	r3, [sp, #28]
 8003802:	4e35      	ldr	r6, [pc, #212]	; (80038d8 <_svfiprintf_r+0x1f8>)
 8003804:	7821      	ldrb	r1, [r4, #0]
 8003806:	2203      	movs	r2, #3
 8003808:	0030      	movs	r0, r6
 800380a:	f000 f9f5 	bl	8003bf8 <memchr>
 800380e:	2800      	cmp	r0, #0
 8003810:	d006      	beq.n	8003820 <_svfiprintf_r+0x140>
 8003812:	2340      	movs	r3, #64	; 0x40
 8003814:	1b80      	subs	r0, r0, r6
 8003816:	4083      	lsls	r3, r0
 8003818:	682a      	ldr	r2, [r5, #0]
 800381a:	3401      	adds	r4, #1
 800381c:	4313      	orrs	r3, r2
 800381e:	602b      	str	r3, [r5, #0]
 8003820:	7821      	ldrb	r1, [r4, #0]
 8003822:	2206      	movs	r2, #6
 8003824:	482d      	ldr	r0, [pc, #180]	; (80038dc <_svfiprintf_r+0x1fc>)
 8003826:	1c66      	adds	r6, r4, #1
 8003828:	7629      	strb	r1, [r5, #24]
 800382a:	f000 f9e5 	bl	8003bf8 <memchr>
 800382e:	2800      	cmp	r0, #0
 8003830:	d046      	beq.n	80038c0 <_svfiprintf_r+0x1e0>
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <_svfiprintf_r+0x200>)
 8003834:	2b00      	cmp	r3, #0
 8003836:	d12f      	bne.n	8003898 <_svfiprintf_r+0x1b8>
 8003838:	6829      	ldr	r1, [r5, #0]
 800383a:	9b05      	ldr	r3, [sp, #20]
 800383c:	2207      	movs	r2, #7
 800383e:	05c9      	lsls	r1, r1, #23
 8003840:	d528      	bpl.n	8003894 <_svfiprintf_r+0x1b4>
 8003842:	189b      	adds	r3, r3, r2
 8003844:	4393      	bics	r3, r2
 8003846:	3308      	adds	r3, #8
 8003848:	9305      	str	r3, [sp, #20]
 800384a:	696b      	ldr	r3, [r5, #20]
 800384c:	9a03      	ldr	r2, [sp, #12]
 800384e:	189b      	adds	r3, r3, r2
 8003850:	616b      	str	r3, [r5, #20]
 8003852:	e767      	b.n	8003724 <_svfiprintf_r+0x44>
 8003854:	425b      	negs	r3, r3
 8003856:	60eb      	str	r3, [r5, #12]
 8003858:	2302      	movs	r3, #2
 800385a:	430b      	orrs	r3, r1
 800385c:	602b      	str	r3, [r5, #0]
 800385e:	e7c0      	b.n	80037e2 <_svfiprintf_r+0x102>
 8003860:	434b      	muls	r3, r1
 8003862:	3401      	adds	r4, #1
 8003864:	189b      	adds	r3, r3, r2
 8003866:	2001      	movs	r0, #1
 8003868:	e7a0      	b.n	80037ac <_svfiprintf_r+0xcc>
 800386a:	2301      	movs	r3, #1
 800386c:	425b      	negs	r3, r3
 800386e:	e7c7      	b.n	8003800 <_svfiprintf_r+0x120>
 8003870:	2300      	movs	r3, #0
 8003872:	0014      	movs	r4, r2
 8003874:	200a      	movs	r0, #10
 8003876:	001a      	movs	r2, r3
 8003878:	606b      	str	r3, [r5, #4]
 800387a:	7821      	ldrb	r1, [r4, #0]
 800387c:	3930      	subs	r1, #48	; 0x30
 800387e:	2909      	cmp	r1, #9
 8003880:	d903      	bls.n	800388a <_svfiprintf_r+0x1aa>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0bd      	beq.n	8003802 <_svfiprintf_r+0x122>
 8003886:	9207      	str	r2, [sp, #28]
 8003888:	e7bb      	b.n	8003802 <_svfiprintf_r+0x122>
 800388a:	4342      	muls	r2, r0
 800388c:	3401      	adds	r4, #1
 800388e:	1852      	adds	r2, r2, r1
 8003890:	2301      	movs	r3, #1
 8003892:	e7f2      	b.n	800387a <_svfiprintf_r+0x19a>
 8003894:	3307      	adds	r3, #7
 8003896:	e7d5      	b.n	8003844 <_svfiprintf_r+0x164>
 8003898:	ab05      	add	r3, sp, #20
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	003a      	movs	r2, r7
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <_svfiprintf_r+0x204>)
 80038a0:	0029      	movs	r1, r5
 80038a2:	9802      	ldr	r0, [sp, #8]
 80038a4:	e000      	b.n	80038a8 <_svfiprintf_r+0x1c8>
 80038a6:	bf00      	nop
 80038a8:	9003      	str	r0, [sp, #12]
 80038aa:	9b03      	ldr	r3, [sp, #12]
 80038ac:	3301      	adds	r3, #1
 80038ae:	d1cc      	bne.n	800384a <_svfiprintf_r+0x16a>
 80038b0:	89bb      	ldrh	r3, [r7, #12]
 80038b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80038b4:	065b      	lsls	r3, r3, #25
 80038b6:	d400      	bmi.n	80038ba <_svfiprintf_r+0x1da>
 80038b8:	e729      	b.n	800370e <_svfiprintf_r+0x2e>
 80038ba:	2001      	movs	r0, #1
 80038bc:	4240      	negs	r0, r0
 80038be:	e726      	b.n	800370e <_svfiprintf_r+0x2e>
 80038c0:	ab05      	add	r3, sp, #20
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	003a      	movs	r2, r7
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <_svfiprintf_r+0x204>)
 80038c8:	0029      	movs	r1, r5
 80038ca:	9802      	ldr	r0, [sp, #8]
 80038cc:	f000 f87a 	bl	80039c4 <_printf_i>
 80038d0:	e7ea      	b.n	80038a8 <_svfiprintf_r+0x1c8>
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	08003fc0 	.word	0x08003fc0
 80038d8:	08003fc6 	.word	0x08003fc6
 80038dc:	08003fca 	.word	0x08003fca
 80038e0:	00000000 	.word	0x00000000
 80038e4:	0800361d 	.word	0x0800361d

080038e8 <_printf_common>:
 80038e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ea:	0015      	movs	r5, r2
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	688a      	ldr	r2, [r1, #8]
 80038f0:	690b      	ldr	r3, [r1, #16]
 80038f2:	9000      	str	r0, [sp, #0]
 80038f4:	000c      	movs	r4, r1
 80038f6:	4293      	cmp	r3, r2
 80038f8:	da00      	bge.n	80038fc <_printf_common+0x14>
 80038fa:	0013      	movs	r3, r2
 80038fc:	0022      	movs	r2, r4
 80038fe:	602b      	str	r3, [r5, #0]
 8003900:	3243      	adds	r2, #67	; 0x43
 8003902:	7812      	ldrb	r2, [r2, #0]
 8003904:	2a00      	cmp	r2, #0
 8003906:	d001      	beq.n	800390c <_printf_common+0x24>
 8003908:	3301      	adds	r3, #1
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	069b      	lsls	r3, r3, #26
 8003910:	d502      	bpl.n	8003918 <_printf_common+0x30>
 8003912:	682b      	ldr	r3, [r5, #0]
 8003914:	3302      	adds	r3, #2
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	2706      	movs	r7, #6
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	401f      	ands	r7, r3
 800391e:	d027      	beq.n	8003970 <_printf_common+0x88>
 8003920:	0023      	movs	r3, r4
 8003922:	3343      	adds	r3, #67	; 0x43
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	1e5a      	subs	r2, r3, #1
 8003928:	4193      	sbcs	r3, r2
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	0692      	lsls	r2, r2, #26
 800392e:	d430      	bmi.n	8003992 <_printf_common+0xaa>
 8003930:	0022      	movs	r2, r4
 8003932:	9901      	ldr	r1, [sp, #4]
 8003934:	3243      	adds	r2, #67	; 0x43
 8003936:	9800      	ldr	r0, [sp, #0]
 8003938:	9e08      	ldr	r6, [sp, #32]
 800393a:	47b0      	blx	r6
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d025      	beq.n	800398c <_printf_common+0xa4>
 8003940:	2306      	movs	r3, #6
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	682a      	ldr	r2, [r5, #0]
 8003946:	68e1      	ldr	r1, [r4, #12]
 8003948:	4003      	ands	r3, r0
 800394a:	2500      	movs	r5, #0
 800394c:	2b04      	cmp	r3, #4
 800394e:	d103      	bne.n	8003958 <_printf_common+0x70>
 8003950:	1a8d      	subs	r5, r1, r2
 8003952:	43eb      	mvns	r3, r5
 8003954:	17db      	asrs	r3, r3, #31
 8003956:	401d      	ands	r5, r3
 8003958:	68a3      	ldr	r3, [r4, #8]
 800395a:	6922      	ldr	r2, [r4, #16]
 800395c:	4293      	cmp	r3, r2
 800395e:	dd01      	ble.n	8003964 <_printf_common+0x7c>
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	18ed      	adds	r5, r5, r3
 8003964:	2700      	movs	r7, #0
 8003966:	42bd      	cmp	r5, r7
 8003968:	d120      	bne.n	80039ac <_printf_common+0xc4>
 800396a:	2000      	movs	r0, #0
 800396c:	e010      	b.n	8003990 <_printf_common+0xa8>
 800396e:	3701      	adds	r7, #1
 8003970:	68e3      	ldr	r3, [r4, #12]
 8003972:	682a      	ldr	r2, [r5, #0]
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	429f      	cmp	r7, r3
 8003978:	dad2      	bge.n	8003920 <_printf_common+0x38>
 800397a:	0022      	movs	r2, r4
 800397c:	2301      	movs	r3, #1
 800397e:	3219      	adds	r2, #25
 8003980:	9901      	ldr	r1, [sp, #4]
 8003982:	9800      	ldr	r0, [sp, #0]
 8003984:	9e08      	ldr	r6, [sp, #32]
 8003986:	47b0      	blx	r6
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d1f0      	bne.n	800396e <_printf_common+0x86>
 800398c:	2001      	movs	r0, #1
 800398e:	4240      	negs	r0, r0
 8003990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003992:	2030      	movs	r0, #48	; 0x30
 8003994:	18e1      	adds	r1, r4, r3
 8003996:	3143      	adds	r1, #67	; 0x43
 8003998:	7008      	strb	r0, [r1, #0]
 800399a:	0021      	movs	r1, r4
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	3145      	adds	r1, #69	; 0x45
 80039a0:	7809      	ldrb	r1, [r1, #0]
 80039a2:	18a2      	adds	r2, r4, r2
 80039a4:	3243      	adds	r2, #67	; 0x43
 80039a6:	3302      	adds	r3, #2
 80039a8:	7011      	strb	r1, [r2, #0]
 80039aa:	e7c1      	b.n	8003930 <_printf_common+0x48>
 80039ac:	0022      	movs	r2, r4
 80039ae:	2301      	movs	r3, #1
 80039b0:	321a      	adds	r2, #26
 80039b2:	9901      	ldr	r1, [sp, #4]
 80039b4:	9800      	ldr	r0, [sp, #0]
 80039b6:	9e08      	ldr	r6, [sp, #32]
 80039b8:	47b0      	blx	r6
 80039ba:	1c43      	adds	r3, r0, #1
 80039bc:	d0e6      	beq.n	800398c <_printf_common+0xa4>
 80039be:	3701      	adds	r7, #1
 80039c0:	e7d1      	b.n	8003966 <_printf_common+0x7e>
	...

080039c4 <_printf_i>:
 80039c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c6:	b08b      	sub	sp, #44	; 0x2c
 80039c8:	9206      	str	r2, [sp, #24]
 80039ca:	000a      	movs	r2, r1
 80039cc:	3243      	adds	r2, #67	; 0x43
 80039ce:	9307      	str	r3, [sp, #28]
 80039d0:	9005      	str	r0, [sp, #20]
 80039d2:	9204      	str	r2, [sp, #16]
 80039d4:	7e0a      	ldrb	r2, [r1, #24]
 80039d6:	000c      	movs	r4, r1
 80039d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80039da:	2a6e      	cmp	r2, #110	; 0x6e
 80039dc:	d100      	bne.n	80039e0 <_printf_i+0x1c>
 80039de:	e08f      	b.n	8003b00 <_printf_i+0x13c>
 80039e0:	d817      	bhi.n	8003a12 <_printf_i+0x4e>
 80039e2:	2a63      	cmp	r2, #99	; 0x63
 80039e4:	d02c      	beq.n	8003a40 <_printf_i+0x7c>
 80039e6:	d808      	bhi.n	80039fa <_printf_i+0x36>
 80039e8:	2a00      	cmp	r2, #0
 80039ea:	d100      	bne.n	80039ee <_printf_i+0x2a>
 80039ec:	e099      	b.n	8003b22 <_printf_i+0x15e>
 80039ee:	2a58      	cmp	r2, #88	; 0x58
 80039f0:	d054      	beq.n	8003a9c <_printf_i+0xd8>
 80039f2:	0026      	movs	r6, r4
 80039f4:	3642      	adds	r6, #66	; 0x42
 80039f6:	7032      	strb	r2, [r6, #0]
 80039f8:	e029      	b.n	8003a4e <_printf_i+0x8a>
 80039fa:	2a64      	cmp	r2, #100	; 0x64
 80039fc:	d001      	beq.n	8003a02 <_printf_i+0x3e>
 80039fe:	2a69      	cmp	r2, #105	; 0x69
 8003a00:	d1f7      	bne.n	80039f2 <_printf_i+0x2e>
 8003a02:	6821      	ldr	r1, [r4, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	0608      	lsls	r0, r1, #24
 8003a08:	d523      	bpl.n	8003a52 <_printf_i+0x8e>
 8003a0a:	1d11      	adds	r1, r2, #4
 8003a0c:	6019      	str	r1, [r3, #0]
 8003a0e:	6815      	ldr	r5, [r2, #0]
 8003a10:	e025      	b.n	8003a5e <_printf_i+0x9a>
 8003a12:	2a73      	cmp	r2, #115	; 0x73
 8003a14:	d100      	bne.n	8003a18 <_printf_i+0x54>
 8003a16:	e088      	b.n	8003b2a <_printf_i+0x166>
 8003a18:	d808      	bhi.n	8003a2c <_printf_i+0x68>
 8003a1a:	2a6f      	cmp	r2, #111	; 0x6f
 8003a1c:	d029      	beq.n	8003a72 <_printf_i+0xae>
 8003a1e:	2a70      	cmp	r2, #112	; 0x70
 8003a20:	d1e7      	bne.n	80039f2 <_printf_i+0x2e>
 8003a22:	2220      	movs	r2, #32
 8003a24:	6809      	ldr	r1, [r1, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	6022      	str	r2, [r4, #0]
 8003a2a:	e003      	b.n	8003a34 <_printf_i+0x70>
 8003a2c:	2a75      	cmp	r2, #117	; 0x75
 8003a2e:	d020      	beq.n	8003a72 <_printf_i+0xae>
 8003a30:	2a78      	cmp	r2, #120	; 0x78
 8003a32:	d1de      	bne.n	80039f2 <_printf_i+0x2e>
 8003a34:	0022      	movs	r2, r4
 8003a36:	2178      	movs	r1, #120	; 0x78
 8003a38:	3245      	adds	r2, #69	; 0x45
 8003a3a:	7011      	strb	r1, [r2, #0]
 8003a3c:	4a6c      	ldr	r2, [pc, #432]	; (8003bf0 <_printf_i+0x22c>)
 8003a3e:	e030      	b.n	8003aa2 <_printf_i+0xde>
 8003a40:	000e      	movs	r6, r1
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	3642      	adds	r6, #66	; 0x42
 8003a46:	1d11      	adds	r1, r2, #4
 8003a48:	6019      	str	r1, [r3, #0]
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	7033      	strb	r3, [r6, #0]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e079      	b.n	8003b46 <_printf_i+0x182>
 8003a52:	0649      	lsls	r1, r1, #25
 8003a54:	d5d9      	bpl.n	8003a0a <_printf_i+0x46>
 8003a56:	1d11      	adds	r1, r2, #4
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	5ed5      	ldrsh	r5, [r2, r3]
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	da03      	bge.n	8003a6a <_printf_i+0xa6>
 8003a62:	232d      	movs	r3, #45	; 0x2d
 8003a64:	9a04      	ldr	r2, [sp, #16]
 8003a66:	426d      	negs	r5, r5
 8003a68:	7013      	strb	r3, [r2, #0]
 8003a6a:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <_printf_i+0x230>)
 8003a6c:	270a      	movs	r7, #10
 8003a6e:	9303      	str	r3, [sp, #12]
 8003a70:	e02f      	b.n	8003ad2 <_printf_i+0x10e>
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	0605      	lsls	r5, r0, #24
 8003a78:	d503      	bpl.n	8003a82 <_printf_i+0xbe>
 8003a7a:	1d08      	adds	r0, r1, #4
 8003a7c:	6018      	str	r0, [r3, #0]
 8003a7e:	680d      	ldr	r5, [r1, #0]
 8003a80:	e005      	b.n	8003a8e <_printf_i+0xca>
 8003a82:	0640      	lsls	r0, r0, #25
 8003a84:	d5f9      	bpl.n	8003a7a <_printf_i+0xb6>
 8003a86:	680d      	ldr	r5, [r1, #0]
 8003a88:	1d08      	adds	r0, r1, #4
 8003a8a:	6018      	str	r0, [r3, #0]
 8003a8c:	b2ad      	uxth	r5, r5
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <_printf_i+0x230>)
 8003a90:	2708      	movs	r7, #8
 8003a92:	9303      	str	r3, [sp, #12]
 8003a94:	2a6f      	cmp	r2, #111	; 0x6f
 8003a96:	d018      	beq.n	8003aca <_printf_i+0x106>
 8003a98:	270a      	movs	r7, #10
 8003a9a:	e016      	b.n	8003aca <_printf_i+0x106>
 8003a9c:	3145      	adds	r1, #69	; 0x45
 8003a9e:	700a      	strb	r2, [r1, #0]
 8003aa0:	4a54      	ldr	r2, [pc, #336]	; (8003bf4 <_printf_i+0x230>)
 8003aa2:	9203      	str	r2, [sp, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	6821      	ldr	r1, [r4, #0]
 8003aa8:	1d10      	adds	r0, r2, #4
 8003aaa:	6018      	str	r0, [r3, #0]
 8003aac:	6815      	ldr	r5, [r2, #0]
 8003aae:	0608      	lsls	r0, r1, #24
 8003ab0:	d522      	bpl.n	8003af8 <_printf_i+0x134>
 8003ab2:	07cb      	lsls	r3, r1, #31
 8003ab4:	d502      	bpl.n	8003abc <_printf_i+0xf8>
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	4319      	orrs	r1, r3
 8003aba:	6021      	str	r1, [r4, #0]
 8003abc:	2710      	movs	r7, #16
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	d103      	bne.n	8003aca <_printf_i+0x106>
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	6822      	ldr	r2, [r4, #0]
 8003ac6:	439a      	bics	r2, r3
 8003ac8:	6022      	str	r2, [r4, #0]
 8003aca:	0023      	movs	r3, r4
 8003acc:	2200      	movs	r2, #0
 8003ace:	3343      	adds	r3, #67	; 0x43
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	6863      	ldr	r3, [r4, #4]
 8003ad4:	60a3      	str	r3, [r4, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	db5c      	blt.n	8003b94 <_printf_i+0x1d0>
 8003ada:	2204      	movs	r2, #4
 8003adc:	6821      	ldr	r1, [r4, #0]
 8003ade:	4391      	bics	r1, r2
 8003ae0:	6021      	str	r1, [r4, #0]
 8003ae2:	2d00      	cmp	r5, #0
 8003ae4:	d158      	bne.n	8003b98 <_printf_i+0x1d4>
 8003ae6:	9e04      	ldr	r6, [sp, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d064      	beq.n	8003bb6 <_printf_i+0x1f2>
 8003aec:	0026      	movs	r6, r4
 8003aee:	9b03      	ldr	r3, [sp, #12]
 8003af0:	3642      	adds	r6, #66	; 0x42
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	7033      	strb	r3, [r6, #0]
 8003af6:	e05e      	b.n	8003bb6 <_printf_i+0x1f2>
 8003af8:	0648      	lsls	r0, r1, #25
 8003afa:	d5da      	bpl.n	8003ab2 <_printf_i+0xee>
 8003afc:	b2ad      	uxth	r5, r5
 8003afe:	e7d8      	b.n	8003ab2 <_printf_i+0xee>
 8003b00:	6809      	ldr	r1, [r1, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	0608      	lsls	r0, r1, #24
 8003b06:	d505      	bpl.n	8003b14 <_printf_i+0x150>
 8003b08:	1d11      	adds	r1, r2, #4
 8003b0a:	6019      	str	r1, [r3, #0]
 8003b0c:	6813      	ldr	r3, [r2, #0]
 8003b0e:	6962      	ldr	r2, [r4, #20]
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e006      	b.n	8003b22 <_printf_i+0x15e>
 8003b14:	0649      	lsls	r1, r1, #25
 8003b16:	d5f7      	bpl.n	8003b08 <_printf_i+0x144>
 8003b18:	1d11      	adds	r1, r2, #4
 8003b1a:	6019      	str	r1, [r3, #0]
 8003b1c:	6813      	ldr	r3, [r2, #0]
 8003b1e:	8aa2      	ldrh	r2, [r4, #20]
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9e04      	ldr	r6, [sp, #16]
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	e054      	b.n	8003bd4 <_printf_i+0x210>
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	1d11      	adds	r1, r2, #4
 8003b2e:	6019      	str	r1, [r3, #0]
 8003b30:	6816      	ldr	r6, [r2, #0]
 8003b32:	2100      	movs	r1, #0
 8003b34:	6862      	ldr	r2, [r4, #4]
 8003b36:	0030      	movs	r0, r6
 8003b38:	f000 f85e 	bl	8003bf8 <memchr>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d001      	beq.n	8003b44 <_printf_i+0x180>
 8003b40:	1b80      	subs	r0, r0, r6
 8003b42:	6060      	str	r0, [r4, #4]
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9a04      	ldr	r2, [sp, #16]
 8003b4c:	7013      	strb	r3, [r2, #0]
 8003b4e:	e041      	b.n	8003bd4 <_printf_i+0x210>
 8003b50:	6923      	ldr	r3, [r4, #16]
 8003b52:	0032      	movs	r2, r6
 8003b54:	9906      	ldr	r1, [sp, #24]
 8003b56:	9805      	ldr	r0, [sp, #20]
 8003b58:	9d07      	ldr	r5, [sp, #28]
 8003b5a:	47a8      	blx	r5
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d043      	beq.n	8003be8 <_printf_i+0x224>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	2500      	movs	r5, #0
 8003b64:	079b      	lsls	r3, r3, #30
 8003b66:	d40f      	bmi.n	8003b88 <_printf_i+0x1c4>
 8003b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b6a:	68e0      	ldr	r0, [r4, #12]
 8003b6c:	4298      	cmp	r0, r3
 8003b6e:	da3d      	bge.n	8003bec <_printf_i+0x228>
 8003b70:	0018      	movs	r0, r3
 8003b72:	e03b      	b.n	8003bec <_printf_i+0x228>
 8003b74:	0022      	movs	r2, r4
 8003b76:	2301      	movs	r3, #1
 8003b78:	3219      	adds	r2, #25
 8003b7a:	9906      	ldr	r1, [sp, #24]
 8003b7c:	9805      	ldr	r0, [sp, #20]
 8003b7e:	9e07      	ldr	r6, [sp, #28]
 8003b80:	47b0      	blx	r6
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	d030      	beq.n	8003be8 <_printf_i+0x224>
 8003b86:	3501      	adds	r5, #1
 8003b88:	68e3      	ldr	r3, [r4, #12]
 8003b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	429d      	cmp	r5, r3
 8003b90:	dbf0      	blt.n	8003b74 <_printf_i+0x1b0>
 8003b92:	e7e9      	b.n	8003b68 <_printf_i+0x1a4>
 8003b94:	2d00      	cmp	r5, #0
 8003b96:	d0a9      	beq.n	8003aec <_printf_i+0x128>
 8003b98:	9e04      	ldr	r6, [sp, #16]
 8003b9a:	0028      	movs	r0, r5
 8003b9c:	0039      	movs	r1, r7
 8003b9e:	f7fc fb4d 	bl	800023c <__aeabi_uidivmod>
 8003ba2:	9b03      	ldr	r3, [sp, #12]
 8003ba4:	3e01      	subs	r6, #1
 8003ba6:	5c5b      	ldrb	r3, [r3, r1]
 8003ba8:	0028      	movs	r0, r5
 8003baa:	7033      	strb	r3, [r6, #0]
 8003bac:	0039      	movs	r1, r7
 8003bae:	f7fc fabf 	bl	8000130 <__udivsi3>
 8003bb2:	1e05      	subs	r5, r0, #0
 8003bb4:	d1f1      	bne.n	8003b9a <_printf_i+0x1d6>
 8003bb6:	2f08      	cmp	r7, #8
 8003bb8:	d109      	bne.n	8003bce <_printf_i+0x20a>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	07db      	lsls	r3, r3, #31
 8003bbe:	d506      	bpl.n	8003bce <_printf_i+0x20a>
 8003bc0:	6863      	ldr	r3, [r4, #4]
 8003bc2:	6922      	ldr	r2, [r4, #16]
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	dc02      	bgt.n	8003bce <_printf_i+0x20a>
 8003bc8:	2330      	movs	r3, #48	; 0x30
 8003bca:	3e01      	subs	r6, #1
 8003bcc:	7033      	strb	r3, [r6, #0]
 8003bce:	9b04      	ldr	r3, [sp, #16]
 8003bd0:	1b9b      	subs	r3, r3, r6
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	9b07      	ldr	r3, [sp, #28]
 8003bd6:	aa09      	add	r2, sp, #36	; 0x24
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	0021      	movs	r1, r4
 8003bdc:	9b06      	ldr	r3, [sp, #24]
 8003bde:	9805      	ldr	r0, [sp, #20]
 8003be0:	f7ff fe82 	bl	80038e8 <_printf_common>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d1b3      	bne.n	8003b50 <_printf_i+0x18c>
 8003be8:	2001      	movs	r0, #1
 8003bea:	4240      	negs	r0, r0
 8003bec:	b00b      	add	sp, #44	; 0x2c
 8003bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf0:	08003fe2 	.word	0x08003fe2
 8003bf4:	08003fd1 	.word	0x08003fd1

08003bf8 <memchr>:
 8003bf8:	b2c9      	uxtb	r1, r1
 8003bfa:	1882      	adds	r2, r0, r2
 8003bfc:	4290      	cmp	r0, r2
 8003bfe:	d101      	bne.n	8003c04 <memchr+0xc>
 8003c00:	2000      	movs	r0, #0
 8003c02:	4770      	bx	lr
 8003c04:	7803      	ldrb	r3, [r0, #0]
 8003c06:	428b      	cmp	r3, r1
 8003c08:	d0fb      	beq.n	8003c02 <memchr+0xa>
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	e7f6      	b.n	8003bfc <memchr+0x4>
	...

08003c10 <_free_r>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	0005      	movs	r5, r0
 8003c14:	2900      	cmp	r1, #0
 8003c16:	d010      	beq.n	8003c3a <_free_r+0x2a>
 8003c18:	1f0c      	subs	r4, r1, #4
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	da00      	bge.n	8003c22 <_free_r+0x12>
 8003c20:	18e4      	adds	r4, r4, r3
 8003c22:	0028      	movs	r0, r5
 8003c24:	f000 f8d4 	bl	8003dd0 <__malloc_lock>
 8003c28:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <_free_r+0x90>)
 8003c2a:	6813      	ldr	r3, [r2, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <_free_r+0x2c>
 8003c30:	6063      	str	r3, [r4, #4]
 8003c32:	6014      	str	r4, [r2, #0]
 8003c34:	0028      	movs	r0, r5
 8003c36:	f000 f8cc 	bl	8003dd2 <__malloc_unlock>
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	d909      	bls.n	8003c54 <_free_r+0x44>
 8003c40:	6821      	ldr	r1, [r4, #0]
 8003c42:	1860      	adds	r0, r4, r1
 8003c44:	4283      	cmp	r3, r0
 8003c46:	d1f3      	bne.n	8003c30 <_free_r+0x20>
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	1841      	adds	r1, r0, r1
 8003c4e:	6021      	str	r1, [r4, #0]
 8003c50:	e7ee      	b.n	8003c30 <_free_r+0x20>
 8003c52:	0013      	movs	r3, r2
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	2a00      	cmp	r2, #0
 8003c58:	d001      	beq.n	8003c5e <_free_r+0x4e>
 8003c5a:	42a2      	cmp	r2, r4
 8003c5c:	d9f9      	bls.n	8003c52 <_free_r+0x42>
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	1858      	adds	r0, r3, r1
 8003c62:	42a0      	cmp	r0, r4
 8003c64:	d10b      	bne.n	8003c7e <_free_r+0x6e>
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	1809      	adds	r1, r1, r0
 8003c6a:	1858      	adds	r0, r3, r1
 8003c6c:	6019      	str	r1, [r3, #0]
 8003c6e:	4282      	cmp	r2, r0
 8003c70:	d1e0      	bne.n	8003c34 <_free_r+0x24>
 8003c72:	6810      	ldr	r0, [r2, #0]
 8003c74:	6852      	ldr	r2, [r2, #4]
 8003c76:	1841      	adds	r1, r0, r1
 8003c78:	6019      	str	r1, [r3, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	e7da      	b.n	8003c34 <_free_r+0x24>
 8003c7e:	42a0      	cmp	r0, r4
 8003c80:	d902      	bls.n	8003c88 <_free_r+0x78>
 8003c82:	230c      	movs	r3, #12
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	e7d5      	b.n	8003c34 <_free_r+0x24>
 8003c88:	6821      	ldr	r1, [r4, #0]
 8003c8a:	1860      	adds	r0, r4, r1
 8003c8c:	4282      	cmp	r2, r0
 8003c8e:	d103      	bne.n	8003c98 <_free_r+0x88>
 8003c90:	6810      	ldr	r0, [r2, #0]
 8003c92:	6852      	ldr	r2, [r2, #4]
 8003c94:	1841      	adds	r1, r0, r1
 8003c96:	6021      	str	r1, [r4, #0]
 8003c98:	6062      	str	r2, [r4, #4]
 8003c9a:	605c      	str	r4, [r3, #4]
 8003c9c:	e7ca      	b.n	8003c34 <_free_r+0x24>
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	20000e5c 	.word	0x20000e5c

08003ca4 <_malloc_r>:
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	b570      	push	{r4, r5, r6, lr}
 8003ca8:	1ccd      	adds	r5, r1, #3
 8003caa:	439d      	bics	r5, r3
 8003cac:	3508      	adds	r5, #8
 8003cae:	0006      	movs	r6, r0
 8003cb0:	2d0c      	cmp	r5, #12
 8003cb2:	d21e      	bcs.n	8003cf2 <_malloc_r+0x4e>
 8003cb4:	250c      	movs	r5, #12
 8003cb6:	42a9      	cmp	r1, r5
 8003cb8:	d81d      	bhi.n	8003cf6 <_malloc_r+0x52>
 8003cba:	0030      	movs	r0, r6
 8003cbc:	f000 f888 	bl	8003dd0 <__malloc_lock>
 8003cc0:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <_malloc_r+0xb4>)
 8003cc2:	6814      	ldr	r4, [r2, #0]
 8003cc4:	0021      	movs	r1, r4
 8003cc6:	2900      	cmp	r1, #0
 8003cc8:	d119      	bne.n	8003cfe <_malloc_r+0x5a>
 8003cca:	4c24      	ldr	r4, [pc, #144]	; (8003d5c <_malloc_r+0xb8>)
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <_malloc_r+0x36>
 8003cd2:	0030      	movs	r0, r6
 8003cd4:	f000 f86a 	bl	8003dac <_sbrk_r>
 8003cd8:	6020      	str	r0, [r4, #0]
 8003cda:	0029      	movs	r1, r5
 8003cdc:	0030      	movs	r0, r6
 8003cde:	f000 f865 	bl	8003dac <_sbrk_r>
 8003ce2:	1c43      	adds	r3, r0, #1
 8003ce4:	d12c      	bne.n	8003d40 <_malloc_r+0x9c>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	0030      	movs	r0, r6
 8003cea:	6033      	str	r3, [r6, #0]
 8003cec:	f000 f871 	bl	8003dd2 <__malloc_unlock>
 8003cf0:	e003      	b.n	8003cfa <_malloc_r+0x56>
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	dadf      	bge.n	8003cb6 <_malloc_r+0x12>
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	bd70      	pop	{r4, r5, r6, pc}
 8003cfe:	680b      	ldr	r3, [r1, #0]
 8003d00:	1b5b      	subs	r3, r3, r5
 8003d02:	d41a      	bmi.n	8003d3a <_malloc_r+0x96>
 8003d04:	2b0b      	cmp	r3, #11
 8003d06:	d903      	bls.n	8003d10 <_malloc_r+0x6c>
 8003d08:	600b      	str	r3, [r1, #0]
 8003d0a:	18cc      	adds	r4, r1, r3
 8003d0c:	6025      	str	r5, [r4, #0]
 8003d0e:	e003      	b.n	8003d18 <_malloc_r+0x74>
 8003d10:	428c      	cmp	r4, r1
 8003d12:	d10e      	bne.n	8003d32 <_malloc_r+0x8e>
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	0030      	movs	r0, r6
 8003d1a:	f000 f85a 	bl	8003dd2 <__malloc_unlock>
 8003d1e:	0020      	movs	r0, r4
 8003d20:	2207      	movs	r2, #7
 8003d22:	300b      	adds	r0, #11
 8003d24:	1d23      	adds	r3, r4, #4
 8003d26:	4390      	bics	r0, r2
 8003d28:	1ac3      	subs	r3, r0, r3
 8003d2a:	d0e7      	beq.n	8003cfc <_malloc_r+0x58>
 8003d2c:	425a      	negs	r2, r3
 8003d2e:	50e2      	str	r2, [r4, r3]
 8003d30:	e7e4      	b.n	8003cfc <_malloc_r+0x58>
 8003d32:	684b      	ldr	r3, [r1, #4]
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	000c      	movs	r4, r1
 8003d38:	e7ee      	b.n	8003d18 <_malloc_r+0x74>
 8003d3a:	000c      	movs	r4, r1
 8003d3c:	6849      	ldr	r1, [r1, #4]
 8003d3e:	e7c2      	b.n	8003cc6 <_malloc_r+0x22>
 8003d40:	2303      	movs	r3, #3
 8003d42:	1cc4      	adds	r4, r0, #3
 8003d44:	439c      	bics	r4, r3
 8003d46:	42a0      	cmp	r0, r4
 8003d48:	d0e0      	beq.n	8003d0c <_malloc_r+0x68>
 8003d4a:	1a21      	subs	r1, r4, r0
 8003d4c:	0030      	movs	r0, r6
 8003d4e:	f000 f82d 	bl	8003dac <_sbrk_r>
 8003d52:	1c43      	adds	r3, r0, #1
 8003d54:	d1da      	bne.n	8003d0c <_malloc_r+0x68>
 8003d56:	e7c6      	b.n	8003ce6 <_malloc_r+0x42>
 8003d58:	20000e5c 	.word	0x20000e5c
 8003d5c:	20000e60 	.word	0x20000e60

08003d60 <_realloc_r>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	0007      	movs	r7, r0
 8003d64:	000d      	movs	r5, r1
 8003d66:	0016      	movs	r6, r2
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	d105      	bne.n	8003d78 <_realloc_r+0x18>
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	f7ff ff99 	bl	8003ca4 <_malloc_r>
 8003d72:	0004      	movs	r4, r0
 8003d74:	0020      	movs	r0, r4
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d78:	2a00      	cmp	r2, #0
 8003d7a:	d103      	bne.n	8003d84 <_realloc_r+0x24>
 8003d7c:	f7ff ff48 	bl	8003c10 <_free_r>
 8003d80:	0034      	movs	r4, r6
 8003d82:	e7f7      	b.n	8003d74 <_realloc_r+0x14>
 8003d84:	f000 f826 	bl	8003dd4 <_malloc_usable_size_r>
 8003d88:	002c      	movs	r4, r5
 8003d8a:	4286      	cmp	r6, r0
 8003d8c:	d9f2      	bls.n	8003d74 <_realloc_r+0x14>
 8003d8e:	0031      	movs	r1, r6
 8003d90:	0038      	movs	r0, r7
 8003d92:	f7ff ff87 	bl	8003ca4 <_malloc_r>
 8003d96:	1e04      	subs	r4, r0, #0
 8003d98:	d0ec      	beq.n	8003d74 <_realloc_r+0x14>
 8003d9a:	0029      	movs	r1, r5
 8003d9c:	0032      	movs	r2, r6
 8003d9e:	f7ff fbff 	bl	80035a0 <memcpy>
 8003da2:	0029      	movs	r1, r5
 8003da4:	0038      	movs	r0, r7
 8003da6:	f7ff ff33 	bl	8003c10 <_free_r>
 8003daa:	e7e3      	b.n	8003d74 <_realloc_r+0x14>

08003dac <_sbrk_r>:
 8003dac:	2300      	movs	r3, #0
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	4c06      	ldr	r4, [pc, #24]	; (8003dcc <_sbrk_r+0x20>)
 8003db2:	0005      	movs	r5, r0
 8003db4:	0008      	movs	r0, r1
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	f000 f814 	bl	8003de4 <_sbrk>
 8003dbc:	1c43      	adds	r3, r0, #1
 8003dbe:	d103      	bne.n	8003dc8 <_sbrk_r+0x1c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d000      	beq.n	8003dc8 <_sbrk_r+0x1c>
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	200010d4 	.word	0x200010d4

08003dd0 <__malloc_lock>:
 8003dd0:	4770      	bx	lr

08003dd2 <__malloc_unlock>:
 8003dd2:	4770      	bx	lr

08003dd4 <_malloc_usable_size_r>:
 8003dd4:	1f0b      	subs	r3, r1, #4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1f18      	subs	r0, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	da01      	bge.n	8003de2 <_malloc_usable_size_r+0xe>
 8003dde:	580b      	ldr	r3, [r1, r0]
 8003de0:	18c0      	adds	r0, r0, r3
 8003de2:	4770      	bx	lr

08003de4 <_sbrk>:
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <_sbrk+0x18>)
 8003de6:	0002      	movs	r2, r0
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	2900      	cmp	r1, #0
 8003dec:	d101      	bne.n	8003df2 <_sbrk+0xe>
 8003dee:	4904      	ldr	r1, [pc, #16]	; (8003e00 <_sbrk+0x1c>)
 8003df0:	6019      	str	r1, [r3, #0]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	1882      	adds	r2, r0, r2
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	4770      	bx	lr
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	20000e64 	.word	0x20000e64
 8003e00:	200010d8 	.word	0x200010d8

08003e04 <_init>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr

08003e10 <_fini>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr
